<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<!DOCTYPE article PUBLIC "DocBook" "C:/Users/wolfram/Documents/GitHub/secxbrl.info/whitepaper/docbook.dtd">
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>Understanding the U.S. Public Company Financial Information Repository</title>
        <author>
            <personname>Dr. Ghislain Fourny</personname>
            <email>g@28.io</email>
        </author>
        <author>
            <personname>Dennis Knochenwefel</personname>
            <email>d@28.io</email>
        </author>
        <author>
            <personname>Dr. Matthias Brantner</personname>
            <email>m@28.io</email>
        </author>
        <abstract>
            <para><emphasis role="bold">What will I find here?</emphasis> The purpose of this
                document is to explain what the US Public Company Financial Information Repository
                is, and what 28msec is trying to achieve by creating this repository. This document
                is intended for both business users and technical engineers who are trying to
                understand world-class approaches to exchanging business information.</para>
        </abstract>
    </info>
    <sect1>
        <title>Executive Overview</title>
        <para>The <emphasis role="italic">US Public Company Financial Information
                Repository</emphasis> is a database of US public company financial information. US
            Companies are required to submit reports, such as yearly (10-K) and quarterly financial
            reports (10-Q), to the US Securities and Exchange Commission (SEC). Since recently,
            these reports must be submitted using the globally standardized XBRL technical syntax. </para>
        <para>However, such data is only valuable if it can be queried -- just like raw
            meteorological data is useless if nobody can turn it into understandable weather
            forecasts.</para>
        <para>28msec undertook a project to determine the viability of leveraging the global
            standard XBRL within their core information processing platform. To test this idea,
            28msec determined the best way load the entire set of SEC XBRL financial filings within
            its platform. SECXBRL.info and 28.io resulted.</para>
        <para>All 10-K and 10-Q XBRL filings that were submitted to the SEC by public companies were
            parsed, semantically processed, transformed and finally organized in a form that
            maximizes its queryability by business users, both in terms of productivity (quick to
            write) and performance (quick to execute) -- leading to a shorter time-to-market
            (quicker than competitors).</para>
        <para>The queries are performed using an easy-to-use, yet very powerful and sophisticated
            query language that was created specifically for this purpose. The underlying platform
            uses state-of-the-art and highly-optimized database technologies running in the cloud.
            Finally, a REST API allows developers to access and query the data programmatically from
            anywhere they see fit.</para>
        <para>The SECXBRL.info Web site demonstrates how easy this querying framework can be used to
            build an XBRL analytics front-end with a very short time to market. SECXBRL.info is only
            one of the many examples of what can be achieved.</para>
        <para>
        <emphasis role="bold">
            By no means do we directly compete with SEC analytics Web sites such as
                xbrlcloud.com or calcbench.com. Rather, we provide a powerful, underlying querying
                platform, on top of which any of these Web sites could be built or rebuilt from
                scratch in just a couple of weeks, with newly submitted SEC data being freshly
                delivered to their door every day.</emphasis></para> 
    </sect1>
    <sect1>
        <title>Visionary introduction on 28.io</title>
        <sect2>
            <title>A short history of databases</title>
            <para>Data is a very old concept. There was already data in prehistorical times, such as
                Greek epic battles, that were exchanged and transmitted orally over hundreds of
                generations. Then data got written manually (3500 BC), printed by machines (1451),
                and finally stored as bits of information (1837), from cards to now just USB sticks
                or even smartphones and watches.</para>
            <para>One of the major revolutions in databases was the emergence or relational
                databases in the 60s and 70s -- Oracle is probably the most famous enabler in that
                regard. Data was made queryable by storing it in homogeneous tables -- typically
                like a list of persons with names, addresses, cities, etc stored in an Excel
                document. The standardized SQL language is the most prominently known language to
                query tables of data.</para>
        </sect2>
        <sect2>
            <title>Modern databases</title>
            <para>At the beginning of the 2000s though, as dramatically increasing amounts of data
                got created and stored every year, it became clear that homogeneous tabular storage
                is not good enough. Real-world data is not always tabular. Real-world data is not
                always homogeneous. Hence, a new generation of databases, informally called NoSQL,
                emerged, in which data is stored in arborescent form, and with much less
                constraints. Imagine that, in 2013, the amount of data created is roughly five (5!)
                times EVERYTHING that has ever been created by humanity until 2012. And this data is
                not in homogeneous, tabular form. It is crucial to have the necessary tools for
                querying it.</para>
        </sect2>
        <sect2>
            <title>Query languages</title>
            <para>Query language design is like clockwork. A useful query language must be built on
                strong theoretical foundations. One of the most important ideas behind a good
                language is that it is enough for a user to tell the computer what he wants. The
                details of how it is obtained is left to the computer -- and to decades of research
                in query optimization. Such a language is called a declarative language. Easy to use
                for the business user, the burden is put on the IT engineers and researchers that
                program the computer.</para>
        </sect2>
        <sect2>
            <title>Performance</title>
            <para>The potential for optimization of a declarative language (like SQL, but also like
                the latest ones) is virtually only limited by human imagination. As of now,
                computers are able to rewrite queries so that they run faster. For some queries
                (real-world queries!), computers are able to automatically split the work between
                several of them.</para>
            <para>With cloud technologies, a user can ask for computing power on demand. One machine
                might execute a query in one day. Open the tap and ask 10,000 machines instead, and
                you will get the result in less than 10 seconds. In plain old business dollars, the
                cost is exactly the same regardless of the number of machines used (100,000
                machine-seconds). Except that Less Than Ten Seconds Inc. is going much faster to
                market than One Machine For A Whole Day llc.</para>
        </sect2>
        <sect2>
            <title>SEC XBRL financial information and 28.io</title>
			<para>US Public Company financial information is no different than any other data. Database and query technologies can directly be applied to query it and transform it into actionable information. Now that the SEC made it mandatory to submit data in the standardized XBRL format, it is only logical to take this data, put it in a repository using the latest database technologies, and efficiently query it. The power of today's query languages puts no limits on what a business user can ask for, if all the necessary raw data is available. Technical people call these languages "Turing-complete", as a tribute to IT pioneer Alan Turing, who researched on what can be computed and what not.</para>
			<para>28.io is built on, and inspired by modern database technologies, including all the lessons learnt from SQL. With secxbrl.info, we have loaded all SEC publicly available XBRL filings into a database. Users can write queries against the US Public Company Information Repository and ask for all the financial information they want.</para>
			<para>How many dollars do all US companies own in assets, total? What is the DOW 30 company with the highest profit compared with its costs? How many banks recovered the amount, in USD, of the assets they had before the crisis? What is the percentage of S&amp;P 500 companies whose Christmas peak revenues are at least double those of the rest of the year? No problem with 28.io. 28.io was designed so that the query is easy to write. The underlying platform was designed so that optimizations occur behind the hood.</para>
        </sect2>
        <sect2>
            <title>Report semantics and domain specific semantics</title>
			<para>Each business domain has specific semantics.  XBRL is a global standard, the global standard, for expressing business information semantics. Via the base XBRL specification, XBRL Dimensions, XBRL Formula, and other pieces of the XBRL technical specification, domain semantics can be articulated for different business domains.  SEC XBRL financial filings is only one complex example of such business domains.</para>
			<para>But all business domains share a common level of semantics, the business report.  XBRL International began to express business report level semantics with the XBRL Abstract Model 2.0 (http://www.xbrl.org/Specification/abstractmodel-primary/PWD-2012-06-06/abstractmodel-primary-pwd-2012-06-06.html).  The XBRL extension of 28.io was implemented in the spirit of the XBRL Abstract Model 2.0.  28.io leverages these common report level semantics.  Business users and technical engineers can leverage world-class techniques for implementing the global standard XBRL for their business domain and never need to pick up the XBRL technical specifications.  Why? Because we did that for you.  We can guarantee you an effective, robust, reliable, predictable, salable, secure, auditable, and cost effective implementation of XBRL for your business domain. And this is with the key feature which most implementations struggle with the most: extensibility.
</para>
			<para>Arguably, the US GAAP XBRL Taxonomy and SEC implementation of XBRL is one of the most difficult use cases XBRL will ever encounter. All these SEC XBRL financial filings are publicly available. We used these filings to understand how to make XBRL work, with making use of extensibility.</para>
			<para>We achieve this by doing two things. First, we learned from the US GAAP XBRL Taxonomy and SEC implementation of XBRL via the publicly available SEC XBRL financial filings.  Second, we reverse-engineered a robust solution by eliminating the things which cause problems for SEC XBRL financial filings.  This understanding is the grounding for a rock-solid world-class implementation of XBRL.  This application profile is the base of a strong and stable foundation upon which other business domains can build.</para>
        </sect2>
        <sect2>
            <title>The 28.io vision</title>
			<para>With the generalization of reporting standards such as XBRL, and the use of enabling database technologies, the world is going to be more transparent than ever. It has been several decades already that access to raw data was easy (like somebody's address). Now, access to computed, derived, actionable information is becoming easy as well -- because the complexity is handled by the underlying technologies. And, even without changing the queries, it will only get faster as technology evolves and new optimization ideas evolve.</para>
			<para>Very soon, there will be no excuse anymore for a CEO or a financial analyst to say "Oh, but I did not know that!", when the answer was just a query and the push of a button away.
</para>
        </sect2>
        <sect2>
            <title>Garbage in, garbage out</title>
			<para>Key to any information repository or database is validation/verification of the information which goes into the database.  The same query engine used to provide access to information in any information repository is instrumental in keeping the quality of information submitted to the information repository high.  We won’t explore validation/verification in detail in this document, but just realize that the query engine is key to implementing validation/verification.</para>
			<para>28.io allows those creating a business report and those receiving business reports such as regulators to agree on the level of fidelity of reported information. The more business rules and automated validation, the higher the information fidelity.  28.io is a system for managing this entire information supply chain.</para>
        </sect2>
        <sect2>
            <title>Structure of the remainder of this document</title>
			<para>We start with a guided tour of the SECXBRL.info front-end, which serves as an illustration of what can be achieved on top of this 28.io querying platform. We then show what kind of queries can be executed on this platform, via a REST API called by a front-end (the source code for the JSONiq queries themselves is not shown -- it will be in a separate document that specifically targets technical people).
We finally explain the overall architecture and put it in perspective with modern technologies (NoSQL, NOLAP).</para>
        </sect2>
    </sect1>
    <sect1>
        <title>Guided Tour</title>
		<para>There are three interfaces to the US Public Company Financial Information Repository.</para>
        <sect2>
            <title>User-friendly front-end</title>
            <para>First there is a very, very basic business user interface which helps a business
                user understand what is in the information repository and how it is organized: <link xlink:href="http://secxbrl.info/">http://secxbrl.info/</link>.</para>
            <para>This interface allows you to visually retrieve information for an entity of from filings submitted by an entity. For example, you can browse its filings and look at the model structure or fact table of a particular filing component. Furthermore, you can look at some basic analysis of an entity over time (e.g. Net Income vs. Revenue) as well as look at basic financial information (Balance Sheet, Income Statement, …) of a particular quarter.</para>
		</sect2>
        <sect2>
            <title>REST API</title>
            <para>Second, included with the business user GUI is a REST-based API that allows to manually or programmatically retrieve information. This interface provides computer readable formats for the entire system in the JSON, XML, CSV and Excel syntaxes and can be used leveraging standard Internet technologies.</para>
            <para>For example, this interface allows you to retrieve all the information that is available in the graphical interface describe above. Additionally, it allows you to search and retrieve facts across entities and filings.</para>
            <para>The interface is described at http://secxbrl.info/api together with examples that make it easy to use.</para>
		</sect2>
        <sect2>
            <title>28.io development platform</title>
            <para>Third, there is an integrated development environment (IDE) which both developers and semi-technical business users who have basic programming skills can use.  This IDE allows these developers and semi-technical business users to interact with the US Public Company Financial Information Repository directly. Not a lot of programming skills are required, if you are comfortable writing VBA in Excel, you will be able to make good use of this IDE.  High-level functions are exposed which make it both easy to use the IDE but also very powerful.  But also, don’t be fooled by the simplicity of the IDE.  The IDE is simple, not simplistic. Using this interface, you can pretty much extract any desired actionable information out of the repository. We will give some examples further down below that highlight how sophisticated this is.</para>
		</sect2>
	</sect1>
    <sect1>
        <title>Business-Value Adding Features</title>
		<para>In the following, we will describe some features of the platform in order to show its business-value. Specifically, we will show examples that demonstrate the efficiency, sophistication, and extensibility of the platform.</para>
        <sect2>
            <title>Feature #1: Query Performance/Speed</title>
            <para>To give you an idea how fast the platform is, we created a query to answer the following question: Compute the sum of all values reported against the concept ‘us-gaap:Assets’, on all 10-K SEC XBRL financial filings, aggregated by fiscal period.</para>
            <sect3>
                <title>Query 1</title>
				<para>The following link (which you can also use) shows you the results of this query, in XML format,
                    exposed via a REST API.
                    http://secxbrl.xbrl.io/v1/_queries/public/api/TotalForConceptGroupedByFiscalPeriodForAllEntities.jq?_method=POST&amp;concept=us-gaap:Assets&amp;period=FY&amp;format=xml</para>
                
                <para>You can take a look at the results in a more human readable form at <link xlink:href="http://secxbrl.info/example/TotalAssets">http://secxbrl.info/example/TotalAssets </link>or in the following
                    screenshot. </para>
                <para><inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="images/image01.jpg"></imagedata>
                        </imageobject>
                    </inlinemediaobject></para>
				<para>This query takes approximately 4.6 seconds to execute. Why is it so fast? Here are the
                    reasons: <itemizedlist>
                        <listitem>
                            <para>The query execution is supported, deeply behind, by cutting-edge
                                database technologies (called NoSQL, in this case MongoDB). These
                                new databases scale very well, and support much more data than
                                classical databases.</para>
                        </listitem>
                        <listitem>
                            <para>NoSQL data can be replicated to avoid any loss, and can be
                                distributed across several machines to split the computing
                                effort.</para>
                        </listitem>
                        <listitem>
                            <para>The data is stored in the cloud. Computing power can be obtained
                                like electricity or tap water and as needed. Also, the data can be
                                stored at several locations, so that it gets faster to wherever you
                                are.</para>
                        </listitem>
                        <listitem>
                            <para>Information is not stored as XBRL. Rather, it is stored in an
                                optimized form. If the information were stored as XBRL, the
                                semantics of the information would have to be processed each time
                                the query is run during query execution to transform information
                                from the XBRL information exchange format to the semantic meaning of
                                the information. Do you reinstall Office every time you open an
                                Excel spreadsheet? We don't, and that's no different. Likewise, we
                                process the XBRL information early in the loop, once and for all,
                                when it gets loaded into the database.</para>
                        </listitem>
                        <listitem>
                            <para>The optimized format as well as the query language natively
                                support "hypercube querying", which means that a fact table can be
                                obtained with one single query against the database, no more. With
                                NoSQL, hypercube querying has even less overhead than on a
                                traditional database, as all the fact information, including
                                dimensions, is stored at the same place and in the same
                                collection.</para>
                        </listitem>
                        <listitem>
                            <para>The semantics of the financial information, the query language and
                                the platform are seamlessly integrated.<itemizedlist>
                                    <listitem>
                                        <para>The user interacts with a powerful query language (JSONiq),
                                          which was extended/specialized for the specific domain of the
                                            information, in this case public company financial
                                            filings provided by the SEC EDGAR system.</para>
                                    </listitem>
                                    <listitem>
                                      <para>The JSONiq extension for SEC EDGAR itself leverages a more general extension
                                            that works on any XBRL business report which adheres to a
                                            “General Profile”, basically a general-purpose implementation of
                                            XBRL-based business reporting based on the architecture
                                            of the US GAAP XBRL Taxonomy and SEC XBRL financial
                                            filings.</para>
                                    </listitem>
                                    <listitem>
                                        <para>JSONiq itself uses the 28.io query platform and
                                          is itself an extension of the XQuery global standard.
                                          We will explain all this in more detail later in this document.</para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                    </itemizedlist></para>
				<para>All of this taken together results in an easy to use query language which is incredibly
                    fast. The complexity of the processing and the information is absorbed by the
                    underlying 28.io platform, exposing an easy to use and domain
                    specific query language and great performance/speed to the user. Experience the
                    speed for yourself by using the REST service endpoint above. You can even change
                    the US GAAP XBRL Taxonomy concept to your desire. By changing the URL you can
                    even choose between XML, JSON, CSV, or Excel as data formats.</para>
            </sect3>
		</sect2>
        <sect2>
            <title>Feature #2: Query Sophistication</title>
            <para>Don’t be fooled by the simplicity, the query engine is quite sophisticated but the
                complexity is hidden from users of the system. Here are a few examples:<itemizedlist>
                    <listitem>
                        <para>The database deals with things like amended filings and the fact that
                            information is duplicated in SEC filings. Filers report “us-gaap:Assets”
                            for the current period and also for the prior period. Usually, we want a
                            value of a fact only once. The platform sorts this. So, there is no
                            duplicate information and queries are still fast. However, there is
                            always a way to get to all the information using the 28.io
                            development platform.</para>
                    </listitem>
                    <listitem>
                        <para>Filers report “us-gaap:Assets” in different contexts. For example, the
                            fact could break down the segments of a business or be information
                            disclosed as part of a business combination. We don’t want that
                            information, we want information for the entity of focus of the public
                            company filing, generally the consolidated entity. Again, this is a
                            semantic database, not a relational database packed with XBRL
                            syntax.</para>
                        <para>Another important issue when querying SEC XBRL financial filings is
                            that public companies can use many different US GAAP XBRL Taxonomy
                            Concepts to represent reported information. In the first example we
                            queried “us-gaap:Assets”. But consider this. Public companies use one of
                            two concepts to report “Liabilities and Equity”:<itemizedlist>
                                <listitem>
                                    <para>us-gaap:LiabilitiesAndStockholdersEquity</para>
                                </listitem>
                                <listitem>
                                    <para>us-gaap:LiabilitiesAndPartnersCapital</para>
                                </listitem>
                            </itemizedlist>
                        </para>
                                <para>To overcome this situation, queries have the capability to
                            interact with a semantic mapping. And so, a user could query the concept
                            fac:LiabilitiesAndEquity (fac standing for
                            FundamentalAccountingConcepts), which then uses a mapping and the
                            query would use either of the concepts
                            us-gaap:LiabilitiesAndStockholdersEquity or
                            us-gaap:LiabilitiesAndPartnersCapital and would return a fact table
                            which looks like the following: Thi result can also be viewed at <link xlink:href="http://www.secxbrl.info/example/TotalLiabilitiesAndEquity">http://www.secxbrl.info/example/TotalLiabilitiesAndEquity</link>.
                            It can also be executed using the following URL (result returned as
                            CSV). </para>
								
                    </listitem>
                </itemizedlist></para>
            <sect3>
                <title>Query 2</title>
                <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/TotalForConceptGroupedByFiscalPeriodForAllEntities.jq?_method=POST&amp;concept=fac:LiabilitiesAndEquity&amp;period=FY&amp;map=FundamentalAccountingConcepts&amp;format=csv">http://secxbrl.xbrl.io/v1/_queries/public/api/TotalForConceptGroupedByFiscalPeriodForAllEntities.jq?_method=POST&amp;concept=fac:LiabilitiesAndEquity&amp;period=FY&amp;map=FundamentalAccountingConcepts&amp;format=csv</link></para>
				
				<para>While the query above makes the point of why a mapping is necessary, having only two concepts involved in the mapping may lead you to believe that such mappings are not important.  If you consider that SEC XBRL financial filers use more than 45 different concepts to report “Revenues” you begin see the utility of built in mappings.  The prototype Public Company Financial Information system has built in mappings for 51 fundamental accounting concepts (see http://www.secxbrl.info/concept-map/FundamentalAccountingConcepts). Users of the system can also create their own mappings which are then leveraged by the query engine to give you the results you expect when running queries.</para>
				
				<para>Consider a little more complex mapping, fac:ResearchAndDevelopment. These are the concepts
                    used within SEC XBRL financial filings: <itemizedlist>
                        <listitem>
                            <para>us-gaap:ResearchAndDevelopmentExpense</para>
                        </listitem>
                        <listitem>
                            <para>us-gaap:ResearchAndDevelopmentExpenseExcludingAcquiredInProcessCost</para>
                        </listitem>
                        <listitem>
                            <para>us-gaap:ResearchAndDevelopmentExpenseSoftwareExcludingAcquiredInProcessCost
                            </para>
                        </listitem>
                        <listitem>
                            <para>us-gaap:ResearchAndDevelopmentInProcess</para>
                        </listitem>
                        <listitem>
                            <para>us-gaap:ResearchAndDevelopmentAssetAcquiredOtherThanThroughBusinessCombinationWrittenOff</para>
                        </listitem>
                    </itemizedlist>Having those mappings in mind, we would like to answer our next
                    question. Retrieve all facts with a concept mapped by fac:ResearchAndDevelopment
                    for the fiscal period FY and the fiscal year 2012 for all DOW30 entities.
                    Retrieve the results as XML.</para>
                
            </sect3>
            <sect3>
                <title>Query 3</title>
                <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/facts.jq?_method=POST&amp;format=xml&amp;concept=fac:ResearchAndDevelopment&amp;map=FundamentalAccountingConcepts&amp;fiacalPeriod=FY&amp;fiscalYear=2012&amp;tag=dow30">http://secxbrl.xbrl.io/v1/_queries/public/api/facts.jq?_method=POST&amp;format=xml&amp;concept=fac:ResearchAndDevelopment&amp;map=FundamentalAccountingConcepts&amp;fiacalPeriod=FY&amp;fiscalYear=2012&amp;tag=dow30</link></para>
                <para>Here is what it returns in human-readable form: </para>
                <para><inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="images/image07.jpg"></imagedata>
                        </imageobject>
                    </inlinemediaobject></para>
                <para>You can also view the result online at <link xlink:href="http://secxbrl.info//example/ResearchAndDevelopment">http://secxbrl.info//example/ResearchAndDevelopment</link>. A full
                    documentation of all available parameters to the query that retrieves facts are
                    available in the <link xlink:href="http://secxbrl.info/api">REST API
                        documentation</link>. For example, the query allows you to filter by
                    multiple concepts at once and even across fiscal periods and fiscal years.
                    Additionally, you can use this query to use explicit dimensions when filtering
                    facts.</para>
                <para>The first two queries showed you how you can query for individual reported
                    facts from within a public company financial filing. But what if you want to
                    query for an entire component of a financial report? Perhaps you want the
                    balance sheets, income statements, cash flow statements, significant accounting
                    policies, long-term debt maturities, subsequent events, or some other report
                    component so that you can compare the reported information across multiple
                    reports.</para>
                <para>For example, let us query the balance sheets of some reporting entities. There
                    are two ways to look at a balance sheet: (1) its fact table and (2) its model
                    structure. (Note that human readable renderings are not provided in this version
                    of the working prototype, only fact tables and model structure.)</para>
                <para>So first, let’s look at the fact table of Coca Cola’s 10-K balance sheet of
                    2012.</para>
                
            </sect3>
            <sect3>
                <title>Query 4</title>
                <para>http://secxbrl.xbrl.io/v1/_queries/public/api/facttable.jq?_method=POST&amp;format=xml&amp;rut=21344&amp;fiscalPeriod=FY&amp;fiscalYear=2011&amp;disclosure=BalanceSheet</para>
                <para>This is what the result looks like in a human readable form (subset of the
                    information): </para>
                <para><inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="/images/image02.jpg"></imagedata>
                        </imageobject>
                    </inlinemediaobject></para>
                <para>You can also view it online at <link xlink:href="http://www.secxbrl.info/facttable/088ee302-e59f-45d9-94e2-f2a25787f7e2">http://www.secxbrl.info/facttable/088ee302-e59f-45d9-94e2-f2a25787f7e2</link>.</para>
                <para>Similarly, you can easily retrieve the model structure of the said balance
                    sheet.</para>
                
            </sect3>
            <sect3>
                <title>Query 5</title>
                <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/modelstructure.jq?_method=POST&amp;format=xml&amp;rut=21344&amp;fiscalPeriod=FY&amp;fiscalYear=2011&amp;disclosure=BalanceSheet">http://secxbrl.xbrl.io/v1/_queries/public/api/modelstructure.jq?_method=POST&amp;format=xml&amp;rut=21344&amp;fiscalPeriod=FY&amp;fiscalYear=2011&amp;disclosure=BalanceSheet
                    </link></para>
                <para>which in a human readable format looks as follows:</para>
                <para><inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="images/image06.jpg"></imagedata>
                        </imageobject>
                    </inlinemediaobject></para>
                <para>It’s also viewable online at <link xlink:href="http://www.secxbrl.info/modelstructure/088ee302-e59f-45d9-94e2-f2a25787f7e2">http://www.secxbrl.info/modelstructure/088ee302-e59f-45d9-94e2-f2a25787f7e2</link>.</para>
                
            </sect3>
            
		</sect2>
        <sect2>
            <title>Feature #3: Specify/Create your own Components</title>
            <para>The first query showed how to query for one concept, for example
                us-gaap:Asset.</para>
            <para>The second and third query showed how to use a concept map to do meaning-oriented
                queries rather than straight semantic-type queries, where you look for
                fac:LiabilitiesAndEquity and all US GAAP XBRL Taxonomy concepts which are used to
                express that one fact are found.</para>
            <para>The fourth and fifth queries showed how to query for an entire component (SEC
                network) of a report, say query for the BalanceSheet or LongTermDebtMaturities, or
                other report components, of a given entity.</para>
            <para>The feature we are now demonstrating pulls all of those together, and shows how to
                build your own report components, and then query by that user-defined report
                component.</para>
            <para>Suppose you wanted to create a query which (i) grabs information across multiple
                report components and (ii) combines them into one component such as something like
                the fundamental accounting concepts (see <link xlink:href="http://fundamentalaccountingconcepts.wikispaces.com/">http://fundamentalaccountingconcepts.wikispaces.com/</link>).</para>
            <para>In the process, you would also like the following to occur:</para>
            <para><itemizedlist>
                    <listitem>
                        <para>[Mapping facts] Receive feedback on which us-gaap concept the filer
                            has used in order to report a financial fact like the company assets or
                            revenues.</para>
                    </listitem>
                    <listitem>
                        <para>[Impute facts] If a financial fact is not reported, impute the value
                            of the financial fact given other financial fact which were
                            reported.</para>
                    </listitem>
                    <listitem>
                        <para>[Validating facts] Make sure that all financial facts relate to one
                            another correctly, so as to be sure the information obtained is correct
                            and trustworthy before being sent to other down-stream automated
                            processes which you might need.</para>
                    </listitem>
                </itemizedlist>The cooking receipe for your own components looks as follows.</para>
            <variablelist>
                <varlistentry>
                    <term>Identify the Concepts</term>
                    <listitem>
                        <para>First, you specify the concepts you need. We will borrow an existing
                            specification of these concepts which exists in XBRL and in an XML
                            Infoset format which the XBRL.io system supports:
                            http://www.xbrlsite.com/2013/fac/.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Mapping the concepts</term>
                    <listitem>
                        <para>Second, you specify a mapping file between the concepts you want and
                            the US GAAP XBRL Taxonomy concepts filers use. We already showed such a
                            mapping above when querying for fac:ResearchAndDevelopment facts. </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Specifying rules to compute non-reported facts</term>
                    <listitem>
                        <para>Third, you specify the business rules between the concepts. Again, a
                            standard format is available which articulates these relations, XBRL
                            Formula:</para>
                        <para><link xlink:href="http://www.xbrlsite.com/2013/fac/FundamentalAccountingConcepts_Formulas.xml">http://www.xbrlsite.com/2013/fac/FundamentalAccountingConcepts_Formulas.xml</link></para>
                        <para>We don’t support XBRL Formulas currently but (but this is being
                            developed right now). </para>
                        <para>Those three things (concepts/presentation, mappings, and imputations)
                            can be put together in one descriptive file which we call a report. The
                            example report for the fundamental accounting concepts can be viewed at:
                                <link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/report-schemas.jq?_method=POST&amp;name=FundamentalAccountingConcepts">http://secxbrl.xbrl.io/v1/_queries/public/api/report-schemas.jq?_method=POST&amp;name=FundamentalAccountingConcepts</link>.</para>
                        <para>Having such a report uploaded into the system, it’s very simple to
                            execute it:</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <sect3>
                <title>Query 6</title>
                <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/facttable-for-report.jq?_method=POST&amp;report=FundamentalAccountingConcepts&amp;ticker=ko&amp;fiscalYear=2012&amp;fiscalPeriod=FY&amp;format=xml">http://secxbrl.xbrl.io/v1/_queries/public/api/facttable-for-report.jq?_method=POST&amp;report=FundamentalAccountingConcepts&amp;ticker=ko&amp;fiscalYear=2012&amp;fiscalPeriod=FY&amp;format=xml</link></para>
                <para>This REST call retrieves the fact table for the report named
                    FundamentalAccountingConcepts for Coca Cola’s 10-K of 2012. The result of the
                    query in a human readable form can be seen online at
                    http://secxbrl.info/example/FundamentalAccountingConcepts. Also, there is a
                    nicer rendering (not as a fact table) of this result available at: <link xlink:href="http://www.secxbrl.info/information/0000021344/2012/FY">http://www.secxbrl.info/information/0000021344/2012/FY</link>.</para>
                
            </sect3>
            <sect3>
                <title>Conclusion</title>
                <para>The most important take-home message here is that the model structure of the
                    query, the concept maps, and the business rules can be adapted at will. Business
                    users can change the report and the query changes…you can specify different
                    concepts to extract, different mappings to US GAAP XBRL Taxonomy concepts,
                    change the relations, etc. </para>
                <para>(NOTE: For this prototype changing the relations is not supported because the
                    XBRL Formulas are read manually currently, that aspect has not yet been
                    automated. This should be 100% automated in the next release of the
                    platform.)</para>
                <para>A business user with only a little programming knowledge can even do more
                    powerful queries with ease! All functions are written using the JSONiq query
                    language and provides additional functionality useful to business users.</para>
                
            </sect3>
			
		</sect2>
        <sect2>
            <title>Feature #4: Application Profiles</title>
            <para>SECXBRL.info showcases how the XBRL-generic 28.io platform can be leveraged for
                SEC in order to easily create an analytics front-end. The core idea is that the
                powerful JSONiq language can be used behind the scenes to create queries; These
                queries are exposed through a REST API, through which they can be executed
                efficiently; One single call of the REST API can return information, for example in
                form of (but not limited to) fact tables for existing, or user-defined components --
                within just a few seconds; These fact tables can be finally be used by the front-end
                Web site and displayed in a human-friendly way. </para>
            <para>Do not be too focused on how the US Public Company Financial Information
                Repository looks. This information repository is a pure example of what can be done,
                and is only the visible tip of the 28.io platform iceberg. But more importantly,
                you can build your own tips-of-the-iceberg, and you are only limited by your
                imagination.</para>
            <para>The 28.io platform can be extended with many more application profiles than
                SEC: for example UK filings, FINREP reports, etc, etc. The XBRL principles apply,
                and 90% of the work has already been done in the XBRL-generic part of the
                platform.</para>
		</sect2>
	</sect1>
    <sect1>
        <title>Architecture</title>
        <para>In the remainder of this paper, we will dive a bit into the details of the
            architecture that enables all the above features.</para>

        <para><inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/image04.jpg"></imagedata>
                </imageobject>
            </inlinemediaobject>The system has three important distinguishable layers. Starting at
            the business-facing top, all the way to down to the bottom:</para>
        <sect2>
            <title>The US Public Company Financial Information Repository</title>
            <para><link xlink:href="http://www.secxbrl.info/">http://www.secxbrl.info/</link></para>
            <para>This is a front-end implementation on top of 28.io, more precisely, on top of
                the SEC application profile of 28.io. It is a very robust and performant prototype, and it
                was implemented in a very small amount of time and resources (just a few weeks and
                two persons).</para>
		</sect2>
        <sect2>
            <title>The REST API</title>
            <para>The front-end communicates with the 28.io platform via a REST API. Concretely,
                it means that it issues requests over the HTTP protocol, for example:<itemizedlist>
                    <listitem>
                        <para>Getting information about an entity (by ticker symbol)</para>
                        <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/entities.jq?format=json&amp;_method=POST&amp;index=ko">http://secxbrl.xbrl.io/v1/_queries/public/api/entities.jq?format=json&amp;_method=POST&amp;index=ko</link></para>
                    </listitem>
                    <listitem>
                        <para>Getting the list of the DOW30 entities (i.e. by tag) and return the data as CSV</para>
                        <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/entities.jq?format=csv&amp;_method=POST&amp;tag=DOW30">http://secxbrl.xbrl.io/v1/_queries/public/api/entities.jq?format=json&amp;_method=POST&amp;index=ko</link></para>
                    </listitem>
                    <listitem>
                        <para>Getting a list of filings for one entity (by RUT)</para>
                        <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/filings.jq?format=json&amp;_method=POST&amp;rut=0000021344">http://secxbrl.xbrl.io/v1/_queries/public/api/filings.jq?format=json&amp;_method=POST&amp;rut=0000021344</link></para>
                    </listitem>
                    <listitem>
                        <para>Getting a list of components (by accession number)</para>
                        <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/components.jq?format=json&amp;_method=POST&amp;aid=0000021344-13-000050">http://secxbrl.xbrl.io/v1/_queries/public/api/components.jq?format=json&amp;_method=POST&amp;aid=0000021344-13-000050</link></para>
                    </listitem>
                    <listitem>
                        <para>Getting the fact table associated with a component
                        <link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/facttable.jq?format=json&amp;_method=POST&amp;cid=d0abbc66-0aff-4b9a-b20a-a725cf1ba8f1">
                            http://secxbrl.xbrl.io/v1/_queries/public/api/facttable.jq?format=json&amp;_method=POST&amp;cid=d0abbc66-0aff-4b9a-b20a-a725cf1ba8f1
                        </link></para>
                    </listitem>
                    <listitem>
                        <para>Getting a fact table in a customized way (specifying a list of aspects
                            to filter with: concept, filing entity, fiscal year, etc). </para>
                        <para><link xlink:href="http://secxbrl.xbrl.io/v1/_queries/public/api/facts.jq?_method=POST&amp;format=xml&amp;concept=fac:ResearchAndDevelopment&amp;map=FundamentalAccountingConcepts&amp;fiacalPeriod=FY&amp;fiscalYear=2012&amp;tag=dow30">http://secxbrl.xbrl.io/v1/_queries/public/api/facts.jq?_method=POST&amp;format=xml&amp;concept=fac:ResearchAndDevelopment&amp;map=FundamentalAccountingConcepts&amp;fiacalPeriod=FY&amp;fiscalYear=2012&amp;tag=dow30</link></para>
                    </listitem>
                </itemizedlist></para>
            <para>This API is very simple and generic, and can be reused by other front-ends. It can
                produce output in any format (JSON, XML, and CSV). The full documentation of this
                API is available at <link xlink:href="http://secxbrl.info/api">http://secxbrl.info/api</link>. Moreover, it is possible to design other APIs
                with more complex queries, depending on the needs of the front-end.</para>
		</sect2>
        <sect2>
            <title>The SEC Application Profile</title>
            <para>When the REST API is invoked, what happens behind the scenes is that a 28.io
                query gets executed. In this case, it is a 28.io query within the SEC application
                profile, meaning that it knows about the specificities of SEC filings. For example,
                the profile knows about fiscal years or fiscal periods.</para>
            <para>The SEC XBRL financial filing system was chosen which was implemented as an
                application profile of the XBRL.io business reporting platform because it is a good
                and common implementation approach for making use of XBRL. It was also chosen
                because of all those SEC XBRL financial filings, they are a great way to test the
                implementation. </para>
		</sect2>
        <sect2>
            <title>The 28.io Business Reporting Platform (http://www.bizql.io):</title>
            <para>The XBRL generic profile was designed with two complementary approaches:<itemizedlist>
                    <listitem>
                        <para>A careful understanding of the XBRL specifications (core, dimensions,
                            variables, filters, etc), and an implementation of the generic part that
                            is as compliant as possible.</para>
                    </listitem>
                    <listitem>
                        <para>Reverse Engineering from the US GAAP XBRL Taxonomy and SEC system
                            implementation. However, we tuned the implementation, removing unsafe,
                            ambiguous, and other aspects which cause problems. Basically, we learned
                            from the SEC.</para>
                    </listitem>
                </itemizedlist>This is one implementation of the 28.io platform specifically
                tuned to work with XBRL. Not all forms of XBRL are supported. Currently tuples and
                complex typed dimensions are not supported. Neither are table linkbases. We are
                evaluating whether these aspects of XBRL should be supported. </para>
            <para>Basically 28.io allows for two things: (a) business users can use a “general
                profile” which is very comprehensive, very easy to use, no technical knowledge is
                required to implement a complete system or (b) a technical architect can either copy
                an existing application profile such as the general profile and “tweak” it to fit
                their specific needs or they could create their own application profile. There are
                certain boundaries such as you cannot use tuples or complex typed members.</para>
		</sect2>
        <sect2>
            <title>28.io Information Processing and Querying platform http://www.28.io/</title>
            <para>The 28.io platform is a very flexible
                information processing platform used by developers to build data intensive systems.
                With the JSONiq language, programmers can query (project, select, join, etc) across
                a vast number of data sources (MongoDB, JDBC, Cloudant, CloudSearch, graph
                databases, etc) with very little effort. In spite of our focus on read-only queries,
                the 28.io platform also supports transactions. The 28.io platform is able to
                distribute the execution of a query across several machines. </para>
		</sect2>
        <sect2>
            <title>JSONiq and NoSQL http://www.jsoniq.org/</title>
            <para>JSONiq is the language used by the 28.io platform.</para>
            <para>JSONiq was designed to query NoSQL data, i.e., heterogeneous, hierarchical data
                (like the XBRL data).</para>
            <para>The main source of inspiration behind JSONiq is XQuery, which has been proven so
                far a successful and productive query language for semi-structured data (in
                particular XML). JSONiq borrowed a large numbers of ideas from XQuery, like the
                structure and semantics of a FLWOR construct, the functional aspect of the language,
                the semantics of comparisons in the face of data heterogeneity, the declarative,
                snapshot-based updates. However, unlike XQuery, JSONiq is not concerned with the
                peculiarities of XML, like mixed content, ordered children, the confusion between
                attributes and elements, the complexities of namespaces and QNames, or the
                complexities of XML Schema, and so on.</para>
            <para>JSONiq, like XQuery, builds on the shoulders of the SQL giant: 90% of the features
                (project, select, join, etc) are very similar.</para>
		</sect2>
        <sect2>
            <title>NOLAP (NoSQL OnLine Analytical Processing):</title>
            <para>OLAP is a very common way of querying data organized in dimensions. Hypercubes of
                data can be sliced, diced, etc, like pivot tables in Excel.</para>
            <para>It has several flavours: ROLAP (relational databases), MOLAP (hypercube in
                memory), etc.</para>
            <para>We introduced the NOLAP flavour, which has the advantage of storing all dimensions
                in a single page, rather than spreading dimensions over several tables (snowflake in
                a relational database).</para>
            <para>Hypercubes are very important in XBRL. Hypercube queries are directly translated
                to native MongoDB object queries that can be efficiently executed, using underlying
                indices.</para>
		</sect2>
	</sect1>
    <sect1>
        <title>Conclusion</title>
        <para>The added value of the 28.io platform is simplicity for the user, with a better
            productivity and performance than competition. The system is extremely complex and
            sophisticated. However, that complexity is buried deep, deep within the system and
            hidden from the system’s users. Code which would take you 1000 lines to write if you
            were building things from scratch can commonly be achieved in about 10 to 20 lines.
            Literally.</para>
        <para>No compromise on technologies needs to be made. The system integrates the ability to
            interact/integrate with traditional RDBMS-based systems, pulling heterogeneous type
            information such as JSON and XML with homogeneous type information such as relational
            database tables, Excel spreadsheets, CSV files, etc. </para>
        <para><emphasis role="bold">If there is one message to remember it would be this: XBRL
                Analytics Web sites provide views on 80% of the XBRL data: the easy 80%. We went
                down the last mile. With 28.io, you can quickly build your own front-end and
                provide views on all 100% of it.</emphasis></para>
	</sect1>

</article>
