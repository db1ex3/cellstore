{
    "_id" : "f97d635c-9990-4372-a18a-2e02ce27c73e",
    "Archive" : null,
    "Label" : "nttdata",
    "Description" : "",
    "Owner" : "admin@28.io",
    "Role" : "http://reports.28.io",
    "Prefix" : "n",
    "ACL" : [  ],
    "Networks" : [ {
        "LinkName" : "link:presentationLink",
        "LinkRole" : "http://reports.28.io",
        "ArcName" : "link:presentationArc",
        "ArcRole" : "http://www.xbrl.org/2003/arcrole/parent-child",
        "Kind" : "InterConceptTreeNetwork",
        "ShortName" : "Presentation",
        "CyclesAllowed" : "undirected",
        "Trees" : {
            "n:ReportLineItems" : {
                "Id" : "378ca058-f938-4fce-9fac-efe0f23b0d21",
                "Name" : "n:ReportLineItems",
                "Label" : "nttdata",
                "Order" : 1,
                "To" : {
                    "n:Equity" : {
                        "Id" : "62ad910a-080c-4655-92b3-cca385fea866",
                        "Name" : "n:Equity",
                        "Label" : "Equity",
                        "Order" : 1
                    },
                    "n:CurrentLiabilities" : {
                        "Id" : "f0f5ba8a-4543-4185-9aca-3d5e6eb5fd87",
                        "Name" : "n:CurrentLiabilities",
                        "Label" : "Current Liabilities",
                        "Order" : 2
                    },
                    "n:NoncurrentLiabilities" : {
                        "Id" : "f9dbc05b-56ab-4145-84e8-b594e8cc44af",
                        "Name" : "n:NoncurrentLiabilities",
                        "Label" : "Noncurrent Liabilities",
                        "Order" : 3
                    },
                    "n:Liabilities" : {
                        "Id" : "46385c9b-76e5-4db9-82f9-acae48204600",
                        "Name" : "n:Liabilities",
                        "Label" : "Liabilities",
                        "Order" : 4
                    },
                    "n:LiabilityAndEquity" : {
                        "Id" : "5a021207-7535-44f9-979f-2d7a95df0237",
                        "Name" : "n:LiabilityAndEquity",
                        "Label" : "Liability And Equity",
                        "Order" : 5
                    },
                    "n:CurrentAssets" : {
                        "Id" : "954b087c-9d85-4596-835d-b411d1a448e0",
                        "Name" : "n:CurrentAssets",
                        "Label" : "Current Assets",
                        "Order" : 6
                    },
                    "n:NoncurrentAssets" : {
                        "Id" : "ad6fe0a4-3a3a-47ab-8ab7-fdcc9c610815",
                        "Name" : "n:NoncurrentAssets",
                        "Label" : "Noncurrent Assets",
                        "Order" : 7
                    },
                    "n:Assets" : {
                        "Id" : "f26e12ae-e1e3-47a7-82cf-7d2d910c5235",
                        "Name" : "n:Assets",
                        "Label" : "Assets",
                        "Order" : 8
                    }
                }
            }
        }
    }, {
        "LinkName" : "link:definitionLink",
        "LinkRole" : "http://reports.28.io",
        "ArcName" : "link:definitionArc",
        "ArcRole" : "http://www.xbrlsite.com/2013/fro/arcrole/class-subClass",
        "Kind" : "InterConceptTreeNetwork",
        "ShortName" : "ConceptMap",
        "CyclesAllowed" : "undirected",
        "Trees" : {
            "n:Equity" : {
                "Id" : "ebfa5c68-b897-4f61-a0de-ee0799106e64",
                "Name" : "n:Equity",
                "To" : {
                    "jpfr-t-cte:ShareholdersEquity" : {
                        "Id" : "001ecd0a-d074-487f-869c-14df87cc4750",
                        "Name" : "jpfr-t-cte:ShareholdersEquity",
                        "Order" : 1
                    }
                }
            },
            "n:CurrentLiabilities" : {
                "Id" : "aa6cda6a-ddea-4a9d-864b-774c1fddc9db",
                "Name" : "n:CurrentLiabilities",
                "To" : {
                    "jpfr-t-cte:CurrentLiabilities" : {
                        "Id" : "040eb984-d938-4e2f-892e-6fc0a25c277d",
                        "Name" : "jpfr-t-cte:CurrentLiabilities",
                        "Order" : 1
                    }
                }
            },
            "n:NoncurrentLiabilities" : {
                "Id" : "15498c57-e6ff-4f9c-8f82-118538978bf3",
                "Name" : "n:NoncurrentLiabilities",
                "To" : {
                    "jpfr-t-cte:NoncurrentLiabilities" : {
                        "Id" : "945ac108-5163-4a0b-8df2-102a35d6869f",
                        "Name" : "jpfr-t-cte:NoncurrentLiabilities",
                        "Order" : 1
                    }
                }
            },
            "n:CurrentAssets" : {
                "Id" : "c0408702-918e-4b1a-998b-a381cda3f1b5",
                "Name" : "n:CurrentAssets",
                "To" : {
                    "jpfr-t-cte:CurrentAssets" : {
                        "Id" : "00e8fc5c-5855-4fee-8c8f-a1d75cbb4d21",
                        "Name" : "jpfr-t-cte:CurrentAssets",
                        "Order" : 1
                    }
                }
            },
            "n:NoncurrentAssets" : {
                "Id" : "cf4428cd-6904-4cd2-813d-e74feb7463a6",
                "Name" : "n:NoncurrentAssets",
                "To" : {
                    "jpfr-t-cte:NoncurrentAssets" : {
                        "Id" : "eae41be3-4075-48a5-8c7d-498ab8f93cb7",
                        "Name" : "jpfr-t-cte:NoncurrentAssets",
                        "Order" : 1
                    }
                }
            }
        }
    } ],
    "Hypercubes" : {
        "xbrl:DefaultHypercube" : {
            "Name" : "xbrl:DefaultHypercube",
            "Label" : "XBRL Implicit non-dimensional Hypercube",
            "Aspects" : {
                "xbrl:Concept" : {
                    "Name" : "xbrl:Concept",
                    "Label" : "Concept",
                    "Domains" : {
                        "xbrl:ConceptDomain" : {
                            "Name" : "xbrl:ConceptDomain",
                            "Label" : "Implicit XBRL Concept Domain",
                            "Members" : {
                                "n:ReportLineItems" : {
                                    "Name" : "n:ReportLineItems",
                                    "Label" : "nttdata",
                                    "IsAbstract" : true
                                },
                                "n:Equity" : {
                                    "Name" : "n:Equity",
                                    "Label" : "Equity",
                                    "IsAbstract" : false
                                },
                                "n:CurrentLiabilities" : {
                                    "Name" : "n:CurrentLiabilities",
                                    "Label" : "Current Liabilities",
                                    "IsAbstract" : false
                                },
                                "n:NoncurrentLiabilities" : {
                                    "Name" : "n:NoncurrentLiabilities",
                                    "Label" : "Noncurrent Liabilities",
                                    "IsAbstract" : false
                                },
                                "n:Liabilities" : {
                                    "Name" : "n:Liabilities",
                                    "Label" : "Liabilities",
                                    "IsAbstract" : false
                                },
                                "n:LiabilityAndEquity" : {
                                    "Name" : "n:LiabilityAndEquity",
                                    "Label" : "Liability And Equity",
                                    "IsAbstract" : false
                                },
                                "n:CurrentAssets" : {
                                    "Name" : "n:CurrentAssets",
                                    "Label" : "Current Assets",
                                    "IsAbstract" : false
                                },
                                "n:NoncurrentAssets" : {
                                    "Name" : "n:NoncurrentAssets",
                                    "Label" : "Noncurrent Assets",
                                    "IsAbstract" : false
                                },
                                "n:Assets" : {
                                    "Name" : "n:Assets",
                                    "Label" : "Assets",
                                    "IsAbstract" : false
                                }
                            }
                        }
                    }
                },
                "xbrl:Period" : {
                    "Name" : "xbrl:Period",
                    "Label" : "Period"
                },
                "xbrl:Entity" : {
                    "Name" : "xbrl:Entity",
                    "Label" : "Reporting Entity",
                    "Kind" : "TypedDimension",
                    "Type" : "string"
                },
                "xbrl:Unit" : {
                    "Name" : "xbrl:Unit",
                    "Label" : "Unit",
                    "Default" : "xbrl:NonNumeric"
                }
            }
        }
    },
    "Rules" : [ {
        "Id" : "e6665a25-4daf-4906-8ac6-cb6d72affb90",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Liabilities",
        "Description" : "Rule to compute Liabilities (n:Liabilities).",
        "ComputableConcepts" : [ "n:Liabilities" ],
        "DependsOn" : [ "n:CurrentLiabilities", "n:NoncurrentLiabilities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"n:Liabilities\", \"n:CurrentLiabilities\", \"n:NoncurrentLiabilities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $warnings as string* := ()\nlet $Liabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:Liabilities\"]\nlet $warnings := ($warnings, if(count($Liabilities) gt 1)\n                             then if(count(distinct-values($Liabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Liabilities.\"\n                                  else \"Cell collision with consistent values for concept Liabilities.\"\n                             else ())\nlet $Liabilities as object? := $Liabilities[1]\nlet $CurrentLiabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:CurrentLiabilities\"]\nlet $warnings := ($warnings, if(count($CurrentLiabilities) gt 1)\n                             then if(count(distinct-values($CurrentLiabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CurrentLiabilities.\"\n                                  else \"Cell collision with consistent values for concept CurrentLiabilities.\"\n                             else ())\nlet $CurrentLiabilities as object? := $CurrentLiabilities[1]\nlet $NoncurrentLiabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:NoncurrentLiabilities\"]\nlet $warnings := ($warnings, if(count($NoncurrentLiabilities) gt 1)\n                             then if(count(distinct-values($NoncurrentLiabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NoncurrentLiabilities.\"\n                                  else \"Cell collision with consistent values for concept NoncurrentLiabilities.\"\n                             else ())\nlet $NoncurrentLiabilities as object? := $NoncurrentLiabilities[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($Liabilities) return $Liabilities\n  case (exists($CurrentLiabilities) and true)\n  return\n    let $computed-value := rules:decimal-value($CurrentLiabilities) + rules:decimal-value($NoncurrentLiabilities)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"n:Liabilities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CurrentLiabilities, \"CurrentLiabilities\") || \" + \" || rules:fact-trail($NoncurrentLiabilities, \"NoncurrentLiabilities\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($Liabilities, $CurrentLiabilities, $NoncurrentLiabilities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $CurrentLiabilities,\n            \"n:Liabilities\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $CurrentLiabilities,\n          \"n:Liabilities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "CurrentLiabilities" ],
            "BodySrc" : "CurrentLiabilities + NoncurrentLiabilities"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "7038ee64-1ee8-491b-b273-91c1044ac294",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Liability And Equity",
        "Description" : "Rule to compute Liability And Equity (n:LiabilityAndEquity).",
        "ComputableConcepts" : [ "n:LiabilityAndEquity" ],
        "DependsOn" : [ "n:Equity", "n:Liabilities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"n:LiabilityAndEquity\", \"n:Equity\", \"n:Liabilities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $warnings as string* := ()\nlet $LiabilityAndEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:LiabilityAndEquity\"]\nlet $warnings := ($warnings, if(count($LiabilityAndEquity) gt 1)\n                             then if(count(distinct-values($LiabilityAndEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept LiabilityAndEquity.\"\n                                  else \"Cell collision with consistent values for concept LiabilityAndEquity.\"\n                             else ())\nlet $LiabilityAndEquity as object? := $LiabilityAndEquity[1]\nlet $Equity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:Equity\"]\nlet $warnings := ($warnings, if(count($Equity) gt 1)\n                             then if(count(distinct-values($Equity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Equity.\"\n                                  else \"Cell collision with consistent values for concept Equity.\"\n                             else ())\nlet $Equity as object? := $Equity[1]\nlet $Liabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:Liabilities\"]\nlet $warnings := ($warnings, if(count($Liabilities) gt 1)\n                             then if(count(distinct-values($Liabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Liabilities.\"\n                                  else \"Cell collision with consistent values for concept Liabilities.\"\n                             else ())\nlet $Liabilities as object? := $Liabilities[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($LiabilityAndEquity) return $LiabilityAndEquity\n  case (exists($Equity) and true)\n  return\n    let $computed-value := rules:decimal-value($Equity) + rules:decimal-value($Liabilities)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"n:LiabilityAndEquity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Equity, \"Equity\") || \" + \" || rules:fact-trail($Liabilities, \"Liabilities\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($LiabilityAndEquity, $Equity, $Liabilities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Equity,\n            \"n:LiabilityAndEquity\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Equity,\n          \"n:LiabilityAndEquity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "Equity" ],
            "BodySrc" : "Equity + Liabilities"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "0b2ebacd-13b9-4b05-ace5-cd04056efbbd",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Assets",
        "Description" : "Rule to compute Assets (n:Assets).",
        "ComputableConcepts" : [ "n:Assets" ],
        "DependsOn" : [ "n:CurrentAssets", "n:NoncurrentAssets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"n:Assets\", \"n:CurrentAssets\", \"n:NoncurrentAssets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $warnings as string* := ()\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:Assets\"]\nlet $warnings := ($warnings, if(count($Assets) gt 1)\n                             then if(count(distinct-values($Assets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Assets.\"\n                                  else \"Cell collision with consistent values for concept Assets.\"\n                             else ())\nlet $Assets as object? := $Assets[1]\nlet $CurrentAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:CurrentAssets\"]\nlet $warnings := ($warnings, if(count($CurrentAssets) gt 1)\n                             then if(count(distinct-values($CurrentAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CurrentAssets.\"\n                                  else \"Cell collision with consistent values for concept CurrentAssets.\"\n                             else ())\nlet $CurrentAssets as object? := $CurrentAssets[1]\nlet $NoncurrentAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"n:NoncurrentAssets\"]\nlet $warnings := ($warnings, if(count($NoncurrentAssets) gt 1)\n                             then if(count(distinct-values($NoncurrentAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NoncurrentAssets.\"\n                                  else \"Cell collision with consistent values for concept NoncurrentAssets.\"\n                             else ())\nlet $NoncurrentAssets as object? := $NoncurrentAssets[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($Assets) return $Assets\n  case (exists($CurrentAssets) and true)\n  return\n    let $computed-value := rules:decimal-value($CurrentAssets) + rules:decimal-value($NoncurrentAssets)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"n:Assets\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CurrentAssets, \"CurrentAssets\") || \" + \" || rules:fact-trail($NoncurrentAssets, \"NoncurrentAssets\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($Assets, $CurrentAssets, $NoncurrentAssets)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $CurrentAssets,\n            \"n:Assets\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $CurrentAssets,\n          \"n:Assets\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "CurrentAssets" ],
            "BodySrc" : "CurrentAssets + NoncurrentAssets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    } ],
    "Filters" : {
        "cik" : [  ],
        "tag" : [  ],
        "fiscalYear" : [  ],
        "fiscalPeriod" : [  ],
        "sic" : [  ]
    },
    "DefinitionModels" : [ {
        "ModelKind" : "DefinitionModel",
        "Labels" : [ "nttdata" ],
        "Parameters" : {

        },
        "Breakdowns" : {
            "x" : [ {
                "BreakdownLabels" : [ "Reporting Entity Breakdown" ],
                "BreakdownTrees" : [ {
                    "Kind" : "Rule",
                    "Abstract" : true,
                    "Labels" : [ "Reporting Entity [Axis]" ],
                    "Children" : [ {
                        "Kind" : "Aspect",
                        "Aspect" : "xbrl:Entity"
                    } ]
                } ]
            }, {
                "BreakdownLabels" : [ "Reporting Period Breakdown" ],
                "BreakdownTrees" : [ {
                    "Kind" : "Rule",
                    "Abstract" : true,
                    "Labels" : [ "Period [Axis]" ],
                    "Children" : [ {
                        "Kind" : "Aspect",
                        "Aspect" : "xbrl:Period"
                    } ]
                } ]
            } ],
            "y" : [ {
                "BreakdownLabels" : [ "Breakdown on concepts" ],
                "BreakdownTrees" : [ {
                    "Kind" : "ConceptRelationship",
                    "LinkName" : "link:presentationLink",
                    "LinkRole" : "http://reports.28.io",
                    "ArcName" : "link:presentationArc",
                    "ArcRole" : "http://www.xbrl.org/2003/arcrole/parent-child",
                    "RelationshipSource" : "n:ReportLineItems",
                    "FormulaAxis" : "descendant",
                    "Generations" : 0
                } ]
            } ]
        },
        "TableFilters" : {

        }
    } ],
    "LastModified" : "2014-10-29T16:37:11.327964Z"
}
