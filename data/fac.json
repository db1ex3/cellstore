
{
    "_id" : "FundamentalAccountingConcepts",
    "Archive" : null,
    "Label" : "Fundamental Accounting Concepts",
    "Description" : "Documentation about the fundamental accounting concepts defined in this report can be found at http://fundamentalaccountingconcepts.wikispaces.com/home",
    "Prefix" : "fac",
    "Role" : "http://xbrl.io/fundamental-accounting-concepts",
    "Owner" : "admin@28.io",
    "ACL" : [ {
        "Type" : "Group",
        "Grantee" : "http://28.io/groups/AllUsers",
        "Permission" : "READ"
    } ],
    "LastModified" : "2014-09-29T11:35:54.770016Z",
    "Networks" : [ {
        "LinkName" : "link:presentationLink",
        "LinkRole" : "http://xbrl.io/fundamental-accounting-concepts",
        "ArcName" : "link:presentationArc",
        "ArcRole" : "http://www.xbrl.org/2003/arcrole/parent-child",
        "Kind" : "InterConceptTreeNetwork",
        "ShortName" : "Presentation",
        "CyclesAllowed" : "undirected",
        "Trees" : {
            "fac:FundamentalAccountingConceptsLineItems" : {
                "Name" : "fac:FundamentalAccountingConceptsLineItems",
                "Label" : "Fundamental Accounting Concepts [Line Items]",
                "To" : {
                    "fac:FundamentalAccountingConceptsHierarchy" : {
                        "Name" : "fac:FundamentalAccountingConceptsHierarchy",
                        "Label" : "Fundamental Accounting Concepts [Hierarchy]",
                        "To" : {
                            "fac:GeneralInformationHierarchy" : {
                                "Name" : "fac:GeneralInformationHierarchy",
                                "Label" : "General Information [Hierarchy]",
                                "To" : {
                                    "fac:EntityRegistrantName" : {
                                        "Name" : "fac:EntityRegistrantName",
                                        "Label" : "Entity Registrant Name",
                                        "Id" : "0faa52f2-336f-49ee-98da-8e4f09a373f2"
                                    },
                                    "fac:EntityCentralIndexKey" : {
                                        "Name" : "fac:EntityCentralIndexKey",
                                        "Label" : "Central Index Key (CIK)",
                                        "Id" : "9d0c845e-aeae-4755-b25b-5ac55eeb4c11"
                                    },
                                    "fac:EntityFilerCategory" : {
                                        "Name" : "fac:EntityFilerCategory",
                                        "Label" : "Entity Filer Category",
                                        "Id" : "5c97d4d6-0a4f-4bf1-8fb1-aec79a129a84"
                                    },
                                    "fac:TradingSymbol" : {
                                        "Name" : "fac:TradingSymbol",
                                        "Label" : "Trading Symbol",
                                        "Id" : "4365cf66-9b6e-433a-842b-17c6b447e64f"
                                    },
                                    "fac:FiscalYearEnd" : {
                                        "Name" : "fac:FiscalYearEnd",
                                        "Label" : "Fiscal Year End",
                                        "Id" : "ba01100a-8e4e-4d02-874a-508ef88a0abf"
                                    },
                                    "fac:FiscalYear" : {
                                        "Name" : "fac:FiscalYear",
                                        "Label" : "Fiscal Year",
                                        "Id" : "24cfc384-4a35-41a6-891c-f88c4288e2b6"
                                    },
                                    "fac:FiscalPeriod" : {
                                        "Name" : "fac:FiscalPeriod",
                                        "Label" : "Fiscal Period",
                                        "Id" : "a766acf7-db97-497a-854a-71f859e93b93"
                                    },
                                    "fac:DocumentType" : {
                                        "Name" : "fac:DocumentType",
                                        "Label" : "Document Type",
                                        "Id" : "c34ef95e-2453-4af0-908c-53e367c647e2"
                                    },
                                    "fac:BalanceSheetDate" : {
                                        "Name" : "fac:BalanceSheetDate",
                                        "Label" : "Balance Sheet Date",
                                        "Id" : "d2438c22-0bf8-420c-ada5-4c6271f99ed4"
                                    },
                                    "fac:IncomeStatementStartPeriodYearToDate" : {
                                        "Name" : "fac:IncomeStatementStartPeriodYearToDate",
                                        "Label" : "Income Statement Start of Period",
                                        "Id" : "93940333-1905-4e35-ace6-50b610222a59"
                                    },
                                    "fac:BalanceSheetFormat" : {
                                        "Name" : "fac:BalanceSheetFormat",
                                        "Label" : "Balance Sheet Format",
                                        "Id" : "31e675df-393c-4c94-a59a-3d8e24fef49b"
                                    },
                                    "fac:IncomeStatementFormat" : {
                                        "Name" : "fac:IncomeStatementFormat",
                                        "Label" : "Income Statement Format",
                                        "Id" : "2d213e03-f88d-4808-8a2c-d8d9eeaa0368"
                                    },
                                    "fac:NatureOfOperations" : {
                                        "Name" : "fac:NatureOfOperations",
                                        "Label" : "Nature of Operations",
                                        "Id" : "abf38e04-76c9-4fdf-81c9-72dffad172fb"
                                    }
                                },
                                "Id" : "368e4683-e47f-4e04-854f-dfc5eb43e401",
                                "IsAbstract" : true
                            },
                            "fac:BalanceSheetHierarchy" : {
                                "Name" : "fac:BalanceSheetHierarchy",
                                "Label" : "Balance Sheet [Hierarchy]",
                                "To" : {
                                    "fac:CurrentAssets" : {
                                        "Name" : "fac:CurrentAssets",
                                        "Label" : "Current Assets",
                                        "Order" : 1,
                                        "Id" : "119ac3ff-cfc7-4595-947d-42acab81284b"
                                    },
                                    "fac:NoncurrentAssets" : {
                                        "Name" : "fac:NoncurrentAssets",
                                        "Label" : "Noncurrent Assets",
                                        "Order" : 2,
                                        "Id" : "598130de-2a5a-4280-b57c-1a6e378d437b"
                                    },
                                    "fac:Assets" : {
                                        "Name" : "fac:Assets",
                                        "Label" : "Assets",
                                        "Order" : 3,
                                        "Id" : "db2044bc-74d0-4f33-bbe3-66956f59bbe1"
                                    },
                                    "fac:CurrentLiabilities" : {
                                        "Name" : "fac:CurrentLiabilities",
                                        "Label" : "Current Liabilities",
                                        "Order" : 4,
                                        "Id" : "ac483d05-972b-4a3c-a89c-01e9afe60ab9"
                                    },
                                    "fac:NoncurrentLiabilities" : {
                                        "Name" : "fac:NoncurrentLiabilities",
                                        "Label" : "Noncurrent Liabilities",
                                        "Order" : 5,
                                        "Id" : "d54ac4a8-af6a-4e11-94e1-d7566fbdb23f"
                                    },
                                    "fac:Liabilities" : {
                                        "Name" : "fac:Liabilities",
                                        "Label" : "Liabilities",
                                        "Order" : 6,
                                        "Id" : "530d7100-72c7-4e2e-b6bf-7fe047108b6a"
                                    },
                                    "fac:CommitmentsAndContingencies" : {
                                        "Name" : "fac:CommitmentsAndContingencies",
                                        "Label" : "Commitments and Contingencies",
                                        "Order" : 7,
                                        "Id" : "3fcec7f9-ac17-4cff-95df-2a0f0a7f3de8"
                                    },
                                    "fac:TemporaryEquity" : {
                                        "Name" : "fac:TemporaryEquity",
                                        "Label" : "Temporary Equity",
                                        "Order" : 8,
                                        "Id" : "5b6ad874-5269-4114-9df8-d82b40e65af2"
                                    },
                                    "fac:RedeemableNoncontrollingInterest" : {
                                        "Name" : "fac:RedeemableNoncontrollingInterest",
                                        "Label" : "Redeemable Noncontrolling Interest",
                                        "Order" : 9,
                                        "Id" : "f4d9ed7d-ab0e-434f-b3d1-ddceda0803e8"
                                    },
                                    "fac:EquityAttributableToParent" : {
                                        "Name" : "fac:EquityAttributableToParent",
                                        "Label" : "Equity Attributable to Parent",
                                        "Order" : 10,
                                        "Id" : "6d70df8c-5215-4bc2-85ae-70eda5e06744"
                                    },
                                    "fac:EquityAttributableToNoncontrollingInterest" : {
                                        "Name" : "fac:EquityAttributableToNoncontrollingInterest",
                                        "Label" : "Equity Attributable to Noncontrolling Interest",
                                        "Order" : 11,
                                        "Id" : "97003475-c14d-4a53-be10-7a4975d34d50"
                                    },
                                    "fac:Equity" : {
                                        "Name" : "fac:Equity",
                                        "Label" : "Equity",
                                        "Order" : 12,
                                        "Id" : "c59cdf52-d304-45f4-b131-93d74a838d98"
                                    },
                                    "fac:LiabilitiesAndEquity" : {
                                        "Name" : "fac:LiabilitiesAndEquity",
                                        "Label" : "Liabilities and Equity",
                                        "Order" : 13,
                                        "Id" : "b5a1c875-5911-4398-940d-8d1695cd7eac"
                                    }
                                },
                                "Id" : "35ad1007-6674-481d-b1d2-9bb8c6bbb45f",
                                "IsAbstract" : true
                            },
                            "fac:IncomeStatementHierarchy" : {
                                "Name" : "fac:IncomeStatementHierarchy",
                                "Label" : "Income Statement [Hierarchy]",
                                "To" : {
                                    "fac:Revenues" : {
                                        "Name" : "fac:Revenues",
                                        "Label" : "Revenues",
                                        "Order" : 1,
                                        "Id" : "bc17477e-b75c-407c-834a-90b1383d88c6"
                                    },
                                    "fac:CostOfRevenue" : {
                                        "Name" : "fac:CostOfRevenue",
                                        "Label" : "Cost of Revenues",
                                        "Order" : 2,
                                        "Id" : "b3a8878e-bcc7-42c1-9232-7a3b5548769d"
                                    },
                                    "fac:GrossProfit" : {
                                        "Name" : "fac:GrossProfit",
                                        "Label" : "Gross Profit",
                                        "Order" : 3,
                                        "Id" : "a3a91297-d9b9-4f46-8f90-972bdcdbd705"
                                    },
                                    "fac:OperatingExpenses" : {
                                        "Name" : "fac:OperatingExpenses",
                                        "Label" : "Operating Expenses",
                                        "Order" : 4,
                                        "Id" : "01ee4d13-15f8-44be-88f5-fa8e0dd428ba"
                                    },
                                    "fac:CostsAndExpenses" : {
                                        "Name" : "fac:CostsAndExpenses",
                                        "Label" : "Costs and Expenses",
                                        "Order" : 5,
                                        "Id" : "dd389af7-9349-40cd-898d-82f892eb1776"
                                    },
                                    "fac:OtherOperatingIncomeExpenses" : {
                                        "Name" : "fac:OtherOperatingIncomeExpenses",
                                        "Label" : "Other Operating Income (Expenses)",
                                        "Order" : 6,
                                        "Id" : "5d21070a-7b9b-4640-be1e-eb9247aaffd2"
                                    },
                                    "fac:OperatingIncomeLoss" : {
                                        "Name" : "fac:OperatingIncomeLoss",
                                        "Label" : "Operating Income (Loss)",
                                        "Order" : 7,
                                        "Id" : "e20bf4b9-3855-42fe-8911-1ed7b8595033"
                                    },
                                    "fac:NonoperatingIncomeLoss" : {
                                        "Name" : "fac:NonoperatingIncomeLoss",
                                        "Label" : "Nonoperating Income (Loss)",
                                        "Order" : 8,
                                        "Id" : "f03d19df-1cdb-419e-b2f0-8e59b84b4e5c"
                                    },
                                    "fac:InterestAndDebtExpense" : {
                                        "Name" : "fac:InterestAndDebtExpense",
                                        "Label" : "Interest and Debt Expense",
                                        "Order" : 9,
                                        "Id" : "bd1d42e3-6b96-4a9b-bbe3-beb312e91150"
                                    },
                                    "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense" : {
                                        "Name" : "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense",
                                        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense",
                                        "Order" : 10,
                                        "Id" : "898f9cde-740d-4403-8a51-5a460c1d5223"
                                    },
                                    "fac:IncomeLossBeforeEquityMethodInvestments" : {
                                        "Name" : "fac:IncomeLossBeforeEquityMethodInvestments",
                                        "Label" : "Income (Loss) Before Equity Method Investments",
                                        "Order" : 11,
                                        "Id" : "6d3b7bd9-fc2b-4ca9-b071-926930af6a03"
                                    },
                                    "fac:IncomeLossFromEquityMethodInvestments" : {
                                        "Name" : "fac:IncomeLossFromEquityMethodInvestments",
                                        "Label" : "Income (Loss) from Equity Method Investments",
                                        "Order" : 12,
                                        "Id" : "573d25c1-cc32-4420-9dc9-6f3d6745c924"
                                    },
                                    "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments" : {
                                        "Name" : "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments",
                                        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments",
                                        "Order" : 13,
                                        "Id" : "b8c4bf89-b2a7-4d4a-9006-73586dea7cca"
                                    },
                                    "fac:IncomeLossFromContinuingOperationsBeforeTax" : {
                                        "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTax",
                                        "Label" : "Income (Loss) from Continuing Operations Before Tax",
                                        "Order" : 14,
                                        "Id" : "bdf371e6-4aa2-457a-b6b6-334041dd17a4"
                                    },
                                    "fac:IncomeTaxExpenseBenefit" : {
                                        "Name" : "fac:IncomeTaxExpenseBenefit",
                                        "Label" : "Income Tax Expense (Benefit)",
                                        "Order" : 15,
                                        "Id" : "127c2ead-9dc2-48af-a609-54596217d3e5"
                                    },
                                    "fac:IncomeLossFromContinuingOperationsAfterTax" : {
                                        "Name" : "fac:IncomeLossFromContinuingOperationsAfterTax",
                                        "Label" : "Income (Loss) from Continuing Operations After Tax",
                                        "Order" : 16,
                                        "Id" : "5ff26803-ca39-45ce-9623-083959b019d6"
                                    },
                                    "fac:IncomeLossFromDiscontinuedOperationsNetOfTax" : {
                                        "Name" : "fac:IncomeLossFromDiscontinuedOperationsNetOfTax",
                                        "Label" : "Income (Loss) from Discontinued Operations, Net of Tax",
                                        "Order" : 17,
                                        "Id" : "d1aaa4d3-9e7c-4cb8-936b-7c1de91cc458"
                                    },
                                    "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax" : {
                                        "Name" : "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax",
                                        "Label" : "Extraordinary Items of Income (Expense), Net of Tax",
                                        "Order" : 18,
                                        "Id" : "e2af888c-8dcd-41b0-8ff1-c444f5a1a0fa"
                                    },
                                    "fac:NetIncomeLoss" : {
                                        "Name" : "fac:NetIncomeLoss",
                                        "Label" : "Net Income (Loss)",
                                        "Order" : 19,
                                        "Id" : "8de38627-fc83-493e-b810-8c430cf89821"
                                    },
                                    "fac:NetIncomeLossAttributableToParent" : {
                                        "Name" : "fac:NetIncomeLossAttributableToParent",
                                        "Label" : "Net Income Attributable to Parent",
                                        "Order" : 20,
                                        "Id" : "57c7b889-eeb8-493e-a98f-11247ec21f4e"
                                    },
                                    "fac:NetIncomeLossAttributableToNoncontrollingInterest" : {
                                        "Name" : "fac:NetIncomeLossAttributableToNoncontrollingInterest",
                                        "Label" : "Net Income Attributable to Noncontrolling Interest",
                                        "Order" : 21,
                                        "Id" : "abd4cf79-16d1-401d-be06-5f208719cd5c"
                                    },
                                    "fac:ResearchAndDevelopment" : {
                                        "Name" : "fac:ResearchAndDevelopment",
                                        "Label" : "Research and Development",
                                        "Order" : 22,
                                        "Id" : "ef297e4d-89ac-4188-b2fd-0effc268544c"
                                    },
                                    "fac:PreferredStockDividendsAndOtherAdjustments" : {
                                        "Name" : "fac:PreferredStockDividendsAndOtherAdjustments",
                                        "Label" : "Preferred Stock Dividends and Other Adjustments",
                                        "Order" : 23,
                                        "Id" : "68ab4c38-51d3-489a-9c5d-05a2ccbf16c2"
                                    },
                                    "fac:NetIncomeLossAvailableToCommonStockholdersBasic" : {
                                        "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasic",
                                        "Label" : "Net Income (Loss) Available to Common Stockholders, Basic",
                                        "Order" : 24,
                                        "Id" : "4819769a-e020-41fc-a1fc-591c6e2b855d"
                                    }
                                },
                                "Id" : "9bc9d470-7536-4161-bbe3-e0e4925082ed",
                                "IsAbstract" : true
                            },
                            "fac:StatementComprehensiveIncomeHierarchy" : {
                                "Name" : "fac:StatementComprehensiveIncomeHierarchy",
                                "Label" : "Statement of Comprehensive Income [Hierarchy]",
                                "To" : {
                                    "fac:NetIncomeLoss" : {
                                        "Name" : "fac:NetIncomeLoss",
                                        "Label" : "Net Income (Loss)",
                                        "Order" : 1,
                                        "Id" : "4c96a34b-f8b6-4978-8bd0-4bf3878f108a"
                                    },
                                    "fac:OtherComprehensiveIncomeLoss" : {
                                        "Name" : "fac:OtherComprehensiveIncomeLoss",
                                        "Label" : "Other Comprehensive Income (Loss)",
                                        "Order" : 2,
                                        "Id" : "bfb0b730-a206-4f23-8fb1-3c252f7eae89"
                                    },
                                    "fac:ComprehensiveIncomeLoss" : {
                                        "Name" : "fac:ComprehensiveIncomeLoss",
                                        "Label" : "Comprehensive Income (Loss)",
                                        "Order" : 3,
                                        "Id" : "8e874feb-fc5b-4261-baae-d3ecd897ab15"
                                    },
                                    "fac:ComprehensiveIncomeLossAttributableToParent" : {
                                        "Name" : "fac:ComprehensiveIncomeLossAttributableToParent",
                                        "Label" : "Comprehensive Income (Loss) Attributable to Parent",
                                        "Order" : 4,
                                        "Id" : "945c25b6-5795-4ced-8c0f-ad6c97714bb3"
                                    },
                                    "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest" : {
                                        "Name" : "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
                                        "Label" : "Comprehensive Income (Loss) Attributable to Noncontrolling Interest",
                                        "Order" : 5,
                                        "Id" : "18c6cb18-bd7e-4244-8e90-b49a17d2445f"
                                    }
                                },
                                "Id" : "3345a395-a301-4e78-aad1-ecb1de1166aa",
                                "IsAbstract" : true
                            },
                            "fac:CashFlowStatementHierarchy" : {
                                "Name" : "fac:CashFlowStatementHierarchy",
                                "Label" : "Cash Flow Statement [Hierarchy]",
                                "To" : {
                                    "fac:NetCashFlowFromOperatingActivitiesContinuing" : {
                                        "Name" : "fac:NetCashFlowFromOperatingActivitiesContinuing",
                                        "Label" : "Net Cash Flow from Operating Activities, Continuing",
                                        "Order" : 1,
                                        "Id" : "efcb63cc-18ba-4469-ad2f-7e2ca09363f5"
                                    },
                                    "fac:NetCashFlowFromOperatingActivitiesDiscontinued" : {
                                        "Name" : "fac:NetCashFlowFromOperatingActivitiesDiscontinued",
                                        "Label" : "Net Cash Flow from Operating Activities, Discontinued",
                                        "Order" : 2,
                                        "Id" : "35426691-b2fe-41d0-a525-def1802d5e72"
                                    },
                                    "fac:NetCashFlowFromOperatingActivities" : {
                                        "Name" : "fac:NetCashFlowFromOperatingActivities",
                                        "Label" : "Net Cash Flow from Operating Activities",
                                        "Order" : 3,
                                        "Id" : "ed5d99ef-a7ee-465b-a96f-f5eca5eb1f3f"
                                    },
                                    "fac:NetCashFlowFromInvestingActivitiesContinuing" : {
                                        "Name" : "fac:NetCashFlowFromInvestingActivitiesContinuing",
                                        "Label" : "Net Cash Flow from Investing Activities, Continuing",
                                        "Order" : 4,
                                        "Id" : "22d9c484-33e7-42ea-b5f9-3905cd15c738"
                                    },
                                    "fac:NetCashFlowFromInvestingActivitiesDiscontinued" : {
                                        "Name" : "fac:NetCashFlowFromInvestingActivitiesDiscontinued",
                                        "Label" : "Net Cash Flow from Investing Activities, Discontinued",
                                        "Order" : 5,
                                        "Id" : "b32c86ba-616c-4685-8fd4-c08ad2baf36b"
                                    },
                                    "fac:NetCashFlowFromInvestingActivities" : {
                                        "Name" : "fac:NetCashFlowFromInvestingActivities",
                                        "Label" : "Net Cash Flow from Investing Activities",
                                        "Order" : 6,
                                        "Id" : "7bd10758-1899-4e5d-b565-8188065af6aa"
                                    },
                                    "fac:NetCashFlowFromFinancingActivitiesContinuing" : {
                                        "Name" : "fac:NetCashFlowFromFinancingActivitiesContinuing",
                                        "Label" : "Net Cash Flow from Financing Activities, Continuing",
                                        "Order" : 7,
                                        "Id" : "34a5cbf9-197b-490d-a146-22f54bcbac66"
                                    },
                                    "fac:NetCashFlowFromFinancingActivitiesDiscontinued" : {
                                        "Name" : "fac:NetCashFlowFromFinancingActivitiesDiscontinued",
                                        "Label" : "Net Cash Flow from Financing Activities, Discontinued",
                                        "Order" : 8,
                                        "Id" : "2f1a141d-981d-4c75-b03e-94919b030aec"
                                    },
                                    "fac:NetCashFlowFromFinancingActivities" : {
                                        "Name" : "fac:NetCashFlowFromFinancingActivities",
                                        "Label" : "Net Cash Flow from Financing Activities",
                                        "Order" : 9,
                                        "Id" : "e4602916-882e-472a-8574-a991f86c8152"
                                    },
                                    "fac:NetCashFlowContinuing" : {
                                        "Name" : "fac:NetCashFlowContinuing",
                                        "Label" : "Net Cash Flow, Continuing",
                                        "Order" : 10,
                                        "Id" : "464004ea-9f9a-439f-9cb7-04af54024ed9"
                                    },
                                    "fac:NetCashFlowDiscontinued" : {
                                        "Name" : "fac:NetCashFlowDiscontinued",
                                        "Label" : "Net Cash Flow, Discontinued",
                                        "Order" : 11,
                                        "Id" : "fb5a765f-6f8e-4409-be72-af711bca19cc"
                                    },
                                    "fac:ExchangeGainsLosses" : {
                                        "Name" : "fac:ExchangeGainsLosses",
                                        "Label" : "Exchange Gains (Losses)",
                                        "Order" : 12,
                                        "Id" : "cf75293f-3eb5-45d3-9477-c5a025edd184"
                                    },
                                    "fac:NetCashFlow" : {
                                        "Name" : "fac:NetCashFlow",
                                        "Label" : "Net Cash Flow",
                                        "Order" : 13,
                                        "Id" : "e988dd46-dbf2-4a1e-89ea-55c23e753f79"
                                    }
                                },
                                "Id" : "ea86a7f9-ab3b-4a87-9d4c-f248f33e59b7",
                                "IsAbstract" : true
                            },
                            "fac:KeyRatiosHierarchy" : {
                                "Name" : "fac:KeyRatiosHierarchy",
                                "Label" : "Key Ratios [Hierarchy]",
                                "To" : {
                                    "fac:ReturnOnAssets" : {
                                        "Name" : "fac:ReturnOnAssets",
                                        "Label" : "Return on Assets (ROA)",
                                        "Order" : 1,
                                        "Id" : "1308ff1d-5835-4058-8f3f-586a92215db3"
                                    },
                                    "fac:ReturnOnSales" : {
                                        "Name" : "fac:ReturnOnSales",
                                        "Label" : "Return on Sales (ROS)",
                                        "Order" : 2,
                                        "Id" : "3802316b-efc5-4c1c-b29a-37419a8e3d32"
                                    },
                                    "fac:SustainableGrowthRate" : {
                                        "Name" : "fac:SustainableGrowthRate",
                                        "Label" : "Sustainable Growth Rate (SGR)",
                                        "Order" : 3,
                                        "Id" : "eafd48e1-672a-4743-8208-f12ee998d7a7"
                                    },
                                    "fac:ReturnOnEquity" : {
                                        "Name" : "fac:ReturnOnEquity",
                                        "Label" : "Return on Equity (ROE)",
                                        "Order" : 4,
                                        "Id" : "fa933373-3a51-422a-ab67-66d8cecf6736"
                                    }
                                },
                                "Id" : "cb706c3a-cf45-476d-b7b4-4074a163026e",
                                "IsAbstract" : true
                            },
                            "fac:ValidationStatistics" : {
                                "Name" : "fac:ValidationStatistics",
                                "Label" : "Validation Rule Statistics [Hierarchy]",
                                "To" : {
                                    "fac:PassedValidations" : {
                                        "Name" : "fac:PassedValidations",
                                        "Label" : "Passed Validations",
                                        "Id" : "ea5517cb-239a-4f49-80b0-2401406bf0dd"
                                    },
                                    "fac:FailedValidations" : {
                                        "Name" : "fac:FailedValidations",
                                        "Label" : "Failing Validations",
                                        "Id" : "901e2c73-dc4b-43c6-8fe1-acce601ec3f8"
                                    },
                                    "fac:NotApplicableValidations" : {
                                        "Name" : "fac:NotApplicableValidations",
                                        "Label" : "Skipped Validations (unmet preconditions)",
                                        "Id" : "a3538326-e1c2-416f-bb5a-84ee55d6b1ae"
                                    }
                                },
                                "Id" : "5961832a-41d8-4f10-9a26-60a298599c12",
                                "IsAbstract" : true
                            },
                            "fac:Validations" : {
                                "Name" : "fac:Validations",
                                "Label" : "Fact Validation Rule Results [Hierarchy]",
                                "To" : {
                                    "fac:EquityValidation" : {
                                        "Name" : "fac:EquityValidation",
                                        "Label" : "[BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest",
                                        "Id" : "a91f84a2-7333-40eb-9682-fb6f9e673b18",
                                        "Order" : 1
                                    },
                                    "fac:AssetsValidation2" : {
                                        "Name" : "fac:AssetsValidation2",
                                        "Label" : "[BS3] Assets = CurrentAssets + NoncurrentAssets",
                                        "Id" : "201eb543-13dd-4d0f-ad4c-be3825f01930",
                                        "Order" : 3
                                    },
                                    "fac:LiabilitiesValidation" : {
                                        "Name" : "fac:LiabilitiesValidation",
                                        "Label" : "[BS4] Liabilities = CurrentLiabilities + NoncurrentLiabilities",
                                        "Id" : "9a4f5bd8-ea40-4738-b89c-1c1d4c9732aa",
                                        "Order" : 4
                                    },
                                    "fac:LiabilitiesAndEquityValidation" : {
                                        "Name" : "fac:LiabilitiesAndEquityValidation",
                                        "Label" : "[BS5] LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity",
                                        "Id" : "c91f1008-a989-42cf-a83a-81a0dbab4873",
                                        "Order" : 5
                                    },
                                    "fac:GrossProfitValidation" : {
                                        "Name" : "fac:GrossProfitValidation",
                                        "Label" : "[IS1] GrossProfit = Revenues - CostOfRevenue",
                                        "Id" : "49f1c876-4510-41f5-84b1-55c94678c46a",
                                        "Order" : 6
                                    },
                                    "fac:OperatingIncomeLossValidation" : {
                                        "Name" : "fac:OperatingIncomeLossValidation",
                                        "Label" : "[IS2] OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses",
                                        "Id" : "92459f1c-8051-49e5-9fd5-db16cd2e3710",
                                        "Order" : 7
                                    },
                                    "fac:IncomeLossBeforeEquityMethodInvestmentsValidation" : {
                                        "Name" : "fac:IncomeLossBeforeEquityMethodInvestmentsValidation",
                                        "Label" : "[IS3] IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense",
                                        "Id" : "ed742251-b569-43f1-98f9-fe1c814c374e",
                                        "Order" : 8
                                    },
                                    "fac:IncomeLossFromContinuingOperationsAfterTaxValidation" : {
                                        "Name" : "fac:IncomeLossFromContinuingOperationsAfterTaxValidation",
                                        "Label" : "[IS5] IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit",
                                        "Id" : "f1b04b83-1b34-465d-b73b-0bfe58d25924",
                                        "Order" : 10
                                    },
                                    "fac:NetIncomeLossValidation" : {
                                        "Name" : "fac:NetIncomeLossValidation",
                                        "Label" : "[IS6] NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax",
                                        "Id" : "3a502c79-29ce-44e5-acea-8670ad4d4aba",
                                        "Order" : 11
                                    },
                                    "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation" : {
                                        "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation",
                                        "Label" : "[IS8] NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments",
                                        "Id" : "2550e442-9a0f-41da-99a2-8ebab9acca60",
                                        "Order" : 13
                                    },
                                    "fac:ComprehensiveIncomeLossValidation" : {
                                        "Name" : "fac:ComprehensiveIncomeLossValidation",
                                        "Label" : "[IS9] ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
                                        "Id" : "86bd842b-7c76-41a5-862d-2a73d3b09b12",
                                        "Order" : 14
                                    },
                                    "fac:ComprehensiveIncomeLossValidation2" : {
                                        "Name" : "fac:ComprehensiveIncomeLossValidation2",
                                        "Label" : "[IS10] ComprehensiveIncomeLoss = NetIncomeLoss + OtherComprehensiveIncomeLoss",
                                        "Id" : "b6f17ac1-3244-43c4-ac74-873697c0ef9c",
                                        "Order" : 15
                                    },
                                    "fac:OperatingIncomeLossValidation2" : {
                                        "Name" : "fac:OperatingIncomeLossValidation2",
                                        "Label" : "[IS11] OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses",
                                        "Id" : "b464599f-25a6-4bc7-83c0-18b53ddb61e1",
                                        "Order" : 16
                                    },
                                    "fac:NetCashFlowValidation" : {
                                        "Name" : "fac:NetCashFlowValidation",
                                        "Label" : "[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]",
                                        "Id" : "c13c8d66-f83b-44d3-9296-305e874b794b",
                                        "Order" : 17
                                    },
                                    "fac:NetCashFlowContinuingValidation" : {
                                        "Name" : "fac:NetCashFlowContinuingValidation",
                                        "Label" : "[CF2] NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing",
                                        "Id" : "56dc32e6-1f26-4f8f-a93e-20b246a56575",
                                        "Order" : 18
                                    },
                                    "fac:NetCashFlowDiscontinuedValidation" : {
                                        "Name" : "fac:NetCashFlowDiscontinuedValidation",
                                        "Label" : "[CF3] NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued",
                                        "Id" : "0fb7b760-405d-447c-ba69-de41d99216f9",
                                        "Order" : 19
                                    },
                                    "fac:NetCashFlowFromOperatingActivitiesValidation" : {
                                        "Name" : "fac:NetCashFlowFromOperatingActivitiesValidation",
                                        "Label" : "[CF4] NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued",
                                        "Id" : "897ba356-f94f-4d11-95ae-950be64ff656",
                                        "Order" : 20
                                    },
                                    "fac:NetCashFlowFromInvestingActivitiesValidation" : {
                                        "Name" : "fac:NetCashFlowFromInvestingActivitiesValidation",
                                        "Label" : "[CF5] NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued",
                                        "Id" : "a40fe0f9-c8cd-46f2-a2d9-0c862f5fd987",
                                        "Order" : 21
                                    },
                                    "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation" : {
                                        "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation",
                                        "Label" : "[IS4] IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments",
                                        "Id" : "fb75d915-dbb1-4386-a616-f850a21e14a1",
                                        "Order" : 9
                                    },
                                    "fac:NetCashFlowFromFinancingActivitiesValidation" : {
                                        "Name" : "fac:NetCashFlowFromFinancingActivitiesValidation",
                                        "Label" : "[CF6] NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued",
                                        "Id" : "30cf2b70-ae4d-4f22-a445-3e42afb37363",
                                        "Order" : 22
                                    },
                                    "fac:NetIncomeLossValidation2" : {
                                        "Name" : "fac:NetIncomeLossValidation2",
                                        "Label" : "[IS7] NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest",
                                        "Id" : "ada5245b-0a9f-4783-8ea7-852e639a716a",
                                        "Order" : 12
                                    },
                                    "fac:AssetsValidation" : {
                                        "Name" : "fac:AssetsValidation",
                                        "Label" : "[BS2] Assets = LiabilitiesAndEquity",
                                        "Id" : "1314c825-263e-4026-b1e8-52f1019a5a82",
                                        "Order" : 2
                                    }
                                },
                                "Id" : "07449cd9-1dbf-4978-ba43-7d84cf5cfc2f",
                                "IsAbstract" : true
                            }
                        },
                        "Id" : "5a800c15-8a39-4228-93e1-08c967d917e5",
                        "IsAbstract" : true
                    }
                },
                "Id" : "7f8a6800-a523-41a5-98d2-6c2a01f3f604",
                "IsAbstract" : true
            }
        }
    },
    {
        "LinkName" : "link:definitionLink",
        "LinkRole" : "http://xbrl.io/fundamental-accounting-concepts",
        "ArcName" : "link:definitionArc",
        "ArcRole" : "http://www.xbrlsite.com/2013/fro/arcrole/class-subClass",
        "Kind" : "InterConceptTreeNetwork",
        "ShortName" : "ConceptMap",
        "CyclesAllowed" : "undirected",
        "Trees" : {
            "fac:Assets" : {
                "Id" : "ccddc17d-6013-472a-9a86-caa845961858",
                "Name" : "fac:Assets",
                "Label" : "Assets",
                "To" : {
                    "us-gaap:Assets" : {
                        "Id" : "a051fc3e-8ecf-4b2f-8692-e70e3681cffb",
                        "Name" : "us-gaap:Assets",
                        "Order" : 1
                    },
                    "us-gaap:AssetsCurrent" : {
                        "Id" : "6852c68e-a0f6-4071-8190-e0392d2c271f",
                        "Name" : "us-gaap:AssetsCurrent",
                        "Order" : 2
                    }
                }
            },
            "fac:BalanceSheetDate" : {
                "Id" : "ffc3a51c-27ca-466e-8292-9995e76725d2",
                "Name" : "fac:BalanceSheetDate",
                "Label" : "Balance Sheet Date",
                "To" : {
                    "dei:DocumentPeriodEndDate" : {
                        "Id" : "74d5c27e-42f2-44da-9a75-3363be4d0c89",
                        "Name" : "dei:DocumentPeriodEndDate",
                        "Order" : 3
                    }
                }
            },
            "fac:BenefitsCostsExpenses" : {
                "Id" : "f4d751ec-b1c0-46d1-8c21-cf3c37e454cc",
                "Name" : "fac:BenefitsCostsExpenses",
                "Label" : "Benefits, Costs, and Expenses",
                "To" : {
                    "us-gaap:BenefitsLossesAndExpenses" : {
                        "Id" : "06300f44-2b6a-408f-9dc4-39237940ba1b",
                        "Name" : "us-gaap:BenefitsLossesAndExpenses",
                        "Order" : 4
                    }
                }
            },
            "fac:CommitmentsAndContingencies" : {
                "Id" : "70ad4cb6-1e5d-44c3-833a-de21e851f79c",
                "Name" : "fac:CommitmentsAndContingencies",
                "Label" : "Commitments and Contingencies",
                "To" : {
                    "us-gaap:CommitmentsAndContingencies" : {
                        "Id" : "c2c2399d-2c09-4c7d-97c0-ae6eddebfe4f",
                        "Name" : "us-gaap:CommitmentsAndContingencies",
                        "Order" : 5
                    }
                }
            },
            "fac:ComprehensiveIncomeLoss" : {
                "Id" : "60500172-f942-4206-957e-df88d847e04b",
                "Name" : "fac:ComprehensiveIncomeLoss",
                "Label" : "Comprehensive Income (Loss)",
                "To" : {
                    "us-gaap:ComprehensiveIncomeNetOfTaxIncludingPortionAttributableToNoncontrollingInterest" : {
                        "Id" : "212a5a13-1d43-47b1-ad7a-f60789b3a4f7",
                        "Name" : "us-gaap:ComprehensiveIncomeNetOfTaxIncludingPortionAttributableToNoncontrollingInterest",
                        "Order" : 6
                    },
                    "us-gaap:ComprehensiveIncomeNetOfTax" : {
                        "Id" : "1cb9d333-966a-4d20-9f59-326611afd1ac",
                        "Name" : "us-gaap:ComprehensiveIncomeNetOfTax",
                        "Order" : 7
                    }
                }
            },
            "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest" : {
                "Id" : "02835b76-d9a0-40e4-8fa4-f561f10ef7d3",
                "Name" : "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
                "Label" : "Comprehensive Income (Loss) Attributable to Noncontrolling Interest",
                "To" : {
                    "us-gaap:ComprehensiveIncomeNetOfTaxAttributableToNoncontrollingInterest" : {
                        "Id" : "620c6c1c-f485-4a7d-9c15-68c98fa8d1c2",
                        "Name" : "us-gaap:ComprehensiveIncomeNetOfTaxAttributableToNoncontrollingInterest",
                        "Order" : 8
                    }
                }
            },
            "fac:ComprehensiveIncomeLossAttributableToParent" : {
                "Id" : "68c0a4bc-7312-43e4-b2fc-3d870c632edb",
                "Name" : "fac:ComprehensiveIncomeLossAttributableToParent",
                "Label" : "Comprehensive Income (Loss) Attributable to Parent",
                "To" : {
                    "us-gaap:ComprehensiveIncomeNetOfTax" : {
                        "Id" : "04e1f19f-ac98-4ca7-a450-9340783493fb",
                        "Name" : "us-gaap:ComprehensiveIncomeNetOfTax",
                        "Order" : 9
                    }
                }
            },
            "fac:CostOfRevenue" : {
                "Id" : "56725524-977f-425b-a68c-17098bf98a94",
                "Name" : "fac:CostOfRevenue",
                "Label" : "Cost of Revenue",
                "To" : {
                    "us-gaap:CostOfRevenue" : {
                        "Id" : "ce909be5-0c00-407d-8eb6-9e8f2ae88415",
                        "Name" : "us-gaap:CostOfRevenue",
                        "Order" : 10
                    },
                    "us-gaap:CostOfGoodsAndServicesSold" : {
                        "Id" : "75f20134-69d5-4c94-8fe9-13f62f113c70",
                        "Name" : "us-gaap:CostOfGoodsAndServicesSold",
                        "Order" : 11
                    },
                    "us-gaap:CostOfServices" : {
                        "Id" : "efb6bb6f-c548-4a5e-812d-e23ece9d16f2",
                        "Name" : "us-gaap:CostOfServices",
                        "Order" : 12
                    },
                    "us-gaap:CostOfGoodsSold" : {
                        "Id" : "9870c70d-6e71-471b-8042-212e7e38e911",
                        "Name" : "us-gaap:CostOfGoodsSold",
                        "Order" : 13
                    },
                    "us-gaap:CostOfGoodsSoldExcludingDepreciationDepletionAndAmortization" : {
                        "Id" : "849c1a65-336f-4f50-8d6a-611ed1959525",
                        "Name" : "us-gaap:CostOfGoodsSoldExcludingDepreciationDepletionAndAmortization",
                        "Order" : 14
                    },
                    "us-gaap:CostOfGoodsSoldElectric" : {
                        "Id" : "d0cd2df1-d586-4bc2-aa84-8a5c7a7754e5",
                        "Name" : "us-gaap:CostOfGoodsSoldElectric",
                        "Order" : 15
                    }
                }
            },
            "fac:CostsAndExpenses" : {
                "Id" : "13192d44-f997-4ce3-91dc-a2f7a554fca8",
                "Name" : "fac:CostsAndExpenses",
                "Label" : "Costs and Expenses",
                "To" : {
                    "us-gaap:CostsAndExpenses" : {
                        "Id" : "4e7846c0-02b8-4230-b78a-091e57de697a",
                        "Name" : "us-gaap:CostsAndExpenses",
                        "Order" : 16
                    },
                    "us-gaap:BenefitsLossesAndExpenses" : {
                        "Id" : "d83dc5f0-3695-4565-ae58-5b30ad427e50",
                        "Name" : "us-gaap:BenefitsLossesAndExpenses",
                        "Order" : 17
                    }
                }
            },
            "fac:CurrentAssets" : {
                "Id" : "6825d126-1458-4d87-8e77-d2ca962aad7f",
                "Name" : "fac:CurrentAssets",
                "Label" : "Current Assets",
                "To" : {
                    "us-gaap:AssetsCurrent" : {
                        "Id" : "98174251-e4a9-45b1-a60b-9c97c84fbd97",
                        "Name" : "us-gaap:AssetsCurrent",
                        "Order" : 18
                    }
                }
            },
            "fac:CurrentLiabilities" : {
                "Id" : "7b948be0-0692-4dd5-a481-039ab4f68da5",
                "Name" : "fac:CurrentLiabilities",
                "Label" : "Current Liabilities",
                "To" : {
                    "us-gaap:LiabilitiesCurrent" : {
                        "Id" : "e2425eb1-c250-4b3d-8039-ef47e069da1a",
                        "Name" : "us-gaap:LiabilitiesCurrent",
                        "Order" : 19
                    }
                }
            },
            "fac:DocumentType" : {
                "Id" : "ccdb35b7-a3a3-4148-ba3d-2fd6a7af516a",
                "Name" : "fac:DocumentType",
                "Label" : "Document Type",
                "To" : {
                    "dei:DocumentType" : {
                        "Id" : "a4aa9e18-1edb-429e-bd66-29e8f8b4b43a",
                        "Name" : "dei:DocumentType",
                        "Order" : 20
                    }
                }
            },
            "fac:EntityCentralIndexKey" : {
                "Id" : "71e66e48-3a9e-4d47-a3c3-5f32a4d81587",
                "Name" : "fac:EntityCentralIndexKey",
                "Label" : "Entity Central Index Key",
                "To" : {
                    "dei:EntityCentralIndexKey" : {
                        "Id" : "5d3ab898-c51d-4226-a12d-7bb1750b270b",
                        "Name" : "dei:EntityCentralIndexKey",
                        "Order" : 21
                    }
                }
            },
            "fac:EntityFilerCategory" : {
                "Id" : "4aa815cd-2803-476e-a091-62ce8a0e1519",
                "Name" : "fac:EntityFilerCategory",
                "Label" : "Entity Filer Category",
                "To" : {
                    "dei:EntityFilerCategory" : {
                        "Id" : "4d3ba50d-71e0-4d00-940d-6b9bc79332e3",
                        "Name" : "dei:EntityFilerCategory",
                        "Order" : 22
                    }
                }
            },
            "fac:EntityRegistrantName" : {
                "Id" : "af0bb6ed-61ef-4c8e-a1ee-ec94a4fce0aa",
                "Name" : "fac:EntityRegistrantName",
                "Label" : "Entity Registrant Name",
                "To" : {
                    "dei:EntityRegistrantName" : {
                        "Id" : "78652fae-4529-4bed-9900-bc9a7bfeec47",
                        "Name" : "dei:EntityRegistrantName",
                        "Order" : 23
                    }
                }
            },
            "fac:Equity" : {
                "Id" : "440eca87-dfcd-4b05-9f55-7ff26a06aea5",
                "Name" : "fac:Equity",
                "Label" : "Equity",
                "To" : {
                    "us-gaap:StockholdersEquityIncludingPortionAttributableToNoncontrollingInterest" : {
                        "Id" : "3780bdd0-7a53-44dd-99fe-a6522d56ed9d",
                        "Name" : "us-gaap:StockholdersEquityIncludingPortionAttributableToNoncontrollingInterest",
                        "Order" : 24
                    },
                    "us-gaap:StockholdersEquity" : {
                        "Id" : "0d16045b-a69d-4bae-82a4-2b1072b93002",
                        "Name" : "us-gaap:StockholdersEquity",
                        "Order" : 25
                    },
                    "us-gaap:PartnersCapitalIncludingPortionAttributableToNoncontrollingInterest" : {
                        "Id" : "12574937-f012-4465-87f5-9133f0fb7006",
                        "Name" : "us-gaap:PartnersCapitalIncludingPortionAttributableToNoncontrollingInterest",
                        "Order" : 26
                    },
                    "us-gaap:PartnersCapital" : {
                        "Id" : "dcf8d773-1a27-4f62-a7df-8284f247ea9f",
                        "Name" : "us-gaap:PartnersCapital",
                        "Order" : 27
                    },
                    "us-gaap:CommonStockholdersEquity" : {
                        "Id" : "9edfcc18-b4d8-4840-9ca3-7af5afab395f",
                        "Name" : "us-gaap:CommonStockholdersEquity",
                        "Order" : 28
                    },
                    "us-gaap:MembersEquity" : {
                        "Id" : "eb0f80be-48e7-4c93-ac52-1e12a9f943b9",
                        "Name" : "us-gaap:MembersEquity",
                        "Order" : 29
                    }
                }
            },
            "fac:EquityAttributableToNoncontrollingInterest" : {
                "Id" : "542ac42c-54d5-4724-93bf-d843a2645936",
                "Name" : "fac:EquityAttributableToNoncontrollingInterest",
                "Label" : "Equity Attributable to Noncontrolling Interest",
                "To" : {
                    "us-gaap:MinorityInterest" : {
                        "Id" : "ada275b3-6541-4749-98c5-261497fa1676",
                        "Name" : "us-gaap:MinorityInterest",
                        "Order" : 30
                    },
                    "us-gaap:PartnersCapitalAttributableToNoncontrollingInterest" : {
                        "Id" : "6af67c35-c117-437b-8553-709fdeaae8ee",
                        "Name" : "us-gaap:PartnersCapitalAttributableToNoncontrollingInterest",
                        "Order" : 31
                    },
                    "us-gaap:MinorityInterestInLimitedPartnerships" : {
                        "Id" : "2803d6c1-f05a-4e70-8bf3-8a88f61008ff",
                        "Name" : "us-gaap:MinorityInterestInLimitedPartnerships",
                        "Order" : 32
                    },
                    "us-gaap:MinorityInterestInOperatingPartnerships" : {
                        "Id" : "e84b46c4-7e6a-4094-9cf1-bf554e63981a",
                        "Name" : "us-gaap:MinorityInterestInOperatingPartnerships",
                        "Order" : 33
                    },
                    "us-gaap:MinorityInterestInPreferredUnitHolders" : {
                        "Id" : "92ed6b9d-a9b6-48b8-9b00-3fd102e536cf",
                        "Name" : "us-gaap:MinorityInterestInPreferredUnitHolders",
                        "Order" : 34
                    },
                    "us-gaap:MinorityInterestInJointVentures" : {
                        "Id" : "7f4cecf1-1f5e-4289-baa6-66e8a94bce3b",
                        "Name" : "us-gaap:MinorityInterestInJointVentures",
                        "Order" : 35
                    },
                    "us-gaap:OtherMinorityInterests" : {
                        "Id" : "fbe21df7-5a18-42bb-be64-fa7c2f31a3d9",
                        "Name" : "us-gaap:OtherMinorityInterests",
                        "Order" : 36
                    },
                    "us-gaap:NonredeemableNoncontrollingInterest" : {
                        "Id" : "8bc45002-7a91-4e7b-a5bd-670b6851b2c2",
                        "Name" : "us-gaap:NonredeemableNoncontrollingInterest",
                        "Order" : 37
                    },
                    "us-gaap:NoncontrollingInterestInVariableInterestEntity" : {
                        "Id" : "bbeeb6f5-df61-4590-ab7d-d5591c601e82",
                        "Name" : "us-gaap:NoncontrollingInterestInVariableInterestEntity",
                        "Order" : 38
                    }
                }
            },
            "fac:EquityAttributableToParent" : {
                "Id" : "74ad52c6-f13d-4bd0-b021-ffff4cba99b9",
                "Name" : "fac:EquityAttributableToParent",
                "Label" : "Equity Attributable to Parent",
                "To" : {
                    "us-gaap:StockholdersEquity" : {
                        "Id" : "7df28534-488d-4181-9e9b-684e6cae5e47",
                        "Name" : "us-gaap:StockholdersEquity",
                        "Order" : 39
                    },
                    "us-gaap:PartnersCapital" : {
                        "Id" : "67232249-9b9c-4904-b0e1-e88a284a682c",
                        "Name" : "us-gaap:PartnersCapital",
                        "Order" : 40
                    },
                    "us-gaap:MembersEquity" : {
                        "Id" : "6941e738-472d-43e6-a53a-58c4e1a0371d",
                        "Name" : "us-gaap:MembersEquity",
                        "Order" : 41
                    }
                }
            },
            "fac:ExchangeGainsLosses" : {
                "Id" : "83a387b6-f938-42da-9821-5490829bb49e",
                "Name" : "fac:ExchangeGainsLosses",
                "Label" : "Exchange Gains (Losses)",
                "To" : {
                    "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalents" : {
                        "Id" : "6b08fff6-d6be-4196-afdd-523a368cf95c",
                        "Name" : "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalents",
                        "Order" : 42
                    },
                    "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalentsContinuingOperations" : {
                        "Id" : "090aed83-7564-42b9-a1af-1373ba5dc367",
                        "Name" : "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalentsContinuingOperations",
                        "Order" : 43
                    },
                    "us-gaap:EffectOfExchangeRateOnCashContinuingOperations" : {
                        "Id" : "960a11a1-7390-4626-9fdc-23a2e98fd834",
                        "Name" : "us-gaap:EffectOfExchangeRateOnCashContinuingOperations",
                        "Order" : 44
                    },
                    "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalentsDiscontinuedOperations" : {
                        "Id" : "17ec558c-3322-4b4b-ae2c-0bb7fe8342d9",
                        "Name" : "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalentsDiscontinuedOperations",
                        "Order" : 45
                    }
                }
            },
            "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax" : {
                "Id" : "d46ba7d0-be34-474f-8772-c6ef2d9ccaa7",
                "Name" : "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax",
                "Label" : "Extraordinary Items of Income (Expense), Net of Tax",
                "To" : {
                    "us-gaap:ExtraordinaryItemNetOfTax" : {
                        "Id" : "f5d1aaf7-d064-4917-ac8e-c4519456e3bd",
                        "Name" : "us-gaap:ExtraordinaryItemNetOfTax",
                        "Order" : 46
                    }
                }
            },
            "fac:FiscalPeriodFocus" : {
                "Id" : "2d95367b-90bc-4312-8e34-5d38d1abebc4",
                "Name" : "fac:FiscalPeriodFocus",
                "Label" : "Fiscal Period Focus",
                "To" : {
                    "dei:DocumentFiscalPeriodFocus" : {
                        "Id" : "a15af103-8a84-41fa-a4c9-915a65ccc09b",
                        "Name" : "dei:DocumentFiscalPeriodFocus",
                        "Order" : 47
                    }
                }
            },
            "fac:FiscalYearEnd" : {
                "Id" : "18756f77-4517-400c-9fee-1a9bceae0be6",
                "Name" : "fac:FiscalYearEnd",
                "Label" : "Fiscal Year End",
                "To" : {
                    "dei:CurrentFiscalYearEndDate" : {
                        "Id" : "344d1a04-3c69-4440-9fba-38398a985f34",
                        "Name" : "dei:CurrentFiscalYearEndDate",
                        "Order" : 48
                    }
                }
            },
            "fac:FiscalYearFocus" : {
                "Id" : "f793b488-5350-4a92-af4f-6c55fdc9446f",
                "Name" : "fac:FiscalYearFocus",
                "Label" : "Fiscal Year Focus",
                "To" : {
                    "dei:DocumentFiscalYearFocus" : {
                        "Id" : "e4611535-e2fd-4a4f-aed1-0b6945059c09",
                        "Name" : "dei:DocumentFiscalYearFocus",
                        "Order" : 49
                    }
                }
            },
            "fac:GainLossOnSalePropertiesNetTax" : {
                "Id" : "2e1b5771-06a9-4379-b1c7-dd626bb9d6c8",
                "Name" : "fac:GainLossOnSalePropertiesNetTax",
                "Label" : "Gain (Loss) on Sale of Properties, Net of Tax",
                "To" : {
                    "us-gaap:GainLossOnSaleOfPropertiesNetOfApplicableIncomeTaxes" : {
                        "Id" : "800f5b4f-0889-4948-81d8-a43550751e59",
                        "Name" : "us-gaap:GainLossOnSaleOfPropertiesNetOfApplicableIncomeTaxes",
                        "Order" : 50
                    }
                }
            },
            "fac:GrossProfit" : {
                "Id" : "dff71861-61a1-44e7-aba0-475bb5cf28a6",
                "Name" : "fac:GrossProfit",
                "Label" : "Gross Profit",
                "To" : {
                    "us-gaap:GrossProfit" : {
                        "Id" : "bf5b7718-a872-4ee8-a9ce-78e1350c1312",
                        "Name" : "us-gaap:GrossProfit",
                        "Order" : 51
                    }
                }
            },
            "fac:IncomeLossBeforeEquityMethodInvestments" : {
                "Id" : "0dadb02e-c4ba-4011-a32f-9e7867bcd0bb",
                "Name" : "fac:IncomeLossBeforeEquityMethodInvestments",
                "Label" : "Income (Loss) before Equity Method Investments",
                "To" : {
                    "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesMinorityInterestAndIncomeLossFromEquityMethodInvestments" : {
                        "Id" : "2dbc22fb-a43f-489f-8cba-8c53d169d283",
                        "Name" : "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesMinorityInterestAndIncomeLossFromEquityMethodInvestments",
                        "Order" : 52
                    }
                }
            },
            "fac:IncomeLossFromContinuingOperationsAfterTax" : {
                "Id" : "ab74cc57-8c56-4acc-95c8-c78a0906231a",
                "Name" : "fac:IncomeLossFromContinuingOperationsAfterTax",
                "Label" : "Income (Loss) from Continuing Operations After Tax",
                "To" : {
                    "us-gaap:IncomeLossFromContinuingOperationsIncludingPortionAttributableToNoncontrollingInterest" : {
                        "Id" : "b0ee3212-08cd-4cae-880a-79431ddd4b4d",
                        "Name" : "us-gaap:IncomeLossFromContinuingOperationsIncludingPortionAttributableToNoncontrollingInterest",
                        "Order" : 53
                    },
                    "us-gaap:IncomeLossBeforeExtraordinaryItemsAndCumulativeEffectOfChangeInAccountingPrinciple" : {
                        "Id" : "0fb8c858-c444-4b78-b84a-0606e7ffdf05",
                        "Name" : "us-gaap:IncomeLossBeforeExtraordinaryItemsAndCumulativeEffectOfChangeInAccountingPrinciple",
                        "Order" : 54
                    },
                    "us-gaap:IncomeLossFromContinuingOperations" : {
                        "Id" : "f56138b2-b14a-439a-9e9a-12156068d604",
                        "Name" : "us-gaap:IncomeLossFromContinuingOperations",
                        "Order" : 55
                    }
                }
            },
            "fac:IncomeLossFromContinuingOperationsBeforeTax" : {
                "Id" : "160795ea-db2f-43ac-8312-b53123fe8ce4",
                "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTax",
                "Label" : "Income (Loss) from Continuing Operations Before Tax",
                "To" : {
                    "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesExtraordinaryItemsNoncontrollingInterest" : {
                        "Id" : "af85092a-aa41-441d-8d90-89da013ae422",
                        "Name" : "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesExtraordinaryItemsNoncontrollingInterest",
                        "Order" : 56
                    },
                    "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesMinorityInterestAndIncomeLossFromEquityMethodInvestments" : {
                        "Id" : "1810cedf-e80b-4757-9819-2500a0dcd194",
                        "Name" : "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesMinorityInterestAndIncomeLossFromEquityMethodInvestments",
                        "Order" : 57
                    }
                }
            },
            "fac:IncomeLossFromDiscontinuedOperationsNetOfTax" : {
                "Id" : "8a0f9156-979a-42cf-af2a-11810a724e1f",
                "Name" : "fac:IncomeLossFromDiscontinuedOperationsNetOfTax",
                "Label" : "Income (Loss) from Discontinued Operations, Net of Tax",
                "To" : {
                    "us-gaap:IncomeLossFromDiscontinuedOperationsNetOfTax" : {
                        "Id" : "e5b1d9b2-8c1c-4058-beb8-f469bc8e6e8a",
                        "Name" : "us-gaap:IncomeLossFromDiscontinuedOperationsNetOfTax",
                        "Order" : 58
                    },
                    "us-gaap:DiscontinuedOperationGainLossOnDisposalOfDiscontinuedOperationNetOfTax" : {
                        "Id" : "08c2d2e4-ca99-4250-99fb-5d3ee771842a",
                        "Name" : "us-gaap:DiscontinuedOperationGainLossOnDisposalOfDiscontinuedOperationNetOfTax",
                        "Order" : 59
                    },
                    "us-gaap:IncomeLossFromDiscontinuedOperationsNetOfTaxAttributableToReportingEntity" : {
                        "Id" : "bf6e8461-e9eb-43d9-b1ed-fc73e55e6706",
                        "Name" : "us-gaap:IncomeLossFromDiscontinuedOperationsNetOfTaxAttributableToReportingEntity",
                        "Order" : 60
                    }
                }
            },
            "fac:IncomeLossFromEquityMethodInvestments" : {
                "Id" : "e662731f-6167-41df-86fe-898bbd3e98b0",
                "Name" : "fac:IncomeLossFromEquityMethodInvestments",
                "Label" : "Income (Loss) from Equity Method Investments",
                "To" : {
                    "us-gaap:IncomeLossFromEquityMethodInvestments" : {
                        "Id" : "37ea189c-bace-45f8-8095-a90cc1b0b8b5",
                        "Name" : "us-gaap:IncomeLossFromEquityMethodInvestments",
                        "Order" : 61
                    }
                }
            },
            "fac:IncomeTaxExpenseBenefit" : {
                "Id" : "afabd1f5-3a0d-48b5-9ad9-09afd9fed1d0",
                "Name" : "fac:IncomeTaxExpenseBenefit",
                "Label" : "Income Tax Expense (Benefit)",
                "To" : {
                    "us-gaap:IncomeTaxExpenseBenefit" : {
                        "Id" : "496f0fd8-b8fe-47e1-beb4-d417a2467571",
                        "Name" : "us-gaap:IncomeTaxExpenseBenefit",
                        "Order" : 63
                    },
                    "us-gaap:IncomeTaxExpenseBenefitContinuingOperations" : {
                        "Id" : "0db6c287-4211-43fb-ba92-34bca3f054d8",
                        "Name" : "us-gaap:IncomeTaxExpenseBenefitContinuingOperations",
                        "Order" : 64
                    },
                    "us-gaap:FederalHomeLoanBankAssessments" : {
                        "Id" : "87513d5c-685c-4f22-ab0a-a4f533a28475",
                        "Name" : "us-gaap:FederalHomeLoanBankAssessments",
                        "Order" : 65
                    },
                    "us-gaap:CurrentIncomeTaxExpenseBenefit" : {
                        "Id" : "1b1cd584-667b-46df-8f34-56db90b28144",
                        "Name" : "us-gaap:CurrentIncomeTaxExpenseBenefit",
                        "Order" : 66
                    }
                }
            },
            "fac:InterestAndDebtExpense" : {
                "Id" : "6173d53e-1701-480e-9456-37c8856096f3",
                "Name" : "fac:InterestAndDebtExpense",
                "Label" : "Interest and Debt Expense",
                "To" : {
                    "us-gaap:InterestAndDebtExpense" : {
                        "Id" : "700fc01d-09a8-4e65-b8be-40d75365631a",
                        "Name" : "us-gaap:InterestAndDebtExpense",
                        "Order" : 67
                    }
                }
            },
            "fac:InterestAndDividendIncomeOperating" : {
                "Id" : "a00e0496-6783-48a4-a18e-ad7d9970edb2",
                "Name" : "fac:InterestAndDividendIncomeOperating",
                "Label" : "Interest and Dividend Income, Operating",
                "To" : {
                    "us-gaap:InterestAndDividendIncomeOperating" : {
                        "Id" : "71d87a1a-3319-4107-b056-7d0d29723c7f",
                        "Name" : "us-gaap:InterestAndDividendIncomeOperating",
                        "Order" : 68
                    }
                }
            },
            "fac:InterestExpenseOperating" : {
                "Id" : "11c20396-95cb-443b-a5af-c42b88800d25",
                "Name" : "fac:InterestExpenseOperating",
                "Label" : "Interest Expense, Operating",
                "To" : {
                    "us-gaap:InterestExpense" : {
                        "Id" : "6f59e6bf-5e51-41db-98e1-7e5edf3977cb",
                        "Name" : "us-gaap:InterestExpense",
                        "Order" : 69
                    }
                }
            },
            "fac:InterestIncomeExpenseAfterProvisionForLosses" : {
                "Id" : "e2b01e7d-f9d8-4964-8882-15f3eca7afb2",
                "Name" : "fac:InterestIncomeExpenseAfterProvisionForLosses",
                "Label" : "Interest Income (Expense) After Provision for Losses",
                "To" : {
                    "us-gaap:InterestIncomeExpenseAfterProvisionForLoanLoss" : {
                        "Id" : "96b9387d-1c0c-4a96-9f76-ce1820c8e202",
                        "Name" : "us-gaap:InterestIncomeExpenseAfterProvisionForLoanLoss",
                        "Order" : 70
                    }
                }
            },
            "fac:InterestIncomeExpenseOperatingNet" : {
                "Id" : "6b5f282f-f06e-4ca8-9949-ab4456abeafd",
                "Name" : "fac:InterestIncomeExpenseOperatingNet",
                "Label" : "Interest Income (Expense), Operating, Net",
                "To" : {
                    "us-gaap:InterestIncomeExpenseNet" : {
                        "Id" : "b4acccf5-4e1d-4681-9731-20a370f77745",
                        "Name" : "us-gaap:InterestIncomeExpenseNet",
                        "Order" : 71
                    }
                }
            },
            "fac:Liabilities" : {
                "Id" : "62d4982a-640b-4799-a664-6bf03c26cb3c",
                "Name" : "fac:Liabilities",
                "Label" : "Liabilities",
                "To" : {
                    "us-gaap:Liabilities" : {
                        "Id" : "a10ecfec-d305-4ba8-aa75-d1f86d93e62c",
                        "Name" : "us-gaap:Liabilities",
                        "Order" : 72
                    }
                }
            },
            "fac:LiabilitiesAndEquity" : {
                "Id" : "41a3b6e3-5804-4276-a227-aa07caedf401",
                "Name" : "fac:LiabilitiesAndEquity",
                "Label" : "Liabilities and Equity",
                "To" : {
                    "us-gaap:LiabilitiesAndStockholdersEquity" : {
                        "Id" : "4cc8f77d-63d2-49c2-b38f-109b832fdbe1",
                        "Name" : "us-gaap:LiabilitiesAndStockholdersEquity",
                        "Order" : 73
                    },
                    "us-gaap:LiabilitiesAndPartnersCapital" : {
                        "Id" : "8c0e103f-456f-4b06-8665-909327310316",
                        "Name" : "us-gaap:LiabilitiesAndPartnersCapital",
                        "Order" : 74
                    }
                }
            },
            "fac:NetCashFlow" : {
                "Id" : "0078f7ee-c5a6-4480-951a-37973e653957",
                "Name" : "fac:NetCashFlow",
                "Label" : "Net Cash Flow",
                "To" : {
                    "us-gaap:CashAndCashEquivalentsPeriodIncreaseDecrease" : {
                        "Id" : "df972788-0f40-4e34-b538-500f72a4f425",
                        "Name" : "us-gaap:CashAndCashEquivalentsPeriodIncreaseDecrease",
                        "Order" : 75
                    },
                    "us-gaap:CashPeriodIncreaseDecrease" : {
                        "Id" : "d6443709-e628-4481-a31e-4047495a636b",
                        "Name" : "us-gaap:CashPeriodIncreaseDecrease",
                        "Order" : 76
                    }
                }
            },
            "fac:NetCashFlowContinuing" : {
                "Id" : "8fa6b85f-8ba3-4542-aa30-19eaefb7d708",
                "Name" : "fac:NetCashFlowContinuing",
                "Label" : "Net Cash Flow, Continuing",
                "To" : {
                    "us-gaap:NetCashProvidedByUsedInContinuingOperations" : {
                        "Id" : "5c6a5036-e5bb-4b78-9bcb-1d0cefa69240",
                        "Name" : "us-gaap:NetCashProvidedByUsedInContinuingOperations",
                        "Order" : 77
                    }
                }
            },
            "fac:NetCashFlowDiscontinued" : {
                "Id" : "6a055f43-5967-4f9c-a915-c70574c0e7d1",
                "Name" : "fac:NetCashFlowDiscontinued",
                "Label" : "Net Cash Flow, Discontinued",
                "To" : {
                    "us-gaap:NetCashProvidedByUsedInDiscontinuedOperations" : {
                        "Id" : "16ff74fe-b415-4d21-923a-da4bf07e64c6",
                        "Name" : "us-gaap:NetCashProvidedByUsedInDiscontinuedOperations",
                        "Order" : 78
                    }
                }
            },
            "fac:NetCashFlowFromFinancingActivities" : {
                "Id" : "ea1bc9e2-211d-4570-804d-276db275a7e4",
                "Name" : "fac:NetCashFlowFromFinancingActivities",
                "Label" : "Net Cash Flow from Financing Activities",
                "To" : {
                    "us-gaap:NetCashProvidedByUsedInFinancingActivities" : {
                        "Id" : "e65cdf38-b070-4002-8796-7f97d233fd00",
                        "Name" : "us-gaap:NetCashProvidedByUsedInFinancingActivities",
                        "Order" : 79
                    }
                }
            },
            "fac:NetCashFlowFromFinancingActivitiesContinuing" : {
                "Id" : "19761487-5f85-4a05-ba19-7d77b225eb09",
                "Name" : "fac:NetCashFlowFromFinancingActivitiesContinuing",
                "Label" : "Net Cash Flow from Financing Activities, Continuing",
                "To" : {
                    "us-gaap:NetCashProvidedByUsedInFinancingActivitiesContinuingOperations" : {
                        "Id" : "5fce95d3-c563-4d7a-9c55-b530e205b004",
                        "Name" : "us-gaap:NetCashProvidedByUsedInFinancingActivitiesContinuingOperations",
                        "Order" : 80
                    }
                }
            },
            "fac:NetCashFlowFromFinancingActivitiesDiscontinued" : {
                "Id" : "8eec52ad-6580-4955-b470-bde54ba1b40a",
                "Name" : "fac:NetCashFlowFromFinancingActivitiesDiscontinued",
                "Label" : "Net Cash Flow from Financing Activities, Discontinued",
                "To" : {
                    "us-gaap:CashProvidedByUsedInFinancingActivitiesDiscontinuedOperations" : {
                        "Id" : "df281563-8a4b-4d22-b647-20ee9ba7adf7",
                        "Name" : "us-gaap:CashProvidedByUsedInFinancingActivitiesDiscontinuedOperations",
                        "Order" : 81
                    }
                }
            },
            "fac:NetCashFlowFromInvestingActivities" : {
                "Id" : "9085ab88-2094-4d42-860e-f8de0da51a36",
                "Name" : "fac:NetCashFlowFromInvestingActivities",
                "Label" : "Net Cash Flow from Investing Activities",
                "To" : {
                    "us-gaap:NetCashProvidedByUsedInInvestingActivities" : {
                        "Id" : "c595e440-1c67-45dd-ac22-a2451346b9f1",
                        "Name" : "us-gaap:NetCashProvidedByUsedInInvestingActivities",
                        "Order" : 82
                    }
                }
            },
            "fac:NetCashFlowFromInvestingActivitiesContinuing" : {
                "Id" : "c936e5d6-2a68-4204-b28d-bb97989decba",
                "Name" : "fac:NetCashFlowFromInvestingActivitiesContinuing",
                "Label" : "Net Cash Flow from Investing Activities, Continuing",
                "To" : {
                    "us-gaap:NetCashProvidedByUsedInInvestingActivitiesContinuingOperations" : {
                        "Id" : "12e26abc-5205-4fb7-b1d9-233f9706a1ce",
                        "Name" : "us-gaap:NetCashProvidedByUsedInInvestingActivitiesContinuingOperations",
                        "Order" : 83
                    }
                }
            },
            "fac:NetCashFlowFromInvestingActivitiesDiscontinued" : {
                "Id" : "532ad050-eaea-487d-913a-527483121e6a",
                "Name" : "fac:NetCashFlowFromInvestingActivitiesDiscontinued",
                "Label" : "Net Cash Flow from Investing Activities, Discontinued",
                "To" : {
                    "us-gaap:CashProvidedByUsedInInvestingActivitiesDiscontinuedOperations" : {
                        "Id" : "395a07ca-a0f2-45d8-8f7b-a05b8a31f065",
                        "Name" : "us-gaap:CashProvidedByUsedInInvestingActivitiesDiscontinuedOperations",
                        "Order" : 84
                    }
                }
            },
            "fac:NetCashFlowFromOperatingActivities" : {
                "Id" : "bf420fab-dc6e-43ac-8a89-2593190df02e",
                "Name" : "fac:NetCashFlowFromOperatingActivities",
                "Label" : "Net Cash Flow from Operating Activities",
                "To" : {
                    "us-gaap:NetCashProvidedByUsedInOperatingActivities" : {
                        "Id" : "cdab2979-6389-442a-86f6-8117edcae013",
                        "Name" : "us-gaap:NetCashProvidedByUsedInOperatingActivities",
                        "Order" : 85
                    }
                }
            },
            "fac:NetCashFlowFromOperatingActivitiesContinuing" : {
                "Id" : "2fba1817-0e39-4695-a8e7-815b5ab89f88",
                "Name" : "fac:NetCashFlowFromOperatingActivitiesContinuing",
                "Label" : "Net Cash Flow from Operating Activities, Continuing",
                "To" : {
                    "us-gaap:NetCashProvidedByUsedInOperatingActivitiesContinuingOperations" : {
                        "Id" : "ea1f4504-3a48-4333-af47-d542695138a2",
                        "Name" : "us-gaap:NetCashProvidedByUsedInOperatingActivitiesContinuingOperations",
                        "Order" : 86
                    }
                }
            },
            "fac:NetCashFlowFromOperatingActivitiesDiscontinued" : {
                "Id" : "8a381623-9015-4a5a-ab14-b7b3cac21189",
                "Name" : "fac:NetCashFlowFromOperatingActivitiesDiscontinued",
                "Label" : "Net Cash Flow from Operating Activities, Discontinued",
                "To" : {
                    "us-gaap:CashProvidedByUsedInOperatingActivitiesDiscontinuedOperations" : {
                        "Id" : "bfb3d2b4-adfc-4d73-8cf5-988d737d66da",
                        "Name" : "us-gaap:CashProvidedByUsedInOperatingActivitiesDiscontinuedOperations",
                        "Order" : 87
                    }
                }
            },
            "fac:NetIncomeLoss" : {
                "Id" : "9f4df0e5-46f9-4eca-9887-c3a9620a1cdf",
                "Name" : "fac:NetIncomeLoss",
                "Label" : "Net Income (Loss)",
                "To" : {
                    "us-gaap:ProfitLoss" : {
                        "Id" : "7d86af03-4a03-4a44-88f2-187dbba8ccfa",
                        "Name" : "us-gaap:ProfitLoss",
                        "Order" : 88
                    },
                    "us-gaap:NetIncomeLoss" : {
                        "Id" : "6c4a9368-6425-4c64-b474-262887f52789",
                        "Name" : "us-gaap:NetIncomeLoss",
                        "Order" : 89
                    },
                    "us-gaap:NetIncomeLossAvailableToCommonStockholdersBasic" : {
                        "Id" : "6d657f15-570f-497b-abd8-b6f36bc55fd4",
                        "Name" : "us-gaap:NetIncomeLossAvailableToCommonStockholdersBasic",
                        "Order" : 90
                    },
                    "us-gaap:IncomeLossFromContinuingOperations" : {
                        "Id" : "0fa91ba2-3e39-4740-be22-69c305d98052",
                        "Name" : "us-gaap:IncomeLossFromContinuingOperations",
                        "Order" : 91
                    },
                    "us-gaap:IncomeLossAttributableToParent" : {
                        "Id" : "7e0504e8-fe26-48ae-98d3-035181c20269",
                        "Name" : "us-gaap:IncomeLossAttributableToParent",
                        "Order" : 92
                    },
                    "us-gaap:IncomeLossFromContinuingOperationsIncludingPortionAttributableToNoncontrollingInterest" : {
                        "Id" : "001f088f-22ea-49c8-93bf-4898923c5533",
                        "Name" : "us-gaap:IncomeLossFromContinuingOperationsIncludingPortionAttributableToNoncontrollingInterest",
                        "Order" : 93
                    }
                }
            },
            "fac:NetIncomeLossAttributableToNoncontrollingInterest" : {
                "Id" : "39f50671-33a1-4638-b0aa-727ce3d01a81",
                "Name" : "fac:NetIncomeLossAttributableToNoncontrollingInterest",
                "Label" : "Net Income (Loss) Attributable to Noncontrolling Interest",
                "To" : {
                    "us-gaap:NetIncomeLossAttributableToNoncontrollingInterest" : {
                        "Id" : "4f2ec6f7-6964-4103-83e0-73cbf3e3e97f",
                        "Name" : "us-gaap:NetIncomeLossAttributableToNoncontrollingInterest",
                        "Order" : 94
                    },
                    "us-gaap:NetIncomeLossAttributableToNonredeemableNoncontrollingInterest" : {
                        "Id" : "bff5c455-856b-474b-b308-1bb0f3f9644b",
                        "Name" : "us-gaap:NetIncomeLossAttributableToNonredeemableNoncontrollingInterest",
                        "Order" : 95
                    },
                    "us-gaap:NetIncomeLossAttributableToRedeemableNoncontrollingInterest" : {
                        "Id" : "3705350f-02f2-4fe0-866e-1a5c9cc51b56",
                        "Name" : "us-gaap:NetIncomeLossAttributableToRedeemableNoncontrollingInterest",
                        "Order" : 96
                    },
                    "us-gaap:IncomeLossFromContinuingOperationsAttributableToNoncontrollingEntity" : {
                        "Id" : "fe586858-1f2c-4990-97e2-029435d8444d",
                        "Name" : "us-gaap:IncomeLossFromContinuingOperationsAttributableToNoncontrollingEntity",
                        "Order" : 97
                    }
                }
            },
            "fac:NetIncomeLossAttributableToParent" : {
                "Id" : "f33209f3-f18a-492d-8cbf-1a50994fedb9",
                "Name" : "fac:NetIncomeLossAttributableToParent",
                "Label" : "Net Income (Loss) Attributable to Parent",
                "To" : {
                    "us-gaap:NetIncomeLoss" : {
                        "Id" : "e1089711-75ec-430f-bb52-38bab5e0739e",
                        "Name" : "us-gaap:NetIncomeLoss",
                        "Order" : 98
                    }
                }
            },
            "fac:NetIncomeLossAvailableToCommonStockholdersBasic" : {
                "Id" : "bd765c73-389b-45c1-8875-642ee661d38a",
                "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasic",
                "Label" : "Net Income (Loss) Available to Common Stockholders, Basic",
                "To" : {
                    "us-gaap:NetIncomeLossAvailableToCommonStockholdersBasic" : {
                        "Id" : "0c53a28a-8396-4fbe-8195-793484f443ff",
                        "Name" : "us-gaap:NetIncomeLossAvailableToCommonStockholdersBasic",
                        "Order" : 99
                    }
                }
            },
            "fac:NoncurrentAssets" : {
                "Id" : "b7946357-0f6b-442b-b584-cc8557845568",
                "Name" : "fac:NoncurrentAssets",
                "Label" : "Noncurrent Assets",
                "To" : {
                    "us-gaap:AssetsNoncurrent" : {
                        "Id" : "68d4c215-6485-41aa-9300-138d5c68325c",
                        "Name" : "us-gaap:AssetsNoncurrent",
                        "Order" : 100
                    }
                }
            },
            "fac:NoncurrentLiabilities" : {
                "Id" : "762c2a95-8082-411a-89d9-2a5330cc066a",
                "Name" : "fac:NoncurrentLiabilities",
                "Label" : "Noncurrent Liabilities",
                "To" : {
                    "us-gaap:LiabilitiesNoncurrent" : {
                        "Id" : "133f0b45-41ba-4e92-91dd-32395271731f",
                        "Name" : "us-gaap:LiabilitiesNoncurrent",
                        "Order" : 101
                    }
                }
            },
            "fac:NoninterestExpense" : {
                "Id" : "1ce4d515-cd8c-4c0b-9356-7923ecd97e1d",
                "Name" : "fac:NoninterestExpense",
                "Label" : "Noninterest Expense",
                "To" : {
                    "us-gaap:NoninterestExpense" : {
                        "Id" : "d8cb6f7f-7a3e-4e10-8a7b-8a8ddd5854ea",
                        "Name" : "us-gaap:NoninterestExpense",
                        "Order" : 102
                    }
                }
            },
            "fac:NoninterestIncome" : {
                "Id" : "578bc7ac-bdbb-482b-8c4d-7faa02374ba7",
                "Name" : "fac:NoninterestIncome",
                "Label" : "Noninterest Income",
                "To" : {
                    "us-gaap:NoninterestIncome" : {
                        "Id" : "3566336b-0746-437c-8309-6d42b8fdbc53",
                        "Name" : "us-gaap:NoninterestIncome",
                        "Order" : 103
                    }
                }
            },
            "fac:NonoperatingIncomeLoss" : {
                "Id" : "495a2187-30b0-4d05-ab4e-113a10b0840e",
                "Name" : "fac:NonoperatingIncomeLoss",
                "Label" : "Nonoperating Income (Loss)",
                "To" : {
                    "us-gaap:NonoperatingIncomeExpense" : {
                        "Id" : "dcc89543-0e65-453f-bf7e-8bca5ef5181e",
                        "Name" : "us-gaap:NonoperatingIncomeExpense",
                        "Order" : 104
                    }
                }
            },
            "fac:OperatingExpenses" : {
                "Id" : "9a3ae812-a994-4b26-99c7-81ba4d7a27e3",
                "Name" : "fac:OperatingExpenses",
                "Label" : "Operating Expenses",
                "To" : {
                    "us-gaap:OperatingExpenses" : {
                        "Id" : "a70221fd-db9e-4180-9c02-03f6d0e4626b",
                        "Name" : "us-gaap:OperatingExpenses",
                        "Order" : 105
                    },
                    "us-gaap:OperatingCostsAndExpenses" : {
                        "Id" : "9c54e2aa-d956-4ba5-be1e-3918097f48a3",
                        "Name" : "us-gaap:OperatingCostsAndExpenses",
                        "Order" : 106
                    }
                }
            },
            "fac:OperatingIncomeLoss" : {
                "Id" : "dd420dc5-3854-4706-972b-1a732180f671",
                "Name" : "fac:OperatingIncomeLoss",
                "Label" : "Operating Income (Loss)",
                "To" : {
                    "us-gaap:OperatingIncomeLoss" : {
                        "Id" : "38b99799-6a05-474b-82a5-825c42673c33",
                        "Name" : "us-gaap:OperatingIncomeLoss",
                        "Order" : 107
                    }
                }
            },
            "fac:OtherComprehensiveIncomeLoss" : {
                "Id" : "1eeb5629-e64d-42fc-a591-b67fc8f5f392",
                "Name" : "fac:OtherComprehensiveIncomeLoss",
                "Label" : "Other Comprehensive Income (Loss)",
                "To" : {
                    "us-gaap:OtherComprehensiveIncomeLossNetOfTax" : {
                        "Id" : "dc9380cc-05b1-48a7-a80c-bb8011cf4243",
                        "Name" : "us-gaap:OtherComprehensiveIncomeLossNetOfTax",
                        "Order" : 108
                    }
                }
            },
            "fac:OtherOperatingIncomeExpenses" : {
                "Id" : "6cea597f-ae5c-47c0-ae88-2aac15220a32",
                "Name" : "fac:OtherOperatingIncomeExpenses",
                "Label" : "Other Operating Income (Expenses)",
                "To" : {
                    "us-gaap:OtherOperatingIncome" : {
                        "Id" : "f78b3ce6-5f25-4eb8-a8a0-adb9d572f1af",
                        "Name" : "us-gaap:OtherOperatingIncome",
                        "Order" : 109
                    }
                }
            },
            "fac:PreferredStockDividendsAndOtherAdjustments" : {
                "Id" : "1901a667-09c9-4ecc-9543-6b2ff181887d",
                "Name" : "fac:PreferredStockDividendsAndOtherAdjustments",
                "Label" : "Preferred Stock Dividends and Other Adjustments",
                "To" : {
                    "us-gaap:PreferredStockDividendsAndOtherAdjustments" : {
                        "Id" : "58d421f8-70da-45cd-8c62-2b3b350e1f82",
                        "Name" : "us-gaap:PreferredStockDividendsAndOtherAdjustments",
                        "Order" : 110
                    }
                }
            },
            "fac:ProvisionForLoanLeaseAndOtherLosses" : {
                "Id" : "9422c1c4-f00a-497d-b0c5-ec97b7c6afab",
                "Name" : "fac:ProvisionForLoanLeaseAndOtherLosses",
                "Label" : "Provision for Loan, Lease, and Other Losses",
                "To" : {
                    "us-gaap:ProvisionForLoanLeaseAndOtherLosses" : {
                        "Id" : "3546b43c-a7f8-4648-ac3c-3f4a9f1343d9",
                        "Name" : "us-gaap:ProvisionForLoanLeaseAndOtherLosses",
                        "Order" : 111
                    }
                }
            },
            "fac:RedeemableNoncontrollingInterest" : {
                "Id" : "45033dc9-6403-4c00-a1b6-6a304b5f3d4f",
                "Name" : "fac:RedeemableNoncontrollingInterest",
                "Label" : "Redeemable Noncontrolling Interest",
                "To" : {
                    "us-gaap:RedeemableNoncontrollingInterestEquityCarryingAmount" : {
                        "Id" : "f2d55094-dc33-4957-a3ed-60328a1e2f91",
                        "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityCarryingAmount",
                        "Order" : 112
                    },
                    "us-gaap:RedeemableNoncontrollingInterestEquityCommonCarryingAmount" : {
                        "Id" : "7ae9439b-3e16-428e-927c-5fa7fadb95da",
                        "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityCommonCarryingAmount",
                        "Order" : 113
                    },
                    "us-gaap:RedeemableNoncontrollingInterestEquityPreferredCarryingAmount" : {
                        "Id" : "95b91f0a-7716-4686-8674-b03123cb5348",
                        "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityPreferredCarryingAmount",
                        "Order" : 114
                    },
                    "us-gaap:RedeemableNoncontrollingInterestEquityOtherCarryingAmount" : {
                        "Id" : "61862388-a35a-4a1a-b3cc-3e816bc27006",
                        "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityOtherCarryingAmount",
                        "Order" : 115
                    },
                    "us-gaap:RedeemableNoncontrollingInterestEquityFairValue" : {
                        "Id" : "f4cbe863-4b4a-4aa1-9dd6-82ab1aeaf370",
                        "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityFairValue",
                        "Order" : 116
                    }
                }
            },
            "fac:Revenues" : {
                "Id" : "f25982ce-9d98-4e81-9b0b-e7e79d231252",
                "Name" : "fac:Revenues",
                "Label" : "Revenues",
                "To" : {
                    "us-gaap:Revenues" : {
                        "Id" : "37e6ec3e-843a-4d40-8a86-fd53f51cf9ca",
                        "Name" : "us-gaap:Revenues",
                        "Order" : 117
                    },
                    "us-gaap:SalesRevenueNet" : {
                        "Id" : "af5dce75-f8d8-445f-b774-fa8c9ebce91e",
                        "Name" : "us-gaap:SalesRevenueNet",
                        "Order" : 118
                    },
                    "us-gaap:SalesRevenueServicesNet" : {
                        "Id" : "8829b33a-8215-4dc4-ae69-4b4ae1745835",
                        "Name" : "us-gaap:SalesRevenueServicesNet",
                        "Order" : 119
                    },
                    "us-gaap:SalesRevenueGoodsNet" : {
                        "Id" : "ae3e175c-968a-4a5b-a0f0-72d301d687fb",
                        "Name" : "us-gaap:SalesRevenueGoodsNet",
                        "Order" : 120
                    },
                    "us-gaap:RevenuesNetOfInterestExpense" : {
                        "Id" : "a5e8e7ca-cab1-4389-a0cc-88d1456fd0ca",
                        "Name" : "us-gaap:RevenuesNetOfInterestExpense",
                        "Order" : 121
                    },
                    "us-gaap:HealthCareOrganizationRevenue" : {
                        "Id" : "d7d0b215-d5f1-4b31-802f-29fa3b85eab7",
                        "Name" : "us-gaap:HealthCareOrganizationRevenue",
                        "Order" : 122
                    },
                    "us-gaap:InterestAndDividendIncomeOperating" : {
                        "Id" : "6d629282-342e-41c7-b107-a9082bae43ae",
                        "Name" : "us-gaap:InterestAndDividendIncomeOperating",
                        "Order" : 123
                    },
                    "us-gaap:RealEstateRevenueNet" : {
                        "Id" : "7c40e5e5-f77e-4b4e-864f-9eb8726e627a",
                        "Name" : "us-gaap:RealEstateRevenueNet",
                        "Order" : 124
                    },
                    "us-gaap:RevenueMineralSales" : {
                        "Id" : "05799b1c-920b-46f7-ba25-ecc4b4540dd8",
                        "Name" : "us-gaap:RevenueMineralSales",
                        "Order" : 125
                    },
                    "us-gaap:OilAndGasRevenue" : {
                        "Id" : "15db3912-3eae-4331-9d1c-2fdb27da796f",
                        "Name" : "us-gaap:OilAndGasRevenue",
                        "Order" : 126
                    },
                    "us-gaap:FinancialServicesRevenue" : {
                        "Id" : "1aea51db-9fc0-4395-85d5-e676f95074a7",
                        "Name" : "us-gaap:FinancialServicesRevenue",
                        "Order" : 127
                    },
                    "us-gaap:RegulatedAndUnregulatedOperatingRevenue" : {
                        "Id" : "29d7b07d-72ab-4bf3-be78-f0fcae4ffc44",
                        "Name" : "us-gaap:RegulatedAndUnregulatedOperatingRevenue",
                        "Order" : 128
                    },
                    "us-gaap:ShippingAndHandlingRevenue" : {
                        "Id" : "4ef92c44-6219-49b8-83ab-2371d95b36db",
                        "Name" : "us-gaap:ShippingAndHandlingRevenue",
                        "Order" : 129
                    },
                    "us-gaap:SalesRevenueFromEnergyCommoditiesAndServices" : {
                        "Id" : "224dd419-6c07-41a4-8432-f66d1f84dfe9",
                        "Name" : "us-gaap:SalesRevenueFromEnergyCommoditiesAndServices",
                        "Order" : 130
                    },
                    "us-gaap:UtilityRevenue" : {
                        "Id" : "26ead8f3-db42-453a-a8e2-224e63881fa6",
                        "Name" : "us-gaap:UtilityRevenue",
                        "Order" : 131
                    },
                    "us-gaap:PhaseInPlanAmountOfCapitalizedCostsRecovered" : {
                        "Id" : "49764a11-ca49-4e0b-b446-681d84147e92",
                        "Name" : "us-gaap:PhaseInPlanAmountOfCapitalizedCostsRecovered",
                        "Order" : 132
                    },
                    "us-gaap:SecondaryProcessingRevenue" : {
                        "Id" : "60791e53-f044-48be-a731-a1402a2aa6e0",
                        "Name" : "us-gaap:SecondaryProcessingRevenue",
                        "Order" : 133
                    },
                    "us-gaap:RevenueSteamProductsAndServices" : {
                        "Id" : "0cf917a2-fa50-421b-8589-4d6ba31152cf",
                        "Name" : "us-gaap:RevenueSteamProductsAndServices",
                        "Order" : 134
                    },
                    "us-gaap:RevenueFromLeasedAndOwnedHotels" : {
                        "Id" : "21fdd6aa-4480-4686-8d6d-b5ec28cc2e5f",
                        "Name" : "us-gaap:RevenueFromLeasedAndOwnedHotels",
                        "Order" : 135
                    },
                    "us-gaap:FranchisorRevenue" : {
                        "Id" : "59584829-045d-4f39-83fb-9bbc772d1627",
                        "Name" : "us-gaap:FranchisorRevenue",
                        "Order" : 136
                    },
                    "us-gaap:SubscriptionRevenue" : {
                        "Id" : "ae4b4796-8678-457b-b922-87e46a5357cc",
                        "Name" : "us-gaap:SubscriptionRevenue",
                        "Order" : 137
                    },
                    "us-gaap:AdvertisingRevenue" : {
                        "Id" : "4609b059-8635-47ef-bdb0-fff0ebd32681",
                        "Name" : "us-gaap:AdvertisingRevenue",
                        "Order" : 138
                    },
                    "us-gaap:AdmissionsRevenue" : {
                        "Id" : "4e45d586-38be-4b5f-8650-540231a4002d",
                        "Name" : "us-gaap:AdmissionsRevenue",
                        "Order" : 139
                    },
                    "us-gaap:RevenueFromEnrollmentAndRegistrationFeesExcludingHospitalityEnterprises" : {
                        "Id" : "4691805d-2d03-445f-8a33-0119fb8dc3a2",
                        "Name" : "us-gaap:RevenueFromEnrollmentAndRegistrationFeesExcludingHospitalityEnterprises",
                        "Order" : 140
                    },
                    "us-gaap:MembershipDuesRevenueOnGoing" : {
                        "Id" : "30ffd2bf-7ffc-4b86-a77b-f76ca4c9a5c4",
                        "Name" : "us-gaap:MembershipDuesRevenueOnGoing",
                        "Order" : 141
                    },
                    "us-gaap:LicensesRevenue" : {
                        "Id" : "9146cceb-a4d9-4b78-9c59-8b23ca042742",
                        "Name" : "us-gaap:LicensesRevenue",
                        "Order" : 142
                    },
                    "us-gaap:RoyaltyRevenue" : {
                        "Id" : "a29f9636-d977-40b3-80e3-3e4ff27774c5",
                        "Name" : "us-gaap:RoyaltyRevenue",
                        "Order" : 143
                    },
                    "us-gaap:SalesOfOilAndGasProspects" : {
                        "Id" : "4ce98d3b-cf4c-49da-a1f4-9393f5b53588",
                        "Name" : "us-gaap:SalesOfOilAndGasProspects",
                        "Order" : 144
                    },
                    "us-gaap:ClearingFeesRevenue" : {
                        "Id" : "9f53cb4b-75f5-4603-acfc-efe1745fdc23",
                        "Name" : "us-gaap:ClearingFeesRevenue",
                        "Order" : 145
                    },
                    "us-gaap:ReimbursementRevenue" : {
                        "Id" : "afac5543-6d0a-4573-9bc2-73e7b7302fc0",
                        "Name" : "us-gaap:ReimbursementRevenue",
                        "Order" : 146
                    },
                    "us-gaap:RevenueFromGrants" : {
                        "Id" : "ff3c376d-879c-4068-963f-7fd7f6e0c050",
                        "Name" : "us-gaap:RevenueFromGrants",
                        "Order" : 147
                    },
                    "us-gaap:RevenueOtherManufacturedProducts" : {
                        "Id" : "9997d89a-6e5f-4a59-9390-1dda97bc14c3",
                        "Name" : "us-gaap:RevenueOtherManufacturedProducts",
                        "Order" : 148
                    },
                    "us-gaap:ConstructionMaterialsRevenue" : {
                        "Id" : "2b777816-09d2-434d-b5b5-a4261840b07d",
                        "Name" : "us-gaap:ConstructionMaterialsRevenue",
                        "Order" : 149
                    },
                    "us-gaap:TimberRevenue" : {
                        "Id" : "1ab7c123-4af5-40c8-a665-c7ffd8c43765",
                        "Name" : "us-gaap:TimberRevenue",
                        "Order" : 150
                    },
                    "us-gaap:RecyclingRevenue" : {
                        "Id" : "a5a6245b-fa27-4114-ad8c-cb921ed1b12e",
                        "Name" : "us-gaap:RecyclingRevenue",
                        "Order" : 151
                    },
                    "us-gaap:OtherSalesRevenueNet" : {
                        "Id" : "402d3be3-ea1a-40ae-a2e6-20d86e95b1e8",
                        "Name" : "us-gaap:OtherSalesRevenueNet",
                        "Order" : 152
                    },
                    "us-gaap:SaleOfTrustAssetsToPayExpenses" : {
                        "Id" : "63cf819c-cf60-4ab0-8241-bd094eaa157e",
                        "Name" : "us-gaap:SaleOfTrustAssetsToPayExpenses",
                        "Order" : 153
                    },
                    "us-gaap:PassengerRevenue" : {
                        "Id" : "cf4b4f5c-b3de-49ee-bb8a-4227b4a76dd9",
                        "Name" : "us-gaap:PassengerRevenue",
                        "Order" : 154
                    },
                    "us-gaap:VehicleTollRevenue" : {
                        "Id" : "60368d55-a964-47c6-b743-84cff3ec33e1",
                        "Name" : "us-gaap:VehicleTollRevenue",
                        "Order" : 155
                    },
                    "us-gaap:CargoAndFreightRevenue" : {
                        "Id" : "e4d14b40-7231-4e73-b9c1-b9ec1c4a587f",
                        "Name" : "us-gaap:CargoAndFreightRevenue",
                        "Order" : 156
                    },
                    "us-gaap:NetInvestmentIncome" : {
                        "Id" : "b2b3de0c-070b-439a-a7e8-8f4601c55dbf",
                        "Name" : "us-gaap:NetInvestmentIncome",
                        "Order" : 157
                    },
                    "us-gaap:RevenuesExcludingInterestAndDividends" : {
                        "Id" : "12d54e57-8e35-409c-a572-292b2932b771",
                        "Name" : "us-gaap:RevenuesExcludingInterestAndDividends",
                        "Order" : 158
                    },
                    "us-gaap:InvestmentBankingRevenue" : {
                        "Id" : "05441f5f-cb9d-42b8-8947-912a5c5b0837",
                        "Name" : "us-gaap:InvestmentBankingRevenue",
                        "Order" : 159
                    },
                    "us-gaap:UnderwritingIncomeLoss" : {
                        "Id" : "5e4305bc-ec1c-41a7-b84d-b02b8c3bd010",
                        "Name" : "us-gaap:UnderwritingIncomeLoss",
                        "Order" : 160
                    },
                    "us-gaap:MarketDataRevenue" : {
                        "Id" : "5f34dfaa-bba5-4c90-9e4f-75245156a06c",
                        "Name" : "us-gaap:MarketDataRevenue",
                        "Order" : 161
                    },
                    "us-gaap:ElectricUtilityRevenue" : {
                        "Id" : "b64b24d2-9702-4cf8-ad77-1ba60e165080",
                        "Name" : "us-gaap:ElectricUtilityRevenue",
                        "Order" : 162
                    }
                }
            },
            "fac:RevenuesExcludingInterestAndDividends" : {
                "Id" : "1c43ce75-0401-4d4e-87a4-0703f95d3d7c",
                "Name" : "fac:RevenuesExcludingInterestAndDividends",
                "Label" : "Revenues, Excluding Interest and Dividends",
                "To" : {
                    "us-gaap:RevenuesExcludingInterestAndDividends" : {
                        "Id" : "70562512-eb50-4fbf-b953-37f0c185129b",
                        "Name" : "us-gaap:RevenuesExcludingInterestAndDividends",
                        "Order" : 163
                    },
                    "us-gaap:BrokerageCommissionsRevenue" : {
                        "Id" : "011a5890-6cfd-4f00-9443-4692ae2d01df",
                        "Name" : "us-gaap:BrokerageCommissionsRevenue",
                        "Order" : 164
                    },
                    "us-gaap:InvestmentBankingRevenue" : {
                        "Id" : "4ed2fd52-89d3-4120-adbb-3466ef281693",
                        "Name" : "us-gaap:InvestmentBankingRevenue",
                        "Order" : 165
                    }
                }
            },
            "fac:RevenuesNetInterestExpense" : {
                "Id" : "bfc21afa-dd93-4553-9faf-4165a17ee231",
                "Name" : "fac:RevenuesNetInterestExpense",
                "Label" : "Revenues, Net of Interest Expense",
                "To" : {
                    "us-gaap:RevenuesNetOfInterestExpense" : {
                        "Id" : "8f013d54-adb1-416a-9cd0-0d28a05c2e40",
                        "Name" : "us-gaap:RevenuesNetOfInterestExpense",
                        "Order" : 166
                    }
                }
            },
            "fac:TemporaryEquity" : {
                "Id" : "d61ba1e4-3cef-4b18-afa1-b8738b1edd99",
                "Name" : "fac:TemporaryEquity",
                "Label" : "Temporary Equity",
                "To" : {
                    "us-gaap:TemporaryEquityCarryingAmountIncludingPortionAttributableToNoncontrollingInterests" : {
                        "Id" : "c3149914-f56d-49da-a914-670ab005cff1",
                        "Name" : "us-gaap:TemporaryEquityCarryingAmountIncludingPortionAttributableToNoncontrollingInterests",
                        "Order" : 167
                    },
                    "us-gaap:TemporaryEquityRedemptionValue" : {
                        "Id" : "b78075c3-fb86-4e4d-b028-cd3959f44ab4",
                        "Name" : "us-gaap:TemporaryEquityRedemptionValue",
                        "Order" : 168
                    },
                    "us-gaap:RedeemablePreferredStockCarryingAmount" : {
                        "Id" : "6549ef08-434b-4086-9bcb-a842ea9ae5aa",
                        "Name" : "us-gaap:RedeemablePreferredStockCarryingAmount",
                        "Order" : 169
                    },
                    "us-gaap:TemporaryEquityCarryingAmount" : {
                        "Id" : "1a7ef168-ab5c-4a3e-a3a3-0f9143406fdb",
                        "Name" : "us-gaap:TemporaryEquityCarryingAmount",
                        "Order" : 170
                    },
                    "us-gaap:TemporaryEquityValueExcludingAdditionalPaidInCapital" : {
                        "Id" : "c7b4a0bd-7a36-4601-ab0a-d8ab129ad4b7",
                        "Name" : "us-gaap:TemporaryEquityValueExcludingAdditionalPaidInCapital",
                        "Order" : 171
                    },
                    "us-gaap:TemporaryEquityCarryingAmountAttributableToParent" : {
                        "Id" : "f4fd09c0-80ce-459d-afe6-00f6044e9c4a",
                        "Name" : "us-gaap:TemporaryEquityCarryingAmountAttributableToParent",
                        "Order" : 172
                    },
                    "us-gaap:TemporaryEquityCarryingAmountAttributableToNoncontrollingInterest" : {
                        "Id" : "d44f390e-f9c3-4d1c-b084-2afae69cbde3",
                        "Name" : "us-gaap:TemporaryEquityCarryingAmountAttributableToNoncontrollingInterest",
                        "Order" : 173
                    },
                    "us-gaap:TemporaryEquityLiquidationPreference" : {
                        "Id" : "706e2748-7a73-4565-9a5e-7529a599ef05",
                        "Name" : "us-gaap:TemporaryEquityLiquidationPreference",
                        "Order" : 174
                    }
                }
            },
            "fac:TradingSymbol" : {
                "Id" : "294ec8b9-382d-4a5d-94d5-2f7755908cb9",
                "Name" : "fac:TradingSymbol",
                "Label" : "Trading Symbol",
                "To" : {
                    "dei:TradingSymbol" : {
                        "Id" : "6e967a73-ba3b-4b8d-aec8-331aecfdc6bd",
                        "Name" : "dei:TradingSymbol",
                        "Order" : 175
                    }
                }
            }
        }
    } ],
    "Hypercubes" : {
        "xbrl:DefaultHypercube" : {
            "Name" : "xbrl:DefaultHypercube",
            "Label" : "XBRL Implicit non-dimensional Hypercube",
            "Aspects" : {
                "xbrl:Concept" : {
                    "Name" : "xbrl:Concept",
                    "Label" : "Implicit XBRL Concept Dimension",
                    "Domains" : {
                        "xbrl:ConceptDomain" : {
                            "Name" : "xbrl:ConceptDomain",
                            "Label" : "Implicit XBRL Concept Domain",
                            "Members" : {
                                "fac:ValidationStatistics" : {
                                    "Name" : "fac:ValidationStatistics",
                                    "Label" : "Validation Rule Statistics [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:PassedValidations" : {
                                    "Name" : "fac:PassedValidations",
                                    "Label" : "Passed Validations"
                                },
                                "fac:FailedValidations" : {
                                    "Name" : "fac:FailedValidations",
                                    "Label" : "Failing Validations"
                                },
                                "fac:NotApplicableValidations" : {
                                    "Name" : "fac:NotApplicableValidations",
                                    "Label" : "Skipped Validations (unmet preconditions)"
                                },
                                "fac:GrossProfitValidation" : {
                                    "Name" : "fac:GrossProfitValidation",
                                    "Label" : "[IS1] GrossProfit = Revenues - CostOfRevenue"
                                },
                                "fac:IncomeLossBeforeEquityMethodInvestmentsValidation" : {
                                    "Name" : "fac:IncomeLossBeforeEquityMethodInvestmentsValidation",
                                    "Label" : "[IS3] IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense"
                                },
                                "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation" : {
                                    "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation",
                                    "Label" : "[IS4] IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments"
                                },
                                "fac:IncomeLossFromContinuingOperationsAfterTaxValidation" : {
                                    "Name" : "fac:IncomeLossFromContinuingOperationsAfterTaxValidation",
                                    "Label" : "[IS5] IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit"
                                },
                                "fac:NetIncomeLossValidation" : {
                                    "Name" : "fac:NetIncomeLossValidation",
                                    "Label" : "[IS6] NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax"
                                },
                                "fac:NetIncomeLossValidation2" : {
                                    "Name" : "fac:NetIncomeLossValidation2",
                                    "Label" : "[IS7] NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest"
                                },
                                "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation" : {
                                    "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation",
                                    "Label" : "[IS8] NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments"
                                },
                                "fac:ComprehensiveIncomeLossValidation" : {
                                    "Name" : "fac:ComprehensiveIncomeLossValidation",
                                    "Label" : "[IS9] ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest"
                                },
                                "fac:ComprehensiveIncomeLossValidation2" : {
                                    "Name" : "fac:ComprehensiveIncomeLossValidation2",
                                    "Label" : "[IS10] ComprehensiveIncomeLoss= NetIncomeLoss + OtherComprehensiveIncomeLoss"
                                },
                                "fac:OperatingIncomeLossValidation" : {
                                    "Name" : "fac:OperatingIncomeLossValidation",
                                    "Label" : "[IS2] OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses"
                                },
                                "fac:OperatingIncomeLossValidation2" : {
                                    "Name" : "fac:OperatingIncomeLossValidation2",
                                    "Label" : "[IS11] OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses"
                                },
                                "fac:Validations" : {
                                    "Name" : "fac:Validations",
                                    "Label" : "Fact Validation Rule Results [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:LiabilitiesAndEquityValidation" : {
                                    "Name" : "fac:LiabilitiesAndEquityValidation",
                                    "Label" : "[BS5] LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity"
                                },
                                "fac:LiabilitiesValidation" : {
                                    "Name" : "fac:LiabilitiesValidation",
                                    "Label" : "[BS4] Liabilities = CurrentLiabilities + NoncurrentLiabilities"
                                },
                                "fac:AssetsValidation2" : {
                                    "Name" : "fac:AssetsValidation2",
                                    "Label" : "[BS3] Assets = CurrentAssets + NoncurrentAssets"
                                },
                                "fac:AssetsValidation" : {
                                    "Name" : "fac:AssetsValidation",
                                    "Label" : "[BS2] Assets = LiabilitiesAndEquity"
                                },
                                "fac:EquityValidation" : {
                                    "Name" : "fac:EquityValidation",
                                    "Label" : "[BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest"
                                },
                                "fac:NetCashFlowValidation" : {
                                    "Name" : "fac:NetCashFlowValidation",
                                    "Label" : "[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]"
                                },
                                "fac:NetCashFlowContinuingValidation" : {
                                    "Name" : "fac:NetCashFlowContinuingValidation",
                                    "Label" : "[CF2] NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing"
                                },
                                "fac:NetCashFlowDiscontinuedValidation" : {
                                    "Name" : "fac:NetCashFlowDiscontinuedValidation",
                                    "Label" : "[CF3] NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued"
                                },
                                "fac:NetCashFlowFromOperatingActivitiesValidation" : {
                                    "Name" : "fac:NetCashFlowFromOperatingActivitiesValidation",
                                    "Label" : "[CF4] NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued"
                                },
                                "fac:NetCashFlowFromInvestingActivitiesValidation" : {
                                    "Name" : "fac:NetCashFlowFromInvestingActivitiesValidation",
                                    "Label" : "[CF5] NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued"
                                },
                                "fac:NetCashFlowFromFinancingActivitiesValidation" : {
                                    "Name" : "fac:NetCashFlowFromFinancingActivitiesValidation",
                                    "Label" : "[CF6] NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued"
                                },
                                "fac:FundamentalAccountingConceptsLineItems" : {
                                    "Name" : "fac:FundamentalAccountingConceptsLineItems",
                                    "Label" : "Fundamental Accounting Concepts [Line Items]",
                                    "IsAbstract" : true
                                },
                                "fac:FundamentalAccountingConceptsHierarchy" : {
                                    "Name" : "fac:FundamentalAccountingConceptsHierarchy",
                                    "Label" : "Fundamental Accounting Concepts [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:GeneralInformationHierarchy" : {
                                    "Name" : "fac:GeneralInformationHierarchy",
                                    "Label" : "General Information [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:EntityRegistrantName" : {
                                    "Name" : "fac:EntityRegistrantName",
                                    "Label" : "Entity Registrant Name"
                                },
                                "fac:EntityCentralIndexKey" : {
                                    "Name" : "fac:EntityCentralIndexKey",
                                    "Label" : "Central Index Key (CIK)"
                                },
                                "fac:EntityFilerCategory" : {
                                    "Name" : "fac:EntityFilerCategory",
                                    "Label" : "Entity Filer Category"
                                },
                                "fac:TradingSymbol" : {
                                    "Name" : "fac:TradingSymbol",
                                    "Label" : "Trading Symbol"
                                },
                                "fac:FiscalYearEnd" : {
                                    "Name" : "fac:FiscalYearEnd",
                                    "Label" : "Fiscal Year End"
                                },
                                "fac:FiscalYear" : {
                                    "Name" : "fac:FiscalYear",
                                    "Label" : "Fiscal Year"
                                },
                                "fac:FiscalPeriod" : {
                                    "Name" : "fac:FiscalPeriod",
                                    "Label" : "Fiscal Period"
                                },
                                "fac:DocumentType" : {
                                    "Name" : "fac:DocumentType",
                                    "Label" : "Document Type"
                                },
                                "fac:BalanceSheetDate" : {
                                    "Name" : "fac:BalanceSheetDate",
                                    "Label" : "Balance Sheet Date"
                                },
                                "fac:IncomeStatementStartPeriodYearToDate" : {
                                    "Name" : "fac:IncomeStatementStartPeriodYearToDate",
                                    "Label" : "Income Statement Start of Period"
                                },
                                "fac:BalanceSheetFormat" : {
                                    "Name" : "fac:BalanceSheetFormat",
                                    "Label" : "Balance Sheet Format"
                                },
                                "fac:IncomeStatementFormat" : {
                                    "Name" : "fac:IncomeStatementFormat",
                                    "Label" : "Income Statement Format"
                                },
                                "fac:NatureOfOperations" : {
                                    "Name" : "fac:NatureOfOperations",
                                    "Label" : "Nature of Operations"
                                },
                                "fac:BalanceSheetHierarchy" : {
                                    "Name" : "fac:BalanceSheetHierarchy",
                                    "Label" : "Balance Sheet [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:CurrentAssets" : {
                                    "Name" : "fac:CurrentAssets",
                                    "Label" : "Current Assets"
                                },
                                "fac:NoncurrentAssets" : {
                                    "Name" : "fac:NoncurrentAssets",
                                    "Label" : "Noncurrent Assets"
                                },
                                "fac:Assets" : {
                                    "Name" : "fac:Assets",
                                    "Label" : "Assets"
                                },
                                "fac:NoncurrentLiabilities" : {
                                    "Name" : "fac:NoncurrentLiabilities",
                                    "Label" : "Noncurrent Liabilities"
                                },
                                "fac:CurrentLiabilities" : {
                                    "Name" : "fac:CurrentLiabilities",
                                    "Label" : "Current Liabilities"
                                },
                                "fac:Liabilities" : {
                                    "Name" : "fac:Liabilities",
                                    "Label" : "Liabilities"
                                },
                                "fac:CommitmentsAndContingencies" : {
                                    "Name" : "fac:CommitmentsAndContingencies",
                                    "Label" : "Commitments and Contingencies"
                                },
                                "fac:TemporaryEquity" : {
                                    "Name" : "fac:TemporaryEquity",
                                    "Label" : "Temporary Equity"
                                },
                                "fac:EquityAttributableToParent" : {
                                    "Name" : "fac:EquityAttributableToParent",
                                    "Label" : "Equity Attributable to Parent"
                                },
                                "fac:EquityAttributableToNoncontrollingInterest" : {
                                    "Name" : "fac:EquityAttributableToNoncontrollingInterest",
                                    "Label" : "Equity Attributable to Noncontrolling Interest"
                                },
                                "fac:RedeemableNoncontrollingInterest" : {
                                    "Name" : "fac:RedeemableNoncontrollingInterest",
                                    "Label" : "Redeemable Noncontrolling Interest"
                                },
                                "fac:Equity" : {
                                    "Name" : "fac:Equity",
                                    "Label" : "Equity"
                                },
                                "fac:LiabilitiesAndEquity" : {
                                    "Name" : "fac:LiabilitiesAndEquity",
                                    "Label" : "Liabilities and Equity"
                                },
                                "fac:IncomeStatementHierarchy" : {
                                    "Name" : "fac:IncomeStatementHierarchy",
                                    "Label" : "Income Statement [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:Revenues" : {
                                    "Name" : "fac:Revenues",
                                    "Label" : "Revenues"
                                },
                                "fac:CostOfRevenue" : {
                                    "Name" : "fac:CostOfRevenue",
                                    "Label" : "Cost of Revenues"
                                },
                                "fac:GrossProfit" : {
                                    "Name" : "fac:GrossProfit",
                                    "Label" : "Gross Profit"
                                },
                                "fac:OperatingExpenses" : {
                                    "Name" : "fac:OperatingExpenses",
                                    "Label" : "Operating Expenses"
                                },
                                "fac:CostsAndExpenses" : {
                                    "Name" : "fac:CostsAndExpenses",
                                    "Label" : "Costs and Expenses"
                                },
                                "fac:OtherOperatingIncomeExpenses" : {
                                    "Name" : "fac:OtherOperatingIncomeExpenses",
                                    "Label" : "Other Operating Income (Expenses)"
                                },
                                "fac:ResearchAndDevelopment" : {
                                    "Name" : "fac:ResearchAndDevelopment",
                                    "Label" : "Research and Development"
                                },
                                "fac:OperatingIncomeLoss" : {
                                    "Name" : "fac:OperatingIncomeLoss",
                                    "Label" : "Operating Income (Loss)"
                                },
                                "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense" : {
                                    "Name" : "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense",
                                    "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense"
                                },
                                "fac:NonoperatingIncomeLoss" : {
                                    "Name" : "fac:NonoperatingIncomeLoss",
                                    "Label" : "Nonoperating Income (Loss)"
                                },
                                "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments" : {
                                    "Name" : "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments",
                                    "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments"
                                },
                                "fac:InterestAndDebtExpense" : {
                                    "Name" : "fac:InterestAndDebtExpense",
                                    "Label" : "Interest and Debt Expense"
                                },
                                "fac:IncomeLossBeforeEquityMethodInvestments" : {
                                    "Name" : "fac:IncomeLossBeforeEquityMethodInvestments",
                                    "Label" : "Income (Loss) Before Equity Method Investments"
                                },
                                "fac:IncomeLossFromEquityMethodInvestments" : {
                                    "Name" : "fac:IncomeLossFromEquityMethodInvestments",
                                    "Label" : "Income (Loss) from Equity Method Investments"
                                },
                                "fac:IncomeLossFromContinuingOperationsBeforeTax" : {
                                    "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTax",
                                    "Label" : "Income (Loss) from Continuing Operations Before Tax"
                                },
                                "fac:IncomeTaxExpenseBenefit" : {
                                    "Name" : "fac:IncomeTaxExpenseBenefit",
                                    "Label" : "Income Tax Expense (Benefit)"
                                },
                                "fac:IncomeLossFromContinuingOperationsAfterTax" : {
                                    "Name" : "fac:IncomeLossFromContinuingOperationsAfterTax",
                                    "Label" : "Income (Loss) from Continuing Operations After Tax"
                                },
                                "fac:IncomeLossFromDiscontinuedOperationsNetOfTax" : {
                                    "Name" : "fac:IncomeLossFromDiscontinuedOperationsNetOfTax",
                                    "Label" : "Income (Loss) from Discontinued Operations, Net of Tax"
                                },
                                "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax" : {
                                    "Name" : "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax",
                                    "Label" : "Extraordinary Items of Income (Expense), Net of Tax"
                                },
                                "fac:NetIncomeLoss" : {
                                    "Name" : "fac:NetIncomeLoss",
                                    "Label" : "Net Income (Loss)"
                                },
                                "fac:NetIncomeLossAttributableToParent" : {
                                    "Name" : "fac:NetIncomeLossAttributableToParent",
                                    "Label" : "Net Income Attributable to Parent"
                                },
                                "fac:NetIncomeLossAttributableToNoncontrollingInterest" : {
                                    "Name" : "fac:NetIncomeLossAttributableToNoncontrollingInterest",
                                    "Label" : "Net Income Attributable to Noncontrolling Interest"
                                },
                                "fac:PreferredStockDividendsAndOtherAdjustments" : {
                                    "Name" : "fac:PreferredStockDividendsAndOtherAdjustments",
                                    "Label" : "Preferred Stock Dividends and Other Adjustments"
                                },
                                "fac:NetIncomeLossAvailableToCommonStockholdersBasic" : {
                                    "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasic",
                                    "Label" : "Net Income (Loss) Available to Common Stockholders, Basic"
                                },
                                "fac:StatementComprehensiveIncomeHierarchy" : {
                                    "Name" : "fac:StatementComprehensiveIncomeHierarchy",
                                    "Label" : "Statement of Comprehensive Income [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:OtherComprehensiveIncomeLoss" : {
                                    "Name" : "fac:OtherComprehensiveIncomeLoss",
                                    "Label" : "Other Comprehensive Income (Loss)"
                                },
                                "fac:ComprehensiveIncomeLoss" : {
                                    "Name" : "fac:ComprehensiveIncomeLoss",
                                    "Label" : "Comprehensive Income (Loss)"
                                },
                                "fac:ComprehensiveIncomeLossAttributableToParent" : {
                                    "Name" : "fac:ComprehensiveIncomeLossAttributableToParent",
                                    "Label" : "Comprehensive Income (Loss) Attributable to Parent"
                                },
                                "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest" : {
                                    "Name" : "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
                                    "Label" : "Comprehensive Income (Loss) Attributable to Noncontrolling Interest"
                                },
                                "fac:CashFlowStatementHierarchy" : {
                                    "Name" : "fac:CashFlowStatementHierarchy",
                                    "Label" : "Cash Flow Statement [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:NetCashFlowFromOperatingActivitiesContinuing" : {
                                    "Name" : "fac:NetCashFlowFromOperatingActivitiesContinuing",
                                    "Label" : "Net Cash Flow from Operating Activities, Continuing"
                                },
                                "fac:NetCashFlowFromOperatingActivitiesDiscontinued" : {
                                    "Name" : "fac:NetCashFlowFromOperatingActivitiesDiscontinued",
                                    "Label" : "Net Cash Flow from Operating Activities, Discontinued"
                                },
                                "fac:NetCashFlowFromOperatingActivities" : {
                                    "Name" : "fac:NetCashFlowFromOperatingActivities",
                                    "Label" : "Net Cash Flow from Operating Activities"
                                },
                                "fac:NetCashFlowFromInvestingActivitiesContinuing" : {
                                    "Name" : "fac:NetCashFlowFromInvestingActivitiesContinuing",
                                    "Label" : "Net Cash Flow from Investing Activities, Continuing"
                                },
                                "fac:NetCashFlowFromInvestingActivitiesDiscontinued" : {
                                    "Name" : "fac:NetCashFlowFromInvestingActivitiesDiscontinued",
                                    "Label" : "Net Cash Flow from Investing Activities, Discontinued"
                                },
                                "fac:NetCashFlowFromInvestingActivities" : {
                                    "Name" : "fac:NetCashFlowFromInvestingActivities",
                                    "Label" : "Net Cash Flow from Investing Activities"
                                },
                                "fac:NetCashFlowFromFinancingActivitiesContinuing" : {
                                    "Name" : "fac:NetCashFlowFromFinancingActivitiesContinuing",
                                    "Label" : "Net Cash Flow from Financing Activities, Continuing"
                                },
                                "fac:NetCashFlowFromFinancingActivitiesDiscontinued" : {
                                    "Name" : "fac:NetCashFlowFromFinancingActivitiesDiscontinued",
                                    "Label" : "Net Cash Flow from Financing Activities, Discontinued"
                                },
                                "fac:NetCashFlowFromFinancingActivities" : {
                                    "Name" : "fac:NetCashFlowFromFinancingActivities",
                                    "Label" : "Net Cash Flow from Financing Activities"
                                },
                                "fac:ExchangeGainsLosses" : {
                                    "Name" : "fac:ExchangeGainsLosses",
                                    "Label" : "Exchange Gains (Losses)"
                                },
                                "fac:NetCashFlow" : {
                                    "Name" : "fac:NetCashFlow",
                                    "Label" : "Net Cash Flow"
                                },
                                "fac:NetCashFlowContinuing" : {
                                    "Name" : "fac:NetCashFlowContinuing",
                                    "Label" : "Net Cash Flow, Continuing"
                                },
                                "fac:NetCashFlowDiscontinued" : {
                                    "Name" : "fac:NetCashFlowDiscontinued",
                                    "Label" : "Net Cash Flow, Discontinued"
                                },
                                "fac:KeyRatiosHierarchy" : {
                                    "Name" : "fac:KeyRatiosHierarchy",
                                    "Label" : "Key Ratios [Hierarchy]",
                                    "IsAbstract" : true
                                },
                                "fac:ReturnOnEquity" : {
                                    "Name" : "fac:ReturnOnEquity",
                                    "Label" : "Return on Equity (ROE)"
                                },
                                "fac:ReturnOnAssets" : {
                                    "Name" : "fac:ReturnOnAssets",
                                    "Label" : "Return on Assets (ROA)"
                                },
                                "fac:ReturnOnSales" : {
                                    "Name" : "fac:ReturnOnSales",
                                    "Label" : "Return on Sales (ROS)"
                                },
                                "fac:SustainableGrowthRate" : {
                                    "Name" : "fac:SustainableGrowthRate",
                                    "Label" : "Sustainable Growth Rate (SGR)"
                                }
                            }
                        }
                    }
                },
                "xbrl:Period" : {
                    "Name" : "xbrl:Period",
                    "Label" : "Implicit XBRL Period Dimension"
                },
                "xbrl:Entity" : {
                    "Name" : "xbrl:Entity",
                    "Label" : "Reporting Entity",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "DomainRestriction" : {
                        "Name" : "xbrl:EntityDomain",
                        "Label" : "Entity Domain",
                        "Enumeration" : [ "http://www.sec.gov/CIK 0001403161", "http://www.sec.gov/CIK 0000004962", "http://www.sec.gov/CIK 0000019617", "http://www.sec.gov/CIK 0000030554", "http://www.sec.gov/CIK 0000034088", "http://www.sec.gov/CIK 0000040545", "http://www.sec.gov/CIK 0000066740", "http://www.sec.gov/CIK 0000078003", "http://www.sec.gov/CIK 0000080424", "http://www.sec.gov/CIK 0000093410", "http://www.sec.gov/CIK 0000101829", "http://www.sec.gov/CIK 0000310158", "http://www.sec.gov/CIK 0000320187", "http://www.sec.gov/CIK 0000354950", "http://www.sec.gov/CIK 0000732712", "http://www.sec.gov/CIK 0000732717", "http://www.sec.gov/CIK 0000789019", "http://www.sec.gov/CIK 0000858877", "http://www.sec.gov/CIK 0000886982", "http://www.sec.gov/CIK 0001001039", "http://www.sec.gov/CIK 0000012927", "http://www.sec.gov/CIK 0000018230", "http://www.sec.gov/CIK 0000021344", "http://www.sec.gov/CIK 0000050863", "http://www.sec.gov/CIK 0000051143", "http://www.sec.gov/CIK 0000063908", "http://www.sec.gov/CIK 0000086312", "http://www.sec.gov/CIK 0000104169", "http://www.sec.gov/CIK 0000200406", "http://www.sec.gov/CIK 0000731766" ]
                    }
                },
                "dei:LegalEntityAxis" : {
                    "Name" : "dei:LegalEntityAxis",
                    "Label" : "Legal Entity Dimension",
                    "Default" : "sec:DefaultLegalEntity",
                    "Domains" : {
                        "dei:LegalEntityAxisDomain" : {
                            "Name" : "dei:LegalEntityAxisDomain",
                            "Label" : "Implicit dei:LegalEntityAxis Domain",
                            "Members" : {
                                "sec:DefaultLegalEntity" : {
                                    "Name" : "sec:DefaultLegalEntity"
                                }
                            }
                        }
                    }
                },
                "xbrl:Unit" : {
                    "Name" : "xbrl:Unit",
                    "Label" : "Unit",
                    "Default" : "xbrl:NonNumeric"
                },
                "sec:Accepted" : {
                    "Name" : "sec:Accepted",
                    "Label" : "Acceptance Date"
                },
                "sec:Archive" : {
                    "Name" : "sec:Archive",
                    "Label" : "Archive ID"
                },
                "sec:FiscalYear" : {
                    "Name" : "sec:FiscalYear",
                    "Label" : "Fiscal Year",
                    "Kind" : "TypedDimension",
                    "Type" : "integer",
                    "DomainRestriction" : {
                        "Name" : "sec:FiscalYearDomain",
                        "Label" : "Fiscal Year Domain",
                        "Enumeration" : [ 2013 ]
                    }
                },
                "sec:FiscalPeriod" : {
                    "Name" : "sec:FiscalPeriod",
                    "Label" : "Fiscal Period",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "DomainRestriction" : {
                        "Name" : "sec:FiscalPeriodDomain",
                        "Label" : "Fiscal Period Domain",
                        "Enumeration" : [ "FY" ]
                    }
                }
            }
        }
    },
    "DefinitionModels" : [ {
        "ModelKind" : "DefinitionModel",
        "Labels" : [ "Fundamental Accounting Concepts" ],
        "Parameters" : {

        },
        "Breakdowns" : {
            "x" : [ {
                "BreakdownLabels" : [ "Reporting Entity Breakdown" ],
                "BreakdownTrees" : [ {
                    "Kind" : "Rule",
                    "Abstract" : true,
                    "Labels" : [ "Reporting Entity [Axis]" ],
                    "Children" : [ {
                        "Kind" : "Aspect",
                        "Aspect" : "xbrl:Entity"
                    } ]
                } ]
            }, {
                "BreakdownLabels" : [ "Fiscal Year Breakdown" ],
                "BreakdownTrees" : [ {
                    "Kind" : "Rule",
                    "Abstract" : true,
                    "Labels" : [ "Fiscal Year [Axis]" ],
                    "Children" : [ {
                        "Kind" : "Aspect",
                        "Aspect" : "sec:FiscalYear"
                    } ]
                } ]
            }, {
                "BreakdownLabels" : [ "Fiscal Period Breakdown" ],
                "BreakdownTrees" : [ {
                    "Kind" : "Rule",
                    "Abstract" : true,
                    "Labels" : [ "Fiscal Period [Axis]" ],
                    "Children" : [ {
                        "Kind" : "Aspect",
                        "Aspect" : "sec:FiscalPeriod"
                    } ]
                } ]
            } ],
            "y" : [ {
                "BreakdownLabels" : [ "Breakdown on concepts" ],
                "BreakdownTrees" : [ {
                    "Kind" : "ConceptRelationship",
                    "LinkName" : "link:presentationLink",
                    "LinkRole" : "http://xbrl.io/fundamental-accounting-concepts",
                    "ArcName" : "link:presentationArc",
                    "ArcRole" : "http://www.xbrl.org/2003/arcrole/parent-child",
                    "RelationshipSource" : "fac:FundamentalAccountingConceptsLineItems",
                    "FormulaAxis" : "descendant",
                    "Generations" : 0
                } ]
            } ]
        },
        "TableFilters" : {

        }
    } ],
    "Rules" : [ {
        "Id" : "BS2",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[BS2] Assets = LiabilitiesAndEquity",
        "Description" : "Rule to validate Assets (fac:Assets). It also creates a new fact (fac:AssetsValidation) that contains the validation result.",
        "ComputableConcepts" : [ "fac:AssetsValidation" ],
        "DependsOn" : [ "fac:Assets", "fac:LiabilitiesAndEquity" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:AssetsValidation\", \"fac:Assets\", \"fac:LiabilitiesAndEquity\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $AssetsValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:AssetsValidation\"]\nlet $Assets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $LiabilitiesAndEquity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquity\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($AssetsValidation) return $AssetsValidation\n  case (exists($Assets) and true)\n  return\n    let $computed-value := rules:decimal-value($Assets) eq rules:decimal-value($LiabilitiesAndEquity)\n    let $audit-trail-message := \n         rules:fact-trail($Assets, \"Assets\") || \" = \" || rules:fact-trail($LiabilitiesAndEquity, \"LiabilitiesAndEquity\")\n  let $source-facts := ($AssetsValidation, $Assets, $LiabilitiesAndEquity)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Assets,\n            \"fac:AssetsValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:AssetsValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $Assets,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:Assets" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets = LiabilitiesAndEquity"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "BS3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[BS3] Assets = CurrentAssets + NoncurrentAssets",
        "Description" : "Rule to validate Assets (fac:Assets). It also creates a new fact (fac:AssetsValidation2) that contains the validation result.",
        "ComputableConcepts" : [ "fac:AssetsValidation2" ],
        "DependsOn" : [ "fac:Assets", "fac:CurrentAssets", "fac:NoncurrentAssets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:AssetsValidation2\", \"fac:Assets\", \"fac:CurrentAssets\", \"fac:NoncurrentAssets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $AssetsValidation2 as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:AssetsValidation2\"]\nlet $Assets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $CurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentAssets\"]\nlet $NoncurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentAssets\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($AssetsValidation2) return $AssetsValidation2\n  case (exists($Assets) and true)\n  return\n    let $computed-value := rules:decimal-value($Assets) eq rules:decimal-value($CurrentAssets) + rules:decimal-value($NoncurrentAssets)\n    let $audit-trail-message := \n         rules:fact-trail($Assets, \"Assets\") || \" = \" || rules:fact-trail($CurrentAssets, \"CurrentAssets\") || \" + \" || rules:fact-trail($NoncurrentAssets, \"NoncurrentAssets\")\n  let $source-facts := ($AssetsValidation2, $Assets, $CurrentAssets, $NoncurrentAssets)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Assets,\n            \"fac:AssetsValidation2\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:AssetsValidation2\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $Assets,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:Assets" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets = CurrentAssets + NoncurrentAssets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "bs_BalanceSheetFormat",
        "Type" : "xbrl28:formula",
        "Label" : "Balance Sheet Format imputation",
        "Formula" : "for $facts in facts:facts-for-internal(( \"fac:BalanceSheetFormat\", \"fac:DocumentType\", \"fac:CurrentAssets\", \"fac:NoncurrentAssets\", \"fac:NoncurrentLiabilities\", \"fac:CurrentLiabilities\"), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) let $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1] group by $canonical-filter-string := facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", $facts:PERIOD, $facts:UNIT, \"Balance\")), $aligned-period let $BalanceSheetFormat as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:BalanceSheetFormat\"] let $DocumentType as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:DocumentType\"] let $CurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentAssets\"] let $NoncurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentAssets\"] let $NoncurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentLiabilities\"] let $CurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentLiabilities\"] return switch (true) case exists($BalanceSheetFormat) return $BalanceSheetFormat case(exists($DocumentType)) return let $computed-value := if (rules:decimal-value($CurrentAssets) eq 0 and rules:decimal-value($NoncurrentAssets) eq 0 and rules:decimal-value($NoncurrentLiabilities) eq 0 and rules:decimal-value($CurrentLiabilities) eq 0) then \"Unclassified\" else \"Classified\" let $audit-trail-message := rules:fact-trail({ \"Aspects\" : { \"xbrl:Concept\" : \"fac:BalanceSheetFormat\" }, Value: $computed-value , Type: \"NonNumericValue\" }) || \" = \" || $computed-value || \" (because \" || rules:fact-trail($CurrentAssets, \"fac:CurrentAssets\") || \", \" || rules:fact-trail($NoncurrentAssets, \"fac:NoncurrentAssets\") || \", \" || rules:fact-trail($NoncurrentLiabilities, \"fac:NoncurrentLiabilities\") || \", \" || rules:fact-trail($CurrentLiabilities, \"fac:CurrentLiabilities\") || \")\" let $source-facts := ( $CurrentAssets, $NoncurrentAssets, $NoncurrentLiabilities, $CurrentLiabilities) return copy $newfact := rules:create-computed-fact( ($DocumentType, $source-facts)[1], \"fac:BalanceSheetFormat\", $computed-value, $rule, $audit-trail-message, $source-facts, $options) modify ( replace value of json $newfact(\"Type\") with \"NonNumericValue\" ) return $newfact default return ()",
        "ComputableConcepts" : [ "fac:BalanceSheetFormat" ],
        "DependsOn" : [ "fac:DocumentType", "fac:CurrentAssets", "fac:NoncurrentAssets", "fac:NoncurrentLiabilities", "fac:CurrentLiabilities" ]
    }, {
        "Id" : "a3a832ba-ff2e-471f-899f-115eb415f8b2",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Comprehensive Income (Loss)",
        "Description" : "Rule to compute Comprehensive Income (Loss) (fac:ComprehensiveIncomeLoss).",
        "ComputableConcepts" : [ "fac:ComprehensiveIncomeLoss" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:ComprehensiveIncomeLossAttributableToParent", "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest", "fac:OtherComprehensiveIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ComprehensiveIncomeLoss\", \"fac:NetIncomeLoss\", \"fac:ComprehensiveIncomeLossAttributableToParent\", \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\", \"fac:OtherComprehensiveIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $ComprehensiveIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $ComprehensiveIncomeLossAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToParent\"]\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\"]\nlet $OtherComprehensiveIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherComprehensiveIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ComprehensiveIncomeLoss) return $ComprehensiveIncomeLoss\n  case (exists($NetIncomeLoss) and (not((not(exists($NetIncomeLoss)))) and not((not(exists($ComprehensiveIncomeLossAttributableToParent)))) and (rules:decimal-value($NetIncomeLoss) - rules:decimal-value($ComprehensiveIncomeLossAttributableToParent) eq 0) and (rules:decimal-value($ComprehensiveIncomeLossAttributableToNoncontrollingInterest) eq 0) and (rules:decimal-value($OtherComprehensiveIncomeLoss) eq 0)))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ComprehensiveIncomeLoss\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\")\n  let $source-facts := ($ComprehensiveIncomeLoss, $NetIncomeLoss, $ComprehensiveIncomeLossAttributableToParent, $ComprehensiveIncomeLossAttributableToNoncontrollingInterest, $OtherComprehensiveIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLoss,\n            \"fac:ComprehensiveIncomeLoss\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:ComprehensiveIncomeLoss\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetIncomeLoss)),\n           not(isblank(ComprehensiveIncomeLossAttributableToParent)),\n           (NetIncomeLoss-ComprehensiveIncomeLossAttributableToParent=0),\n           (ComprehensiveIncomeLossAttributableToNoncontrollingInterest=0),\n           (OtherComprehensiveIncomeLoss=0))",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "85c0c5be-dfdf-4da7-ae99-c006e87eba15",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Comprehensive Income (Loss) Attributable to Parent",
        "Description" : "Rule to compute Comprehensive Income (Loss) Attributable to Parent (fac:ComprehensiveIncomeLossAttributableToParent).",
        "ComputableConcepts" : [ "fac:ComprehensiveIncomeLossAttributableToParent" ],
        "DependsOn" : [ "fac:ComprehensiveIncomeLoss", "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest", "fac:IncomeLossBeforeEquityMethodInvestments", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ComprehensiveIncomeLossAttributableToParent\", \"fac:ComprehensiveIncomeLoss\", \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\", \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $ComprehensiveIncomeLossAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToParent\"]\nlet $ComprehensiveIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\"]\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ComprehensiveIncomeLossAttributableToParent) return $ComprehensiveIncomeLossAttributableToParent\n  case (exists($ComprehensiveIncomeLoss) and (not((not(exists($ComprehensiveIncomeLoss)))) and not(exists($ComprehensiveIncomeLossAttributableToNoncontrollingInterest))))\n  return\n    let $computed-value := rules:decimal-value($ComprehensiveIncomeLoss)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ComprehensiveIncomeLossAttributableToParent\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($ComprehensiveIncomeLoss, \"ComprehensiveIncomeLoss\")\n  let $source-facts := ($ComprehensiveIncomeLossAttributableToParent, $ComprehensiveIncomeLoss, $ComprehensiveIncomeLossAttributableToNoncontrollingInterest, $IncomeLossBeforeEquityMethodInvestments, $NetIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $ComprehensiveIncomeLoss,\n            \"fac:ComprehensiveIncomeLossAttributableToParent\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:ComprehensiveIncomeLossAttributableToParent\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($ComprehensiveIncomeLoss) and (not(exists($ComprehensiveIncomeLoss)) and not(exists($ComprehensiveIncomeLossAttributableToNoncontrollingInterest)) and not(exists($IncomeLossBeforeEquityMethodInvestments)) and not((not(exists($NetIncomeLoss))))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ComprehensiveIncomeLossAttributableToParent\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\")\n  let $source-facts := ($ComprehensiveIncomeLossAttributableToParent, $ComprehensiveIncomeLoss, $ComprehensiveIncomeLossAttributableToNoncontrollingInterest, $IncomeLossBeforeEquityMethodInvestments, $NetIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $ComprehensiveIncomeLoss,\n            \"fac:ComprehensiveIncomeLossAttributableToParent\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:ComprehensiveIncomeLossAttributableToParent\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(ComprehensiveIncomeLoss)), isblank(ComprehensiveIncomeLossAttributableToNoncontrollingInterest))",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "ComprehensiveIncomeLoss"
        }, {
            "PrereqSrc" : "and(isblank(ComprehensiveIncomeLoss), isblank(ComprehensiveIncomeLossAttributableToNoncontrollingInterest), \n     isblank(IncomeLossBeforeEquityMethodInvestments),not(isblank(NetIncomeLoss)) )",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS9",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS9] ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
        "Description" : "Rule to compute ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest (fac:ComprehensiveIncomeLossValidation).",
        "ComputableConcepts" : [ "fac:ComprehensiveIncomeLossValidation" ],
        "DependsOn" : [ "fac:ComprehensiveIncomeLoss", "fac:ComprehensiveIncomeLossAttributableToParent", "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ComprehensiveIncomeLossValidation\", \"fac:ComprehensiveIncomeLoss\", \"fac:ComprehensiveIncomeLossAttributableToParent\", \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $ComprehensiveIncomeLossValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossValidation\"]\nlet $ComprehensiveIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $ComprehensiveIncomeLossAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToParent\"]\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ComprehensiveIncomeLossValidation) return $ComprehensiveIncomeLossValidation\n  case (exists($ComprehensiveIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($ComprehensiveIncomeLoss) eq rules:decimal-value($ComprehensiveIncomeLossAttributableToParent) + rules:decimal-value($ComprehensiveIncomeLossAttributableToNoncontrollingInterest)\n    let $audit-trail-message := \n         rules:fact-trail($ComprehensiveIncomeLoss, \"ComprehensiveIncomeLoss\") || \" = \" || rules:fact-trail($ComprehensiveIncomeLossAttributableToParent, \"ComprehensiveIncomeLossAttributableToParent\") || \" + \" || rules:fact-trail($ComprehensiveIncomeLossAttributableToNoncontrollingInterest, \"ComprehensiveIncomeLossAttributableToNoncontrollingInterest\")\n  let $source-facts := ($ComprehensiveIncomeLossValidation, $ComprehensiveIncomeLoss, $ComprehensiveIncomeLossAttributableToParent, $ComprehensiveIncomeLossAttributableToNoncontrollingInterest)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $ComprehensiveIncomeLoss,\n            \"fac:ComprehensiveIncomeLossValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:ComprehensiveIncomeLossValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $ComprehensiveIncomeLoss,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:ComprehensiveIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS10",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS10] ComprehensiveIncomeLoss = NetIncomeLoss + OtherComprehensiveIncomeLoss",
        "Description" : "Rule to compute ComprehensiveIncomeLoss = NetIncomeLoss + OtherComprehensiveIncomeLoss(fac:ComprehensiveIncomeLossValidation2).",
        "ComputableConcepts" : [ "fac:ComprehensiveIncomeLossValidation2" ],
        "DependsOn" : [ "fac:ComprehensiveIncomeLoss", "fac:NetIncomeLoss", "fac:OtherComprehensiveIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ComprehensiveIncomeLossValidation2\", \"fac:ComprehensiveIncomeLoss\", \"fac:NetIncomeLoss\", \"fac:OtherComprehensiveIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $ComprehensiveIncomeLossValidation2 as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossValidation2\"]\nlet $ComprehensiveIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $OtherComprehensiveIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherComprehensiveIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ComprehensiveIncomeLossValidation2) return $ComprehensiveIncomeLossValidation2\n  case (exists($ComprehensiveIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($ComprehensiveIncomeLoss) eq rules:decimal-value($NetIncomeLoss) + rules:decimal-value($OtherComprehensiveIncomeLoss)\n    let $audit-trail-message := \n         rules:fact-trail($ComprehensiveIncomeLoss, \"ComprehensiveIncomeLoss\") || \" = \" || rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" + \" || rules:fact-trail($OtherComprehensiveIncomeLoss, \"OtherComprehensiveIncomeLoss\")\n  let $source-facts := ($ComprehensiveIncomeLossValidation2, $ComprehensiveIncomeLoss, $NetIncomeLoss, $OtherComprehensiveIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $ComprehensiveIncomeLoss,\n            \"fac:ComprehensiveIncomeLossValidation2\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:ComprehensiveIncomeLossValidation2\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $ComprehensiveIncomeLoss,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:ComprehensiveIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "ComprehensiveIncomeLoss= NetIncomeLoss + OtherComprehensiveIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "5b6807a6-c57a-4cb5-8d1e-b6ce56162741",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Cost of Revenues",
        "Description" : "Rule to compute Cost of Revenues (fac:CostOfRevenue).",
        "ComputableConcepts" : [ "fac:CostOfRevenue" ],
        "DependsOn" : [ "fac:GrossProfit", "fac:Revenues", "fac:CostOfRevenue", "fac:CostsAndExpenses", "fac:OperatingIncomeLoss", "fac:OperatingExpenses", "fac:OtherOperatingIncomeExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:CostOfRevenue\", \"fac:GrossProfit\", \"fac:Revenues\", \"fac:CostsAndExpenses\", \"fac:OperatingIncomeLoss\", \"fac:OperatingExpenses\", \"fac:OtherOperatingIncomeExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $CostsAndExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"]\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $OperatingExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $OtherOperatingIncomeExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($CostOfRevenue) return $CostOfRevenue\n  case (exists($Revenues) and not((not(exists($GrossProfit)))))\n  return\n    let $computed-value := rules:decimal-value($Revenues) - rules:decimal-value($GrossProfit)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CostOfRevenue\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($GrossProfit, \"GrossProfit\")\n  let $source-facts := ($CostOfRevenue, $GrossProfit, $Revenues, $CostsAndExpenses, $OperatingIncomeLoss, $OperatingExpenses, $OtherOperatingIncomeExpenses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Revenues,\n            \"fac:CostOfRevenue\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Revenues,\n          \"fac:CostOfRevenue\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($CostsAndExpenses) and (not((not(exists($CostOfRevenue)))) and not((not(exists($Revenues)))) and not(exists($GrossProfit)) and (rules:decimal-value($Revenues) - rules:decimal-value($CostsAndExpenses) eq rules:decimal-value($OperatingIncomeLoss)) and not(exists($OperatingExpenses)) and not(exists($OtherOperatingIncomeExpenses))))\n  return\n    let $computed-value := rules:decimal-value($CostsAndExpenses) - rules:decimal-value($OperatingExpenses)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CostOfRevenue\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CostsAndExpenses, \"CostsAndExpenses\") || \" - \" || rules:fact-trail($OperatingExpenses, \"OperatingExpenses\")\n  let $source-facts := ($CostOfRevenue, $GrossProfit, $Revenues, $CostsAndExpenses, $OperatingIncomeLoss, $OperatingExpenses, $OtherOperatingIncomeExpenses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $CostsAndExpenses,\n            \"fac:CostOfRevenue\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $CostsAndExpenses,\n          \"fac:CostOfRevenue\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(GrossProfit))",
            "SourceFact" : [ "Revenues" ],
            "BodySrc" : "Revenues-GrossProfit"
        }, {
            "PrereqSrc" : "and(not(isblank(CostOfRevenue)) , not(isblank(Revenues)), isblank(GrossProfit) , (Revenues - CostsAndExpenses = OperatingIncomeLoss), isblank(OperatingExpenses) , isblank(OtherOperatingIncomeExpenses))",
            "SourceFact" : [ "CostsAndExpenses" ],
            "BodySrc" : "CostsAndExpenses-OperatingExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "58996a6a-1c4a-4b92-9aa0-7b29bd4ff514",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Costs and Expenses",
        "Description" : "Rule to compute Costs and Expenses (fac:CostsAndExpenses).",
        "ComputableConcepts" : [ "fac:CostsAndExpenses" ],
        "DependsOn" : [ "fac:OperatingExpenses", "fac:CostOfRevenue", "fac:GrossProfit", "fac:Revenues", "fac:OperatingIncomeLoss", "fac:OtherOperatingIncomeExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:CostsAndExpenses\", \"fac:OperatingExpenses\", \"fac:CostOfRevenue\", \"fac:GrossProfit\", \"fac:Revenues\", \"fac:OperatingIncomeLoss\", \"fac:OtherOperatingIncomeExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $CostsAndExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"]\nlet $OperatingExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $OtherOperatingIncomeExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($CostsAndExpenses) return $CostsAndExpenses\n  case (exists($CostOfRevenue) and not((not(exists($OperatingExpenses)))))\n  return\n    let $computed-value := rules:decimal-value($CostOfRevenue) + rules:decimal-value($OperatingExpenses)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CostsAndExpenses\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CostOfRevenue, \"CostOfRevenue\") || \" + \" || rules:fact-trail($OperatingExpenses, \"OperatingExpenses\")\n  let $source-facts := ($CostsAndExpenses, $OperatingExpenses, $CostOfRevenue, $GrossProfit, $Revenues, $OperatingIncomeLoss, $OtherOperatingIncomeExpenses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $CostOfRevenue,\n            \"fac:CostsAndExpenses\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $CostOfRevenue,\n          \"fac:CostsAndExpenses\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($Revenues) and (not(exists($GrossProfit)) and not((not(exists($Revenues)))) and not((not(exists($OperatingIncomeLoss)))) and not((not(exists($OtherOperatingIncomeExpenses))))))\n  return\n    let $computed-value := rules:decimal-value($Revenues) - rules:decimal-value($OperatingIncomeLoss) - rules:decimal-value($OtherOperatingIncomeExpenses)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CostsAndExpenses\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" - \" || rules:fact-trail($OtherOperatingIncomeExpenses, \"OtherOperatingIncomeExpenses\")\n  let $source-facts := ($CostsAndExpenses, $OperatingExpenses, $CostOfRevenue, $GrossProfit, $Revenues, $OperatingIncomeLoss, $OtherOperatingIncomeExpenses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Revenues,\n            \"fac:CostsAndExpenses\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Revenues,\n          \"fac:CostsAndExpenses\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(OperatingExpenses))",
            "SourceFact" : [ "CostOfRevenue" ],
            "BodySrc" : "CostOfRevenue+OperatingExpenses"
        }, {
            "PrereqSrc" : "and(isblank(GrossProfit), not(isblank(Revenues)), not(isblank(OperatingIncomeLoss)),not(isblank(OtherOperatingIncomeExpenses)))",
            "SourceFact" : [ "Revenues" ],
            "BodySrc" : "Revenues-OperatingIncomeLoss-OtherOperatingIncomeExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "af746544-e3f6-412e-9046-4e744cf11335",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Current Assets",
        "Description" : "Rule to compute Current Assets (fac:CurrentAssets).",
        "ComputableConcepts" : [ "fac:CurrentAssets" ],
        "DependsOn" : [ "fac:NoncurrentAssets", "fac:Assets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:CurrentAssets\", \"fac:NoncurrentAssets\", \"fac:Assets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $CurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentAssets\"]\nlet $NoncurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentAssets\"]\nlet $Assets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($CurrentAssets) return $CurrentAssets\n  case (exists($Assets) and not((not(exists($NoncurrentAssets)))))\n  return\n    let $computed-value := rules:decimal-value($Assets) - rules:decimal-value($NoncurrentAssets)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CurrentAssets\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Assets, \"Assets\") || \" - \" || rules:fact-trail($NoncurrentAssets, \"NoncurrentAssets\")\n  let $source-facts := ($CurrentAssets, $NoncurrentAssets, $Assets)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Assets,\n            \"fac:CurrentAssets\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:CurrentAssets\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NoncurrentAssets))",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets-NoncurrentAssets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "7ddf85aa-799a-4c2d-b4fe-7b67f0554f9e",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Equity",
        "Description" : "Rule to compute Equity (fac:Equity).",
        "ComputableConcepts" : [ "fac:Equity" ],
        "DependsOn" : [ "fac:EquityAttributableToNoncontrollingInterest", "fac:EquityAttributableToParent" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:Equity\", \"fac:EquityAttributableToNoncontrollingInterest\", \"fac:EquityAttributableToParent\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $Equity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $EquityAttributableToNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToNoncontrollingInterest\"]\nlet $EquityAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToParent\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($Equity) return $Equity\n  case (exists($EquityAttributableToNoncontrollingInterest) and (not((not(exists($EquityAttributableToNoncontrollingInterest)))) and not((not(exists($EquityAttributableToParent))))))\n  return\n    let $computed-value := rules:decimal-value($EquityAttributableToNoncontrollingInterest) + rules:decimal-value($EquityAttributableToParent)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:Equity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($EquityAttributableToNoncontrollingInterest, \"EquityAttributableToNoncontrollingInterest\") || \" + \" || rules:fact-trail($EquityAttributableToParent, \"EquityAttributableToParent\")\n  let $source-facts := ($Equity, $EquityAttributableToNoncontrollingInterest, $EquityAttributableToParent)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $EquityAttributableToNoncontrollingInterest,\n            \"fac:Equity\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $EquityAttributableToNoncontrollingInterest,\n          \"fac:Equity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(EquityAttributableToNoncontrollingInterest)),not(isblank(EquityAttributableToParent)))",
            "SourceFact" : [ "EquityAttributableToNoncontrollingInterest" ],
            "BodySrc" : "EquityAttributableToNoncontrollingInterest+EquityAttributableToParent"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "fc424348-7135-4b1c-8cc4-cf398183d1e0",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Equity Attributable to Parent",
        "Description" : "Rule to compute Equity Attributable to Parent (fac:EquityAttributableToParent).",
        "ComputableConcepts" : [ "fac:EquityAttributableToParent" ],
        "DependsOn" : [ "fac:Equity", "fac:EquityAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:EquityAttributableToParent\", \"fac:Equity\", \"fac:EquityAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $EquityAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToParent\"]\nlet $Equity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $EquityAttributableToNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToNoncontrollingInterest\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($EquityAttributableToParent) return $EquityAttributableToParent\n  case (exists($Equity) and true)\n  return\n    let $computed-value := rules:decimal-value($Equity) - rules:decimal-value($EquityAttributableToNoncontrollingInterest)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:EquityAttributableToParent\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Equity, \"Equity\") || \" - \" || rules:fact-trail($EquityAttributableToNoncontrollingInterest, \"EquityAttributableToNoncontrollingInterest\")\n  let $source-facts := ($EquityAttributableToParent, $Equity, $EquityAttributableToNoncontrollingInterest)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Equity,\n            \"fac:EquityAttributableToParent\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Equity,\n          \"fac:EquityAttributableToParent\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "Equity" ],
            "BodySrc" : "Equity - EquityAttributableToNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "BS1",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest",
        "Description" : "Rule to compute [BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest (fac:EquityValidation).",
        "ComputableConcepts" : [ "fac:EquityValidation" ],
        "DependsOn" : [ "fac:Equity", "fac:EquityAttributableToParent", "fac:EquityAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:EquityValidation\", \"fac:Equity\", \"fac:EquityAttributableToParent\", \"fac:EquityAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $EquityValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityValidation\"]\nlet $Equity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $EquityAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToParent\"]\nlet $EquityAttributableToNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToNoncontrollingInterest\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($EquityValidation) return $EquityValidation\n  case (exists($Equity) and not((not(exists($Equity)))))\n  return\n    let $computed-value := rules:decimal-value($Equity) eq rules:decimal-value($EquityAttributableToParent) + rules:decimal-value($EquityAttributableToNoncontrollingInterest)\n    let $audit-trail-message := \n         rules:fact-trail($Equity, \"Equity\") || \" = \" || rules:fact-trail($EquityAttributableToParent, \"EquityAttributableToParent\") || \" + \" || rules:fact-trail($EquityAttributableToNoncontrollingInterest, \"EquityAttributableToNoncontrollingInterest\")\n  let $source-facts := ($EquityValidation, $Equity, $EquityAttributableToParent, $EquityAttributableToNoncontrollingInterest)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Equity,\n            \"fac:EquityValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Equity,\n          \"fac:EquityValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $Equity,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:Equity" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(Equity))",
            "SourceFact" : [ "Equity" ],
            "BodySrc" : "Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "752e7bc0-858b-4c36-9e82-fb560298e98e",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Gross Profit",
        "Description" : "Rule to compute Gross Profit (fac:GrossProfit).",
        "ComputableConcepts" : [ "fac:GrossProfit" ],
        "DependsOn" : [ "fac:Revenues", "fac:CostOfRevenue" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:GrossProfit\", \"fac:Revenues\", \"fac:CostOfRevenue\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($GrossProfit) return $GrossProfit\n  case (exists($Revenues) and (not((not(exists($Revenues)))) and not((not(exists($CostOfRevenue))))))\n  return\n    let $computed-value := rules:decimal-value($Revenues) - rules:decimal-value($CostOfRevenue)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:GrossProfit\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\")\n  let $source-facts := ($GrossProfit, $Revenues, $CostOfRevenue)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Revenues,\n            \"fac:GrossProfit\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Revenues,\n          \"fac:GrossProfit\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(Revenues)),not(isblank(CostOfRevenue)))",
            "SourceFact" : [ "Revenues" ],
            "BodySrc" : "Revenues-CostOfRevenue"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS1",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS1] GrossProfit = Revenues - CostOfRevenue",
        "Description" : "Rule to compute GrossProfit = Revenues - CostOfRevenue (fac:GrossProfitValidation).",
        "ComputableConcepts" : [ "fac:GrossProfitValidation" ],
        "DependsOn" : [ "fac:GrossProfit", "fac:Revenues", "fac:CostOfRevenue" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:GrossProfitValidation\", \"fac:GrossProfit\", \"fac:Revenues\", \"fac:CostOfRevenue\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $GrossProfitValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfitValidation\"]\nlet $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($GrossProfitValidation) return $GrossProfitValidation\n  case (exists($GrossProfit) and not((not(exists($GrossProfit)))))\n  return\n    let $computed-value := rules:decimal-value($GrossProfit) eq rules:decimal-value($Revenues) - rules:decimal-value($CostOfRevenue)\n    let $audit-trail-message := \n         rules:fact-trail($GrossProfit, \"GrossProfit\") || \" = \" || rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\")\n  let $source-facts := ($GrossProfitValidation, $GrossProfit, $Revenues, $CostOfRevenue)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $GrossProfit,\n            \"fac:GrossProfitValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $GrossProfit,\n          \"fac:GrossProfitValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $GrossProfit,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:GrossProfit" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(GrossProfit))",
            "SourceFact" : [ "GrossProfit" ],
            "BodySrc" : "GrossProfit = Revenues - CostOfRevenue"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "0cf36e1f-fa8d-4007-b083-008c9a2bd589",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Income (Loss) Before Equity Method Investments",
        "Description" : "Rule to compute Income (Loss) Before Equity Method Investments (fac:IncomeLossBeforeEquityMethodInvestments).",
        "ComputableConcepts" : [ "fac:IncomeLossBeforeEquityMethodInvestments" ],
        "DependsOn" : [ "fac:IncomeLossFromContinuingOperationsBeforeTax", "fac:IncomeLossFromEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:IncomeLossFromEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $IncomeLossFromEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossBeforeEquityMethodInvestments) return $IncomeLossBeforeEquityMethodInvestments\n  case (exists($IncomeLossFromContinuingOperationsBeforeTax) and not((not(exists($IncomeLossFromContinuingOperationsBeforeTax)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromContinuingOperationsBeforeTax) - rules:decimal-value($IncomeLossFromEquityMethodInvestments)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:IncomeLossBeforeEquityMethodInvestments\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossFromContinuingOperationsBeforeTax, \"IncomeLossFromContinuingOperationsBeforeTax\") || \" - \" || rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\")\n  let $source-facts := ($IncomeLossBeforeEquityMethodInvestments, $IncomeLossFromContinuingOperationsBeforeTax, $IncomeLossFromEquityMethodInvestments)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $IncomeLossFromContinuingOperationsBeforeTax,\n            \"fac:IncomeLossBeforeEquityMethodInvestments\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $IncomeLossFromContinuingOperationsBeforeTax,\n          \"fac:IncomeLossBeforeEquityMethodInvestments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(IncomeLossFromContinuingOperationsBeforeTax))",
            "SourceFact" : [ "IncomeLossFromContinuingOperationsBeforeTax" ],
            "BodySrc" : "IncomeLossFromContinuingOperationsBeforeTax-IncomeLossFromEquityMethodInvestments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS3] IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense",
        "Description" : "Rule to compute IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense (fac:IncomeLossBeforeEquityMethodInvestmentsValidation).",
        "ComputableConcepts" : [ "fac:IncomeLossBeforeEquityMethodInvestmentsValidation" ],
        "DependsOn" : [ "fac:IncomeLossBeforeEquityMethodInvestments", "fac:OperatingIncomeLoss", "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\", \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:OperatingIncomeLoss\", \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $IncomeLossBeforeEquityMethodInvestmentsValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\"]\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $NonoperatingIncomeLossPlusInterestAndDebtExpense as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossBeforeEquityMethodInvestmentsValidation) return $IncomeLossBeforeEquityMethodInvestmentsValidation\n  case (exists($IncomeLossBeforeEquityMethodInvestments) and not((not(exists($IncomeLossBeforeEquityMethodInvestments)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossBeforeEquityMethodInvestments) eq rules:decimal-value($OperatingIncomeLoss) + rules:decimal-value($NonoperatingIncomeLossPlusInterestAndDebtExpense)\n    let $audit-trail-message := \n         rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\") || \" = \" || rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" + \" || rules:fact-trail($NonoperatingIncomeLossPlusInterestAndDebtExpense, \"NonoperatingIncomeLossPlusInterestAndDebtExpense\")\n  let $source-facts := ($IncomeLossBeforeEquityMethodInvestmentsValidation, $IncomeLossBeforeEquityMethodInvestments, $OperatingIncomeLoss, $NonoperatingIncomeLossPlusInterestAndDebtExpense)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $IncomeLossBeforeEquityMethodInvestments,\n            \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $IncomeLossBeforeEquityMethodInvestments,\n          \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $IncomeLossBeforeEquityMethodInvestments,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:IncomeLossBeforeEquityMethodInvestments" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(IncomeLossBeforeEquityMethodInvestments))",
            "SourceFact" : [ "IncomeLossBeforeEquityMethodInvestments" ],
            "BodySrc" : "IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "7cf0211d-caad-47bd-81e1-cacd6e288ecc",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Income (Loss) from Continuing Operations After Tax",
        "Description" : "Rule to compute Income (Loss) from Continuing Operations After Tax (fac:IncomeLossFromContinuingOperationsAfterTax).",
        "ComputableConcepts" : [ "fac:IncomeLossFromContinuingOperationsAfterTax" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:IncomeLossFromDiscontinuedOperationsNetOfTax", "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossFromContinuingOperationsAfterTax\", \"fac:NetIncomeLoss\", \"fac:IncomeLossFromDiscontinuedOperationsNetOfTax\", \"fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $IncomeLossFromContinuingOperationsAfterTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsAfterTax\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $IncomeLossFromDiscontinuedOperationsNetOfTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromDiscontinuedOperationsNetOfTax\"]\nlet $ExtraordinaryItemsOfIncomeExpenseNetOfTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossFromContinuingOperationsAfterTax) return $IncomeLossFromContinuingOperationsAfterTax\n  case (exists($NetIncomeLoss) and not((not(exists($NetIncomeLoss)))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) - rules:decimal-value($IncomeLossFromDiscontinuedOperationsNetOfTax) - rules:decimal-value($ExtraordinaryItemsOfIncomeExpenseNetOfTax)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:IncomeLossFromContinuingOperationsAfterTax\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" - \" || rules:fact-trail($IncomeLossFromDiscontinuedOperationsNetOfTax, \"IncomeLossFromDiscontinuedOperationsNetOfTax\") || \" - \" || rules:fact-trail($ExtraordinaryItemsOfIncomeExpenseNetOfTax, \"ExtraordinaryItemsOfIncomeExpenseNetOfTax\")\n  let $source-facts := ($IncomeLossFromContinuingOperationsAfterTax, $NetIncomeLoss, $IncomeLossFromDiscontinuedOperationsNetOfTax, $ExtraordinaryItemsOfIncomeExpenseNetOfTax)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLoss,\n            \"fac:IncomeLossFromContinuingOperationsAfterTax\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:IncomeLossFromContinuingOperationsAfterTax\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetIncomeLoss))",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss-IncomeLossFromDiscontinuedOperationsNetOfTax-ExtraordinaryItemsOfIncomeExpenseNetOfTax"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS5",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS5] IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit",
        "Description" : "Rule to compute IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit (fac:IncomeLossFromContinuingOperationsAfterTaxValidation).",
        "ComputableConcepts" : [ "fac:IncomeLossFromContinuingOperationsAfterTaxValidation" ],
        "DependsOn" : [ "fac:IncomeLossFromContinuingOperationsAfterTax", "fac:IncomeLossFromContinuingOperationsBeforeTax", "fac:IncomeTaxExpenseBenefit" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\", \"fac:IncomeLossFromContinuingOperationsAfterTax\", \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:IncomeTaxExpenseBenefit\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $IncomeLossFromContinuingOperationsAfterTaxValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\"]\nlet $IncomeLossFromContinuingOperationsAfterTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsAfterTax\"]\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $IncomeTaxExpenseBenefit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeTaxExpenseBenefit\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossFromContinuingOperationsAfterTaxValidation) return $IncomeLossFromContinuingOperationsAfterTaxValidation\n  case (exists($IncomeLossFromContinuingOperationsAfterTax) and true)\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromContinuingOperationsAfterTax) eq rules:decimal-value($IncomeLossFromContinuingOperationsBeforeTax) - rules:decimal-value($IncomeTaxExpenseBenefit)\n    let $audit-trail-message := \n         rules:fact-trail($IncomeLossFromContinuingOperationsAfterTax, \"IncomeLossFromContinuingOperationsAfterTax\") || \" = \" || rules:fact-trail($IncomeLossFromContinuingOperationsBeforeTax, \"IncomeLossFromContinuingOperationsBeforeTax\") || \" - \" || rules:fact-trail($IncomeTaxExpenseBenefit, \"IncomeTaxExpenseBenefit\")\n  let $source-facts := ($IncomeLossFromContinuingOperationsAfterTaxValidation, $IncomeLossFromContinuingOperationsAfterTax, $IncomeLossFromContinuingOperationsBeforeTax, $IncomeTaxExpenseBenefit)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $IncomeLossFromContinuingOperationsAfterTax,\n            \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $IncomeLossFromContinuingOperationsAfterTax,\n          \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $IncomeLossFromContinuingOperationsAfterTax,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:IncomeLossFromContinuingOperationsAfterTax" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "IncomeLossFromContinuingOperationsAfterTax" ],
            "BodySrc" : "IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "f1a8f202-897e-4978-98f3-c81279f7c767",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Income (Loss) from Continuing Operations Before Tax",
        "Description" : "Rule to compute Income (Loss) from Continuing Operations Before Tax (fac:IncomeLossFromContinuingOperationsBeforeTax).",
        "ComputableConcepts" : [ "fac:IncomeLossFromContinuingOperationsBeforeTax" ],
        "DependsOn" : [ "fac:IncomeLossFromEquityMethodInvestments", "fac:IncomeLossBeforeEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:IncomeLossFromEquityMethodInvestments\", \"fac:IncomeLossBeforeEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $IncomeLossFromEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossFromContinuingOperationsBeforeTax) return $IncomeLossFromContinuingOperationsBeforeTax\n  case (exists($IncomeLossFromEquityMethodInvestments) and (not((not(exists($IncomeLossFromEquityMethodInvestments)))) and not((not(exists($IncomeLossBeforeEquityMethodInvestments))))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromEquityMethodInvestments) + rules:decimal-value($IncomeLossBeforeEquityMethodInvestments)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:IncomeLossFromContinuingOperationsBeforeTax\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\") || \" + \" || rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\")\n  let $source-facts := ($IncomeLossFromContinuingOperationsBeforeTax, $IncomeLossFromEquityMethodInvestments, $IncomeLossBeforeEquityMethodInvestments)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $IncomeLossFromEquityMethodInvestments,\n            \"fac:IncomeLossFromContinuingOperationsBeforeTax\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $IncomeLossFromEquityMethodInvestments,\n          \"fac:IncomeLossFromContinuingOperationsBeforeTax\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(IncomeLossFromEquityMethodInvestments)), not(isblank(IncomeLossBeforeEquityMethodInvestments)))",
            "SourceFact" : [ "IncomeLossFromEquityMethodInvestments" ],
            "BodySrc" : "IncomeLossFromEquityMethodInvestments+IncomeLossBeforeEquityMethodInvestments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS4",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS4] IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments",
        "Description" : "Rule to compute IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments (fac:IncomeLossFromContinuingOperationsBeforeTaxValidation).",
        "ComputableConcepts" : [ "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation" ],
        "DependsOn" : [ "fac:IncomeLossFromContinuingOperationsBeforeTax", "fac:IncomeLossBeforeEquityMethodInvestments", "fac:IncomeLossFromEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\", \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:IncomeLossFromEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $IncomeLossFromContinuingOperationsBeforeTaxValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\"]\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $IncomeLossFromEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossFromContinuingOperationsBeforeTaxValidation) return $IncomeLossFromContinuingOperationsBeforeTaxValidation\n  case (exists($IncomeLossFromContinuingOperationsBeforeTax) and not((not(exists($IncomeLossFromContinuingOperationsBeforeTax)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromContinuingOperationsBeforeTax) eq rules:decimal-value($IncomeLossBeforeEquityMethodInvestments) + rules:decimal-value($IncomeLossFromEquityMethodInvestments)\n    let $audit-trail-message := \n         rules:fact-trail($IncomeLossFromContinuingOperationsBeforeTax, \"IncomeLossFromContinuingOperationsBeforeTax\") || \" = \" || rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\") || \" + \" || rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\")\n  let $source-facts := ($IncomeLossFromContinuingOperationsBeforeTaxValidation, $IncomeLossFromContinuingOperationsBeforeTax, $IncomeLossBeforeEquityMethodInvestments, $IncomeLossFromEquityMethodInvestments)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $IncomeLossFromContinuingOperationsBeforeTax,\n            \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $IncomeLossFromContinuingOperationsBeforeTax,\n          \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $IncomeLossFromContinuingOperationsBeforeTax,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:IncomeLossFromContinuingOperationsBeforeTax" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(IncomeLossFromContinuingOperationsBeforeTax))",
            "SourceFact" : [ "IncomeLossFromContinuingOperationsBeforeTax" ],
            "BodySrc" : "IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "is_IncomeStatementFormat",
        "Type" : "xbrl28:formula",
        "Label" : "Income Statement Format imputation",
        "Formula" : "for $facts in facts:facts-for-internal(( \"fac:IncomeStatementFormat\", \"fac:GrossProfit\", \"fac:CostOfRevenue\", \"fac:Revenues\"), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) group by $canonical-filter-string := if(empty($facts)) then \"\" else facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\")) let $IncomeStatementFormat as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeStatementFormat\"] let $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"] let $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"] let $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"] return switch(true) case exists($IncomeStatementFormat) return $IncomeStatementFormat case exists($Revenues) return let $computed-value := if (rules:decimal-value($GrossProfit) eq 0 and rules:decimal-value($CostOfRevenue) eq 0) then \"Single-step\" else \"Multi-step\" let $audit-trail-message := rules:fact-trail({ \"Aspects\" : { \"xbrl:Concept\" : \"fac:IncomeStatementFormat\" }, Value: $computed-value , Type: \"NonNumericValue\"}) || \" = \" || $computed-value || \" (because \" || rules:fact-trail($GrossProfit, \"GrossProfit\") || \", \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\") || \")\" let $source-facts := ( $GrossProfit, $CostOfRevenue) return copy $newfact := rules:create-computed-fact( ($source-facts, $Revenues)[1], \"fac:IncomeStatementFormat\", $computed-value, $rule, $audit-trail-message, $source-facts, $options) modify ( replace value of json $newfact(\"Type\") with \"NonNumericValue\" ) return $newfact default return ()",
        "ComputableConcepts" : [ "fac:IncomeStatementFormat" ],
        "DependsOn" : [ "fac:GrossProfit", "fac:CostOfRevenue" ]
    }, {
        "Id" : "gi_IncomeStatementStartPeriod",
        "Type" : "xbrl28:formula",
        "Label" : "Income Statement Start Period imputation",
        "Formula" : "for $facts in facts:facts-for-internal(( \"fac:CostOfRevenue\", \"fac:GrossProfit\", \"fac:Revenues\", \"fac:CostsAndExpenses\", \"fac:OperatingIncomeLoss\", \"fac:OtherOperatingIncomeExpenses\", \"fac:OperatingExpenses\"), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) group by $canonical-filter-string := facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\")) let $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"] let $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"] let $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"] let $CostsAndExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"] let $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"] let $OtherOperatingIncomeExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"] let $OperatingExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"] return switch(true) case (exists($facts)) return let $source-fact := $facts[1] let $computed-value := facts:duration-for-fact($source-fact).Start let $audit-trail-message := rules:fact-trail({ \"Aspects\" : { \"xbrl:Concept\" : \"fac:IncomeStatementStartPeriodYearToDate\" }, Value: $computed-value, Type: \"NonNumericValue\" }) || \" = \" || \"facts:duration-for-fact(\" || rules:fact-trail($source-fact) || \").Start\" return copy $newfact := rules:create-computed-fact( $source-fact, \"fac:IncomeStatementStartPeriodYearToDate\", $computed-value, $rule, $audit-trail-message, $source-fact, $options) modify ( replace value of json $newfact(\"Type\") with \"NonNumericValue\" ) return $newfact default return ()",
        "ComputableConcepts" : [ "fac:IncomeStatementStartPeriodYearToDate" ],
        "DependsOn" : [ "fac:GrossProfit", "fac:Revenues", "fac:CostsAndExpenses", "fac:OperatingIncomeLoss", "fac:OtherOperatingIncomeExpenses", "fac:OperatingExpenses" ]
    }, {
        "Id" : "6853bb17-792a-4aa0-8a5e-db3f38675382",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Interest and Debt Expense",
        "Description" : "Rule to compute Interest and Debt Expense (fac:InterestAndDebtExpense).",
        "ComputableConcepts" : [ "fac:InterestAndDebtExpense" ],
        "DependsOn" : [ "fac:OperatingIncomeLoss", "fac:NonoperatingIncomeLoss", "fac:IncomeLossBeforeEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:InterestAndDebtExpense\", \"fac:OperatingIncomeLoss\", \"fac:NonoperatingIncomeLoss\", \"fac:IncomeLossBeforeEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $InterestAndDebtExpense as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:InterestAndDebtExpense\"]\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $NonoperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLoss\"]\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($InterestAndDebtExpense) return $InterestAndDebtExpense\n  case (exists($IncomeLossBeforeEquityMethodInvestments) and (not((not(exists($OperatingIncomeLoss)))) and not((not(exists($NonoperatingIncomeLoss)))) and not((not(exists($IncomeLossBeforeEquityMethodInvestments))))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossBeforeEquityMethodInvestments) - rules:decimal-value($OperatingIncomeLoss) - rules:decimal-value($NonoperatingIncomeLoss)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:InterestAndDebtExpense\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\") || \" - \" || rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" - \" || rules:fact-trail($NonoperatingIncomeLoss, \"NonoperatingIncomeLoss\")\n  let $source-facts := ($InterestAndDebtExpense, $OperatingIncomeLoss, $NonoperatingIncomeLoss, $IncomeLossBeforeEquityMethodInvestments)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $IncomeLossBeforeEquityMethodInvestments,\n            \"fac:InterestAndDebtExpense\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $IncomeLossBeforeEquityMethodInvestments,\n          \"fac:InterestAndDebtExpense\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(OperatingIncomeLoss)), not(isblank(NonoperatingIncomeLoss)), not(isblank(IncomeLossBeforeEquityMethodInvestments)))",
            "SourceFact" : [ "IncomeLossBeforeEquityMethodInvestments" ],
            "BodySrc" : "IncomeLossBeforeEquityMethodInvestments-OperatingIncomeLoss-NonoperatingIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "502dddba-aa21-4b3c-b124-437cf46a9ef5",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Liabilities",
        "Description" : "Rule to compute Liabilities (fac:Liabilities).",
        "ComputableConcepts" : [ "fac:Liabilities" ],
        "DependsOn" : [ "fac:Equity", "fac:LiabilitiesAndEquity", "fac:CommitmentsAndContingencies", "fac:TemporaryEquity", "fac:CurrentLiabilities", "fac:NoncurrentLiabilities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:Liabilities\", \"fac:Equity\", \"fac:LiabilitiesAndEquity\", \"fac:CommitmentsAndContingencies\", \"fac:TemporaryEquity\", \"fac:CurrentLiabilities\", \"fac:NoncurrentLiabilities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $Liabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Liabilities\"]\nlet $Equity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $LiabilitiesAndEquity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquity\"]\nlet $CommitmentsAndContingencies as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CommitmentsAndContingencies\"]\nlet $TemporaryEquity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:TemporaryEquity\"]\nlet $CurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentLiabilities\"]\nlet $NoncurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentLiabilities\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($Liabilities) return $Liabilities\n  case (exists($Equity) and not((not(exists($Equity)))))\n  return\n    let $computed-value := rules:decimal-value($LiabilitiesAndEquity) - (rules:decimal-value($CommitmentsAndContingencies) + rules:decimal-value($TemporaryEquity) + rules:decimal-value($Equity))\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:Liabilities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($LiabilitiesAndEquity, \"LiabilitiesAndEquity\") || \" - \" || \" ( \" || rules:fact-trail($CommitmentsAndContingencies, \"CommitmentsAndContingencies\") || \" + \" || rules:fact-trail($TemporaryEquity, \"TemporaryEquity\") || \" + \" || rules:fact-trail($Equity, \"Equity\") || \" )\"\n  let $source-facts := ($Liabilities, $Equity, $LiabilitiesAndEquity, $CommitmentsAndContingencies, $TemporaryEquity, $CurrentLiabilities, $NoncurrentLiabilities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Equity,\n            \"fac:Liabilities\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Equity,\n          \"fac:Liabilities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($CurrentLiabilities) and (not((not(exists($CurrentLiabilities)))) and not((not(exists($NoncurrentLiabilities))))))\n  return\n    let $computed-value := rules:decimal-value($CurrentLiabilities) + rules:decimal-value($NoncurrentLiabilities)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:Liabilities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CurrentLiabilities, \"CurrentLiabilities\") || \" + \" || rules:fact-trail($NoncurrentLiabilities, \"NoncurrentLiabilities\")\n  let $source-facts := ($Liabilities, $Equity, $LiabilitiesAndEquity, $CommitmentsAndContingencies, $TemporaryEquity, $CurrentLiabilities, $NoncurrentLiabilities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $CurrentLiabilities,\n            \"fac:Liabilities\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $CurrentLiabilities,\n          \"fac:Liabilities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(Equity))",
            "SourceFact" : [ "Equity" ],
            "BodySrc" : "LiabilitiesAndEquity- (CommitmentsAndContingencies+TemporaryEquity+Equity)"
        }, {
            "PrereqSrc" : "and(not(isblank(CurrentLiabilities)),not(isblank(NoncurrentLiabilities)))",
            "SourceFact" : [ "CurrentLiabilities" ],
            "BodySrc" : "CurrentLiabilities+NoncurrentLiabilities"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "7133041c-146b-4605-9382-d21659dbb020",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Liabilities and Equity",
        "Description" : "Rule to compute Liabilities and Equity (fac:LiabilitiesAndEquity).",
        "ComputableConcepts" : [ "fac:LiabilitiesAndEquity" ],
        "DependsOn" : [ "fac:Assets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:LiabilitiesAndEquity\", \"fac:Assets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $LiabilitiesAndEquity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquity\"]\nlet $Assets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($LiabilitiesAndEquity) return $LiabilitiesAndEquity\n  case (exists($Assets) and not((not(exists($Assets)))))\n  return\n    let $computed-value := rules:decimal-value($Assets)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:LiabilitiesAndEquity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Assets, \"Assets\")\n  let $source-facts := ($LiabilitiesAndEquity, $Assets)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Assets,\n            \"fac:LiabilitiesAndEquity\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:LiabilitiesAndEquity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(Assets))",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "BS5",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[BS5] LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity",
        "Description" : "Rule to compute LiabilitiesAndEquity = LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity(fac:LiabilitiesAndEquityValidation).",
        "ComputableConcepts" : [ "fac:LiabilitiesAndEquityValidation" ],
        "DependsOn" : [ "fac:LiabilitiesAndEquity", "fac:Liabilities", "fac:CommitmentsAndContingencies", "fac:TemporaryEquity", "fac:Equity" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:LiabilitiesAndEquityValidation\", \"fac:LiabilitiesAndEquity\", \"fac:Liabilities\", \"fac:CommitmentsAndContingencies\", \"fac:TemporaryEquity\", \"fac:Equity\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $LiabilitiesAndEquityValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquityValidation\"]\nlet $LiabilitiesAndEquity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquity\"]\nlet $Liabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Liabilities\"]\nlet $CommitmentsAndContingencies as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CommitmentsAndContingencies\"]\nlet $TemporaryEquity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:TemporaryEquity\"]\nlet $Equity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($LiabilitiesAndEquityValidation) return $LiabilitiesAndEquityValidation\n  case (exists($LiabilitiesAndEquity) and not((not(exists($LiabilitiesAndEquity)))))\n  return\n    let $computed-value := rules:decimal-value($LiabilitiesAndEquity) eq rules:decimal-value($Liabilities) + rules:decimal-value($CommitmentsAndContingencies) + rules:decimal-value($TemporaryEquity) + rules:decimal-value($Equity)\n    let $audit-trail-message := \n         rules:fact-trail($LiabilitiesAndEquity, \"LiabilitiesAndEquity\") || \" = \" || rules:fact-trail($Liabilities, \"Liabilities\") || \" + \" || rules:fact-trail($CommitmentsAndContingencies, \"CommitmentsAndContingencies\") || \" + \" || rules:fact-trail($TemporaryEquity, \"TemporaryEquity\") || \" + \" || rules:fact-trail($Equity, \"Equity\")\n  let $source-facts := ($LiabilitiesAndEquityValidation, $LiabilitiesAndEquity, $Liabilities, $CommitmentsAndContingencies, $TemporaryEquity, $Equity)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $LiabilitiesAndEquity,\n            \"fac:LiabilitiesAndEquityValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $LiabilitiesAndEquity,\n          \"fac:LiabilitiesAndEquityValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $LiabilitiesAndEquity,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:LiabilitiesAndEquity" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(LiabilitiesAndEquity))",
            "SourceFact" : [ "LiabilitiesAndEquity" ],
            "BodySrc" : "LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "BS4",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[BS4] Liabilities = CurrentLiabilities + NoncurrentLiabilities",
        "Description" : "Rule to compute Liabilities = CurrentLiabilities + NoncurrentLiabilities (fac:LiabilitiesValidation).",
        "ComputableConcepts" : [ "fac:LiabilitiesValidation" ],
        "DependsOn" : [ "fac:Liabilities", "fac:CurrentLiabilities", "fac:NoncurrentLiabilities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:LiabilitiesValidation\", \"fac:Liabilities\", \"fac:CurrentLiabilities\", \"fac:NoncurrentLiabilities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $LiabilitiesValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesValidation\"]\nlet $Liabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Liabilities\"]\nlet $CurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentLiabilities\"]\nlet $NoncurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentLiabilities\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($LiabilitiesValidation) return $LiabilitiesValidation\n  case (exists($Liabilities) and not((not(exists($Liabilities)))))\n  return\n    let $computed-value := rules:decimal-value($Liabilities) eq rules:decimal-value($CurrentLiabilities) + rules:decimal-value($NoncurrentLiabilities)\n    let $audit-trail-message := \n         rules:fact-trail($Liabilities, \"Liabilities\") || \" = \" || rules:fact-trail($CurrentLiabilities, \"CurrentLiabilities\") || \" + \" || rules:fact-trail($NoncurrentLiabilities, \"NoncurrentLiabilities\")\n  let $source-facts := ($LiabilitiesValidation, $Liabilities, $CurrentLiabilities, $NoncurrentLiabilities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Liabilities,\n            \"fac:LiabilitiesValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Liabilities,\n          \"fac:LiabilitiesValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $Liabilities,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:Liabilities" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(Liabilities))",
            "SourceFact" : [ "Liabilities" ],
            "BodySrc" : "Liabilities = CurrentLiabilities + NoncurrentLiabilities"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "290f2141-89a1-4854-89f0-5511ffd1558b",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow",
        "Description" : "Rule to compute Net Cash Flow (fac:NetCashFlow).",
        "ComputableConcepts" : [ "fac:NetCashFlow" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivities", "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromFinancingActivities", "fac:ExchangeGainsLosses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlow\", \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromFinancingActivities\", \"fac:ExchangeGainsLosses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlow as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlow\"]\nlet $NetCashFlowFromOperatingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $NetCashFlowFromInvestingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $NetCashFlowFromFinancingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $ExchangeGainsLosses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ExchangeGainsLosses\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlow) return $NetCashFlow\n  case (exists($NetCashFlowFromOperatingActivities) and (not((not(exists($NetCashFlowFromOperatingActivities)))) and not((not(exists($NetCashFlowFromInvestingActivities)))) and not((not(exists($NetCashFlowFromFinancingActivities)))) and not((not(exists($ExchangeGainsLosses))))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities) + rules:decimal-value($ExchangeGainsLosses)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlow\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" + \" || rules:fact-trail($ExchangeGainsLosses, \"ExchangeGainsLosses\")\n  let $source-facts := ($NetCashFlow, $NetCashFlowFromOperatingActivities, $NetCashFlowFromInvestingActivities, $NetCashFlowFromFinancingActivities, $ExchangeGainsLosses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromOperatingActivities,\n            \"fac:NetCashFlow\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivities,\n          \"fac:NetCashFlow\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromOperatingActivities)), not(isblank(NetCashFlowFromInvestingActivities)), \n     not(isblank(NetCashFlowFromFinancingActivities)), not(isblank(ExchangeGainsLosses)))",
            "SourceFact" : [ "NetCashFlowFromOperatingActivities" ],
            "BodySrc" : "NetCashFlowFromOperatingActivities+NetCashFlowFromInvestingActivities+NetCashFlowFromFinancingActivities+ExchangeGainsLosses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "d7c2ba1a-141f-4035-877b-e4c149478da8",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow, Continuing",
        "Description" : "Rule to compute Net Cash Flow, Continuing (fac:NetCashFlowContinuing).",
        "ComputableConcepts" : [ "fac:NetCashFlowContinuing" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromFinancingActivitiesContinuing" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowContinuing\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivitiesContinuing\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowContinuing\"]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowContinuing) return $NetCashFlowContinuing\n  case (exists($NetCashFlowFromOperatingActivitiesContinuing) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromFinancingActivitiesContinuing)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowContinuing\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesContinuing, \"NetCashFlowFromOperatingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesContinuing, \"NetCashFlowFromInvestingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesContinuing, \"NetCashFlowFromFinancingActivitiesContinuing\")\n  let $source-facts := ($NetCashFlowContinuing, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromFinancingActivitiesContinuing)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromOperatingActivitiesContinuing,\n            \"fac:NetCashFlowContinuing\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivitiesContinuing,\n          \"fac:NetCashFlowContinuing\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowFromOperatingActivitiesContinuing" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesContinuing+NetCashFlowFromInvestingActivitiesContinuing+NetCashFlowFromFinancingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF2",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[CF2] NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing",
        "Description" : "Rule to compute NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing (fac:NetCashFlowContinuingValidation).",
        "ComputableConcepts" : [ "fac:NetCashFlowContinuingValidation" ],
        "DependsOn" : [ "fac:NetCashFlowContinuing", "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromFinancingActivitiesContinuing" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowContinuingValidation\", \"fac:NetCashFlowContinuing\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivitiesContinuing\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowContinuingValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowContinuingValidation\"]\nlet $NetCashFlowContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowContinuing\"]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowContinuingValidation) return $NetCashFlowContinuingValidation\n  case (exists($NetCashFlowContinuing) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowContinuing) eq rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromFinancingActivitiesContinuing)\n    let $audit-trail-message := \n         rules:fact-trail($NetCashFlowContinuing, \"NetCashFlowContinuing\") || \" = \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesContinuing, \"NetCashFlowFromOperatingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesContinuing, \"NetCashFlowFromInvestingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesContinuing, \"NetCashFlowFromFinancingActivitiesContinuing\")\n  let $source-facts := ($NetCashFlowContinuingValidation, $NetCashFlowContinuing, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromFinancingActivitiesContinuing)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowContinuing,\n            \"fac:NetCashFlowContinuingValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowContinuing,\n          \"fac:NetCashFlowContinuingValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowContinuing,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowContinuing" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowContinuing" ],
            "BodySrc" : "NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "260e6e0f-e6f4-48d2-8361-75cbfe04fe75",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow, Discontinued",
        "Description" : "Rule to compute Net Cash Flow, Discontinued (fac:NetCashFlowDiscontinued).",
        "ComputableConcepts" : [ "fac:NetCashFlowDiscontinued" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivitiesDiscontinued", "fac:NetCashFlowFromInvestingActivitiesDiscontinued", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowDiscontinued\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowDiscontinued\"]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowDiscontinued) return $NetCashFlowDiscontinued\n  case (exists($NetCashFlowFromOperatingActivitiesDiscontinued) and (not((not(exists($NetCashFlowFromOperatingActivitiesDiscontinued))))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowDiscontinued, $NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromOperatingActivitiesDiscontinued,\n            \"fac:NetCashFlowDiscontinued\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivitiesDiscontinued,\n          \"fac:NetCashFlowDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($NetCashFlowFromInvestingActivitiesDiscontinued) and (not((not(exists($NetCashFlowFromOperatingActivitiesDiscontinued))))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowDiscontinued, $NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromInvestingActivitiesDiscontinued,\n            \"fac:NetCashFlowDiscontinued\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivitiesDiscontinued,\n          \"fac:NetCashFlowDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($NetCashFlowFromFinancingActivitiesDiscontinued) and (not((not(exists($NetCashFlowFromFinancingActivitiesDiscontinued))))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowDiscontinued, $NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromFinancingActivitiesDiscontinued,\n            \"fac:NetCashFlowDiscontinued\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivitiesDiscontinued,\n          \"fac:NetCashFlowDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromOperatingActivitiesDiscontinued)))",
            "SourceFact" : [ "NetCashFlowFromOperatingActivitiesDiscontinued" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesDiscontinued+NetCashFlowFromInvestingActivitiesDiscontinued+NetCashFlowFromFinancingActivitiesDiscontinued"
        }, {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromOperatingActivitiesDiscontinued)))",
            "SourceFact" : [ "NetCashFlowFromInvestingActivitiesDiscontinued" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesDiscontinued+NetCashFlowFromInvestingActivitiesDiscontinued+NetCashFlowFromFinancingActivitiesDiscontinued"
        }, {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromFinancingActivitiesDiscontinued)))",
            "SourceFact" : [ "NetCashFlowFromFinancingActivitiesDiscontinued" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesDiscontinued+NetCashFlowFromInvestingActivitiesDiscontinued+NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[CF3] NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued",
        "Description" : "Rule to compute NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued (fac:NetCashFlowDiscontinuedValidation).",
        "ComputableConcepts" : [ "fac:NetCashFlowDiscontinuedValidation" ],
        "DependsOn" : [ "fac:NetCashFlowDiscontinued", "fac:NetCashFlowFromOperatingActivitiesDiscontinued", "fac:NetCashFlowFromInvestingActivitiesDiscontinued", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowDiscontinuedValidation\", \"fac:NetCashFlowDiscontinued\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowDiscontinuedValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowDiscontinuedValidation\"]\nlet $NetCashFlowDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowDiscontinued\"]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowDiscontinuedValidation) return $NetCashFlowDiscontinuedValidation\n  case (exists($NetCashFlowDiscontinued) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowDiscontinued) eq rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message := \n         rules:fact-trail($NetCashFlowDiscontinued, \"NetCashFlowDiscontinued\") || \" = \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowDiscontinuedValidation, $NetCashFlowDiscontinued, $NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowDiscontinued,\n            \"fac:NetCashFlowDiscontinuedValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowDiscontinued,\n          \"fac:NetCashFlowDiscontinuedValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowDiscontinued,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowDiscontinued" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowDiscontinued" ],
            "BodySrc" : "NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "f85598dc-58af-45c0-a2c5-94bf4b1bd277",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Financing Activities",
        "Description" : "Rule to compute Net Cash Flow from Financing Activities (fac:NetCashFlowFromFinancingActivities).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromFinancingActivities" ],
        "DependsOn" : [ "fac:NetCashFlowFromFinancingActivitiesContinuing", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromFinancingActivities\", \"fac:NetCashFlowFromFinancingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromFinancingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromFinancingActivities) return $NetCashFlowFromFinancingActivities\n  case (exists($NetCashFlowFromFinancingActivitiesContinuing) and (not((not(exists($NetCashFlowFromFinancingActivitiesContinuing)))) and rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued) eq 0))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromFinancingActivitiesContinuing)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromFinancingActivities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromFinancingActivitiesContinuing, \"NetCashFlowFromFinancingActivitiesContinuing\")\n  let $source-facts := ($NetCashFlowFromFinancingActivities, $NetCashFlowFromFinancingActivitiesContinuing, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromFinancingActivitiesContinuing,\n            \"fac:NetCashFlowFromFinancingActivities\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivitiesContinuing,\n          \"fac:NetCashFlowFromFinancingActivities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromFinancingActivitiesContinuing)),NetCashFlowFromFinancingActivitiesDiscontinued=0)",
            "SourceFact" : [ "NetCashFlowFromFinancingActivitiesContinuing" ],
            "BodySrc" : "NetCashFlowFromFinancingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "74a3bfc8-8ac4-483a-9325-a27fcb1342d6",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Financing Activities, Continuing",
        "Description" : "Rule to compute Net Cash Flow from Financing Activities, Continuing (fac:NetCashFlowFromFinancingActivitiesContinuing).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromFinancingActivitiesContinuing" ],
        "DependsOn" : [ "fac:NetCashFlowFromFinancingActivities", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromFinancingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivities\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $NetCashFlowFromFinancingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromFinancingActivitiesContinuing) return $NetCashFlowFromFinancingActivitiesContinuing\n  case (exists($NetCashFlowFromFinancingActivities) and not((not(exists($NetCashFlowFromFinancingActivities)))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromFinancingActivities) - rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromFinancingActivitiesContinuing\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" - \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowFromFinancingActivitiesContinuing, $NetCashFlowFromFinancingActivities, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromFinancingActivities,\n            \"fac:NetCashFlowFromFinancingActivitiesContinuing\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivities,\n          \"fac:NetCashFlowFromFinancingActivitiesContinuing\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetCashFlowFromFinancingActivities))",
            "SourceFact" : [ "NetCashFlowFromFinancingActivities" ],
            "BodySrc" : "NetCashFlowFromFinancingActivities-NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "d9bd6917-a92a-497b-a8f1-4d8d6098fcec",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Financing Activities, Discontinued",
        "Description" : "RIf NetCashFlowFinancing = NetCashFlowFinancingContinuing then NetCashFlowFinancingDiscontinued must be 0",
        "ComputableConcepts" : [ "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromFinancingActivities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromFinancingActivities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $NetCashFlowFromInvestingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $NetCashFlowFromFinancingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromFinancingActivitiesDiscontinued) return $NetCashFlowFromFinancingActivitiesDiscontinued\n  case (exists($NetCashFlowFromFinancingActivities) and rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) eq rules:decimal-value($NetCashFlowFromInvestingActivities))\n  return\n    let $computed-value := 0\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         \"0\"\n  let $source-facts := ($NetCashFlowFromFinancingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivities, $NetCashFlowFromFinancingActivities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromFinancingActivities,\n            \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivities,\n          \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "NetCashFlowFromInvestingActivitiesContinuing= NetCashFlowFromInvestingActivities",
            "SourceFact" : [ "NetCashFlowFromFinancingActivities" ],
            "BodySrc" : "0"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF6",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[CF6] NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued",
        "Description" : "Rule to compute NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued (fac:NetCashFlowFromFinancingActivitiesValidation).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromFinancingActivitiesValidation" ],
        "DependsOn" : [ "fac:NetCashFlowFromFinancingActivities", "fac:NetCashFlowFromFinancingActivitiesContinuing", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromFinancingActivitiesValidation\", \"fac:NetCashFlowFromFinancingActivities\", \"fac:NetCashFlowFromFinancingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromFinancingActivitiesValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesValidation\"]\nlet $NetCashFlowFromFinancingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromFinancingActivitiesValidation) return $NetCashFlowFromFinancingActivitiesValidation\n  case (exists($NetCashFlowFromFinancingActivities) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromFinancingActivities) eq rules:decimal-value($NetCashFlowFromFinancingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message := \n         rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" = \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesContinuing, \"NetCashFlowFromFinancingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowFromFinancingActivitiesValidation, $NetCashFlowFromFinancingActivities, $NetCashFlowFromFinancingActivitiesContinuing, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromFinancingActivities,\n            \"fac:NetCashFlowFromFinancingActivitiesValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivities,\n          \"fac:NetCashFlowFromFinancingActivitiesValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowFromFinancingActivities,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowFromFinancingActivities" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowFromFinancingActivities" ],
            "BodySrc" : "NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "f9e2b8b9-1798-42b9-85a8-0848faa00c33",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Investing Activities",
        "Description" : "Rule to compute Net Cash Flow from Investing Activities (fac:NetCashFlowFromInvestingActivities).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromInvestingActivities" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromInvestingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromInvestingActivities) return $NetCashFlowFromInvestingActivities\n  case (exists($NetCashFlowFromInvestingActivitiesContinuing) and (not((not(exists($NetCashFlowFromInvestingActivitiesContinuing)))) and rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) eq 0))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromInvestingActivities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromInvestingActivitiesContinuing, \"NetCashFlowFromInvestingActivitiesContinuing\")\n  let $source-facts := ($NetCashFlowFromInvestingActivities, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromInvestingActivitiesContinuing,\n            \"fac:NetCashFlowFromInvestingActivities\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivitiesContinuing,\n          \"fac:NetCashFlowFromInvestingActivities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromInvestingActivitiesContinuing)),\n          NetCashFlowFromInvestingActivitiesDiscontinued=0)",
            "SourceFact" : [ "NetCashFlowFromInvestingActivitiesContinuing" ],
            "BodySrc" : "NetCashFlowFromInvestingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "bc4dacb2-95d1-45e7-8594-2ad4e7f9f8d9",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Investing Activities, Continuing",
        "Description" : "Rule to compute Net Cash Flow from Investing Activities, Continuing (fac:NetCashFlowFromInvestingActivitiesContinuing).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromInvestingActivitiesContinuing" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromInvestingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $NetCashFlowFromInvestingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromInvestingActivitiesContinuing) return $NetCashFlowFromInvestingActivitiesContinuing\n  case (exists($NetCashFlowFromInvestingActivities) and not((not(exists($NetCashFlowFromInvestingActivities)))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromInvestingActivities) - rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromInvestingActivitiesContinuing\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" - \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivities, $NetCashFlowFromInvestingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromInvestingActivities,\n            \"fac:NetCashFlowFromInvestingActivitiesContinuing\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivities,\n          \"fac:NetCashFlowFromInvestingActivitiesContinuing\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetCashFlowFromInvestingActivities))",
            "SourceFact" : [ "NetCashFlowFromInvestingActivities" ],
            "BodySrc" : "NetCashFlowFromInvestingActivities-NetCashFlowFromInvestingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "394a9eab-557e-4cd0-9f1d-cb45d5b6e6ae",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Investing Activities, Discontinued",
        "Description" : "If NetCashFlowInvesting = NetCashFlowInvestingContinuing then NetCashFlowInvestingDiscontinued must be 0",
        "ComputableConcepts" : [ "fac:NetCashFlowFromInvestingActivitiesDiscontinued" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $NetCashFlowFromInvestingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromInvestingActivitiesDiscontinued) return $NetCashFlowFromInvestingActivitiesDiscontinued\n  case (exists($NetCashFlowFromInvestingActivities) and rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) eq rules:decimal-value($NetCashFlowFromInvestingActivities))\n  return\n    let $computed-value := 0\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         \"0\"\n  let $source-facts := ($NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromInvestingActivities,\n            \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivities,\n          \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "NetCashFlowFromInvestingActivitiesContinuing= NetCashFlowFromInvestingActivities",
            "SourceFact" : [ "NetCashFlowFromInvestingActivities" ],
            "BodySrc" : "0"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF5",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[CF5] NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued",
        "Description" : "Rule to compute NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued (fac:NetCashFlowFromInvestingActivitiesValidation).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromInvestingActivitiesValidation" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromInvestingActivitiesValidation\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromInvestingActivitiesValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesValidation\"]\nlet $NetCashFlowFromInvestingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromInvestingActivitiesValidation) return $NetCashFlowFromInvestingActivitiesValidation\n  case (exists($NetCashFlowFromInvestingActivities) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromInvestingActivities) eq rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued)\n    let $audit-trail-message := \n         rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" = \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesContinuing, \"NetCashFlowFromInvestingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowFromInvestingActivitiesValidation, $NetCashFlowFromInvestingActivities, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromInvestingActivities,\n            \"fac:NetCashFlowFromInvestingActivitiesValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivities,\n          \"fac:NetCashFlowFromInvestingActivitiesValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowFromInvestingActivities,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowFromInvestingActivities" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowFromInvestingActivities" ],
            "BodySrc" : "NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "c4cc5336-76fa-430b-8f60-c14a507bbaaa",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Operating Activities",
        "Description" : "Rule to compute Net Cash Flow from Operating Activities (fac:NetCashFlowFromOperatingActivities).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromOperatingActivities" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromOperatingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromOperatingActivities) return $NetCashFlowFromOperatingActivities\n  case (exists($NetCashFlowFromOperatingActivitiesContinuing) and (not((not(exists($NetCashFlowFromOperatingActivitiesContinuing)))) and rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) eq 0))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromOperatingActivities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesContinuing, \"NetCashFlowFromOperatingActivitiesContinuing\")\n  let $source-facts := ($NetCashFlowFromOperatingActivities, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromOperatingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromOperatingActivitiesContinuing,\n            \"fac:NetCashFlowFromOperatingActivities\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivitiesContinuing,\n          \"fac:NetCashFlowFromOperatingActivities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromOperatingActivitiesContinuing)), NetCashFlowFromOperatingActivitiesDiscontinued=0)",
            "SourceFact" : [ "NetCashFlowFromOperatingActivitiesContinuing" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "50a01bf0-30ab-4d46-8418-066173dd2e67",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Operating Activities, Continuing",
        "Description" : "Rule to compute Net Cash Flow from Operating Activities, Continuing (fac:NetCashFlowFromOperatingActivitiesContinuing).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromOperatingActivitiesContinuing" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivities", "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $NetCashFlowFromOperatingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromOperatingActivitiesContinuing) return $NetCashFlowFromOperatingActivitiesContinuing\n  case (exists($NetCashFlowFromOperatingActivities) and not((not(exists($NetCashFlowFromOperatingActivities)))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivities) - rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromOperatingActivitiesContinuing\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" - \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromOperatingActivities, $NetCashFlowFromOperatingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromOperatingActivities,\n            \"fac:NetCashFlowFromOperatingActivitiesContinuing\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivities,\n          \"fac:NetCashFlowFromOperatingActivitiesContinuing\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetCashFlowFromOperatingActivities))",
            "SourceFact" : [ "NetCashFlowFromOperatingActivities" ],
            "BodySrc" : "NetCashFlowFromOperatingActivities-NetCashFlowFromOperatingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "e7f1c48e-4b36-429c-90cc-48634d543ab9",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Cash Flow from Operating Activities, Discontinued",
        "Description" : "Rule to compute Net Cash Flow from Operating Activities, Discontinued (fac:NetCashFlowFromOperatingActivitiesDiscontinued).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromOperatingActivities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromOperatingActivities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $NetCashFlowFromOperatingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromOperatingActivitiesDiscontinued) return $NetCashFlowFromOperatingActivitiesDiscontinued\n  case (exists($NetCashFlowFromOperatingActivities) and rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing) eq rules:decimal-value($NetCashFlowFromOperatingActivities))\n  return\n    let $computed-value := 0\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         \"0\"\n  let $source-facts := ($NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromOperatingActivities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromOperatingActivities,\n            \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivities,\n          \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "NetCashFlowFromOperatingActivitiesContinuing=NetCashFlowFromOperatingActivities",
            "SourceFact" : [ "NetCashFlowFromOperatingActivities" ],
            "BodySrc" : "0"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF4",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[CF4] NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued",
        "Description" : "Rule to compute NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued (fac:NetCashFlowFromOperatingActivitiesValidation).",
        "ComputableConcepts" : [ "fac:NetCashFlowFromOperatingActivitiesValidation" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivities", "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromOperatingActivitiesValidation\", \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowFromOperatingActivitiesValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesValidation\"]\nlet $NetCashFlowFromOperatingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromOperatingActivitiesValidation) return $NetCashFlowFromOperatingActivitiesValidation\n  case (exists($NetCashFlowFromOperatingActivities) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivities) eq rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued)\n    let $audit-trail-message := \n         rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" = \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesContinuing, \"NetCashFlowFromOperatingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\")\n  let $source-facts := ($NetCashFlowFromOperatingActivitiesValidation, $NetCashFlowFromOperatingActivities, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromOperatingActivitiesDiscontinued)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlowFromOperatingActivities,\n            \"fac:NetCashFlowFromOperatingActivitiesValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivities,\n          \"fac:NetCashFlowFromOperatingActivitiesValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowFromOperatingActivities,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowFromOperatingActivities" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowFromOperatingActivities" ],
            "BodySrc" : "NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF1",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]",
        "Description" : "Rule to compute NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses] (fac:NetCashFlowValidation).",
        "ComputableConcepts" : [ "fac:NetCashFlowValidation" ],
        "DependsOn" : [ "fac:NetCashFlow", "fac:NetCashFlowFromOperatingActivities", "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromFinancingActivities", "fac:ExchangeGainsLosses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowValidation\", \"fac:NetCashFlow\", \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromFinancingActivities\", \"fac:ExchangeGainsLosses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetCashFlowValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowValidation\"]\nlet $NetCashFlow as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlow\"]\nlet $NetCashFlowFromOperatingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $NetCashFlowFromInvestingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $NetCashFlowFromFinancingActivities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $ExchangeGainsLosses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ExchangeGainsLosses\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowValidation) return $NetCashFlowValidation\n  case (exists($NetCashFlow) and (not((not(exists($NetCashFlow)))) and rules:decimal-value($NetCashFlow) eq (rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities) + rules:decimal-value($ExchangeGainsLosses))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlow) eq rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities) + rules:decimal-value($ExchangeGainsLosses)\n    let $audit-trail-message := \n         rules:fact-trail($NetCashFlow, \"NetCashFlow\") || \" = \" || rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" + \" || rules:fact-trail($ExchangeGainsLosses, \"ExchangeGainsLosses\")\n  let $source-facts := ($NetCashFlowValidation, $NetCashFlow, $NetCashFlowFromOperatingActivities, $NetCashFlowFromInvestingActivities, $NetCashFlowFromFinancingActivities, $ExchangeGainsLosses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlow,\n            \"fac:NetCashFlowValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlow,\n          \"fac:NetCashFlowValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlow,\n            $computed-value)\n  case (exists($NetCashFlow) and (not((not(exists($NetCashFlow)))) and rules:decimal-value($NetCashFlow) ne (rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities) + rules:decimal-value($ExchangeGainsLosses))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlow) eq (rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities)) - rules:decimal-value($ExchangeGainsLosses)\n    let $audit-trail-message := \n         rules:fact-trail($NetCashFlow, \"NetCashFlow\") || \" = \" || \" ( \" || rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" )\" || \" - \" || rules:fact-trail($ExchangeGainsLosses, \"ExchangeGainsLosses\")\n  let $source-facts := ($NetCashFlowValidation, $NetCashFlow, $NetCashFlowFromOperatingActivities, $NetCashFlowFromInvestingActivities, $NetCashFlowFromFinancingActivities, $ExchangeGainsLosses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetCashFlow,\n            \"fac:NetCashFlowValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetCashFlow,\n          \"fac:NetCashFlowValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlow,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlow" ],
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlow)), NetCashFlow=(NetCashFlowFromOperatingActivities+NetCashFlowFromInvestingActivities+NetCashFlowFromFinancingActivities+ExchangeGainsLosses))",
            "SourceFact" : [ "NetCashFlow" ],
            "BodySrc" : "NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities+ExchangeGainsLosses"
        }, {
            "PrereqSrc" : "and(not(isblank(NetCashFlow)), NetCashFlow<>(NetCashFlowFromOperatingActivities+NetCashFlowFromInvestingActivities+NetCashFlowFromFinancingActivities+ExchangeGainsLosses))",
            "SourceFact" : [ "NetCashFlow" ],
            "BodySrc" : "NetCashFlow = (NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities) -ExchangeGainsLosses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "0e7003bf-f1ac-490c-81e1-764f093e678e",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Income Attributable to Parent",
        "Description" : "Rule to compute Net Income Attributable to Parent (fac:NetIncomeLossAttributableToParent).",
        "ComputableConcepts" : [ "fac:NetIncomeLossAttributableToParent" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:NetIncomeLossAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossAttributableToParent\", \"fac:NetIncomeLoss\", \"fac:NetIncomeLossAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetIncomeLossAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $NetIncomeLossAttributableToNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToNoncontrollingInterest\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossAttributableToParent) return $NetIncomeLossAttributableToParent\n  case (exists($NetIncomeLoss) and (not((not(exists($NetIncomeLoss)))) and not(exists($NetIncomeLossAttributableToNoncontrollingInterest))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetIncomeLossAttributableToParent\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\")\n  let $source-facts := ($NetIncomeLossAttributableToParent, $NetIncomeLoss, $NetIncomeLossAttributableToNoncontrollingInterest)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLoss,\n            \"fac:NetIncomeLossAttributableToParent\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:NetIncomeLossAttributableToParent\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and (not(isblank(NetIncomeLoss)), isblank(NetIncomeLossAttributableToNoncontrollingInterest))",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "2c454b43-7933-41b8-ad05-a799dad6d4c0",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Net Income (Loss) Available to Common Stockholders, Basic",
        "Description" : "Rule to compute Net Income (Loss) Available to Common Stockholders, Basic (fac:NetIncomeLossAvailableToCommonStockholdersBasic).",
        "ComputableConcepts" : [ "fac:NetIncomeLossAvailableToCommonStockholdersBasic" ],
        "DependsOn" : [ "fac:NetIncomeLossAttributableToParent" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\", \"fac:NetIncomeLossAttributableToParent\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\"]\nlet $NetIncomeLossAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossAvailableToCommonStockholdersBasic) return $NetIncomeLossAvailableToCommonStockholdersBasic\n  case (exists($NetIncomeLossAttributableToParent) and not((not(exists($NetIncomeLossAttributableToParent)))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLossAttributableToParent)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLossAttributableToParent, \"NetIncomeLossAttributableToParent\")\n  let $source-facts := ($NetIncomeLossAvailableToCommonStockholdersBasic, $NetIncomeLossAttributableToParent)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLossAttributableToParent,\n            \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLossAttributableToParent,\n          \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetIncomeLossAttributableToParent))",
            "SourceFact" : [ "NetIncomeLossAttributableToParent" ],
            "BodySrc" : "NetIncomeLossAttributableToParent"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS8",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS8] NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments",
        "Description" : "Rule to compute NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments (fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation).",
        "ComputableConcepts" : [ "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation" ],
        "DependsOn" : [ "fac:NetIncomeLossAvailableToCommonStockholdersBasic", "fac:NetIncomeLossAttributableToParent", "fac:PreferredStockDividendsAndOtherAdjustments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\", \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\", \"fac:NetIncomeLossAttributableToParent\", \"fac:PreferredStockDividendsAndOtherAdjustments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetIncomeLossAvailableToCommonStockholdersBasicValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\"]\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\"]\nlet $NetIncomeLossAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $PreferredStockDividendsAndOtherAdjustments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:PreferredStockDividendsAndOtherAdjustments\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossAvailableToCommonStockholdersBasicValidation) return $NetIncomeLossAvailableToCommonStockholdersBasicValidation\n  case (exists($NetIncomeLossAvailableToCommonStockholdersBasic) and true)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLossAvailableToCommonStockholdersBasic) eq rules:decimal-value($NetIncomeLossAttributableToParent) - rules:decimal-value($PreferredStockDividendsAndOtherAdjustments)\n    let $audit-trail-message := \n         rules:fact-trail($NetIncomeLossAvailableToCommonStockholdersBasic, \"NetIncomeLossAvailableToCommonStockholdersBasic\") || \" = \" || rules:fact-trail($NetIncomeLossAttributableToParent, \"NetIncomeLossAttributableToParent\") || \" - \" || rules:fact-trail($PreferredStockDividendsAndOtherAdjustments, \"PreferredStockDividendsAndOtherAdjustments\")\n  let $source-facts := ($NetIncomeLossAvailableToCommonStockholdersBasicValidation, $NetIncomeLossAvailableToCommonStockholdersBasic, $NetIncomeLossAttributableToParent, $PreferredStockDividendsAndOtherAdjustments)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLossAvailableToCommonStockholdersBasic,\n            \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLossAvailableToCommonStockholdersBasic,\n          \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetIncomeLossAvailableToCommonStockholdersBasic,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetIncomeLossAvailableToCommonStockholdersBasic" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetIncomeLossAvailableToCommonStockholdersBasic" ],
            "BodySrc" : "NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS6",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS6] NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax",
        "Description" : "Rule to compute NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax (fac:NetIncomeLossValidation).",
        "ComputableConcepts" : [ "fac:NetIncomeLossValidation" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:IncomeLossFromContinuingOperationsAfterTax", "fac:IncomeLossFromDiscontinuedOperationsNetOfTax", "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossValidation\", \"fac:NetIncomeLoss\", \"fac:IncomeLossFromContinuingOperationsAfterTax\", \"fac:IncomeLossFromDiscontinuedOperationsNetOfTax\", \"fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetIncomeLossValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossValidation\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $IncomeLossFromContinuingOperationsAfterTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsAfterTax\"]\nlet $IncomeLossFromDiscontinuedOperationsNetOfTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromDiscontinuedOperationsNetOfTax\"]\nlet $ExtraordinaryItemsOfIncomeExpenseNetOfTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossValidation) return $NetIncomeLossValidation\n  case (exists($NetIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) eq rules:decimal-value($IncomeLossFromContinuingOperationsAfterTax) + rules:decimal-value($IncomeLossFromDiscontinuedOperationsNetOfTax) + rules:decimal-value($ExtraordinaryItemsOfIncomeExpenseNetOfTax)\n    let $audit-trail-message := \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" = \" || rules:fact-trail($IncomeLossFromContinuingOperationsAfterTax, \"IncomeLossFromContinuingOperationsAfterTax\") || \" + \" || rules:fact-trail($IncomeLossFromDiscontinuedOperationsNetOfTax, \"IncomeLossFromDiscontinuedOperationsNetOfTax\") || \" + \" || rules:fact-trail($ExtraordinaryItemsOfIncomeExpenseNetOfTax, \"ExtraordinaryItemsOfIncomeExpenseNetOfTax\")\n  let $source-facts := ($NetIncomeLossValidation, $NetIncomeLoss, $IncomeLossFromContinuingOperationsAfterTax, $IncomeLossFromDiscontinuedOperationsNetOfTax, $ExtraordinaryItemsOfIncomeExpenseNetOfTax)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLoss,\n            \"fac:NetIncomeLossValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:NetIncomeLossValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetIncomeLoss,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS7",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS7] NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest",
        "Description" : "Rule to compute NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest (fac:NetIncomeLossValidation2).",
        "ComputableConcepts" : [ "fac:NetIncomeLossValidation2" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:NetIncomeLossAttributableToParent", "fac:NetIncomeLossAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossValidation2\", \"fac:NetIncomeLoss\", \"fac:NetIncomeLossAttributableToParent\", \"fac:NetIncomeLossAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NetIncomeLossValidation2 as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossValidation2\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $NetIncomeLossAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $NetIncomeLossAttributableToNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToNoncontrollingInterest\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossValidation2) return $NetIncomeLossValidation2\n  case (exists($NetIncomeLoss) and not((not(exists($NetIncomeLoss)))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) eq rules:decimal-value($NetIncomeLossAttributableToParent) + rules:decimal-value($NetIncomeLossAttributableToNoncontrollingInterest)\n    let $audit-trail-message := \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" = \" || rules:fact-trail($NetIncomeLossAttributableToParent, \"NetIncomeLossAttributableToParent\") || \" + \" || rules:fact-trail($NetIncomeLossAttributableToNoncontrollingInterest, \"NetIncomeLossAttributableToNoncontrollingInterest\")\n  let $source-facts := ($NetIncomeLossValidation2, $NetIncomeLoss, $NetIncomeLossAttributableToParent, $NetIncomeLossAttributableToNoncontrollingInterest)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLoss,\n            \"fac:NetIncomeLossValidation2\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:NetIncomeLossValidation2\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetIncomeLoss,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetIncomeLoss))",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss=NetIncomeLossAttributableToParent+NetIncomeLossAttributableToNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "5d5eefb8-d022-44b7-8575-cadd6d377469",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Noncurrent Assets",
        "Description" : "Rule to compute Noncurrent Assets (fac:NoncurrentAssets).",
        "ComputableConcepts" : [ "fac:NoncurrentAssets" ],
        "DependsOn" : [ "fac:CurrentAssets", "fac:Assets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NoncurrentAssets\", \"fac:CurrentAssets\", \"fac:Assets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NoncurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentAssets\"]\nlet $CurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentAssets\"]\nlet $Assets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NoncurrentAssets) return $NoncurrentAssets\n  case (exists($Assets) and not((not(exists($CurrentAssets)))))\n  return\n    let $computed-value := rules:decimal-value($Assets) - rules:decimal-value($CurrentAssets)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NoncurrentAssets\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Assets, \"Assets\") || \" - \" || rules:fact-trail($CurrentAssets, \"CurrentAssets\")\n  let $source-facts := ($NoncurrentAssets, $CurrentAssets, $Assets)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Assets,\n            \"fac:NoncurrentAssets\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:NoncurrentAssets\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(CurrentAssets))",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets-CurrentAssets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "4b62d33e-849c-4c4d-8132-844327376bfa",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Noncurrent Liabilities",
        "Description" : "Rule to compute Noncurrent Liabilities (fac:NoncurrentLiabilities).",
        "ComputableConcepts" : [ "fac:NoncurrentLiabilities" ],
        "DependsOn" : [ "fac:CurrentLiabilities", "fac:Liabilities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NoncurrentLiabilities\", \"fac:CurrentLiabilities\", \"fac:Liabilities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NoncurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentLiabilities\"]\nlet $CurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentLiabilities\"]\nlet $Liabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Liabilities\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NoncurrentLiabilities) return $NoncurrentLiabilities\n  case (exists($CurrentLiabilities) and (not((not(exists($CurrentLiabilities)))) and not((not(exists($Liabilities))))))\n  return\n    let $computed-value := rules:decimal-value($Liabilities) - rules:decimal-value($CurrentLiabilities)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NoncurrentLiabilities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Liabilities, \"Liabilities\") || \" - \" || rules:fact-trail($CurrentLiabilities, \"CurrentLiabilities\")\n  let $source-facts := ($NoncurrentLiabilities, $CurrentLiabilities, $Liabilities)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $CurrentLiabilities,\n            \"fac:NoncurrentLiabilities\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $CurrentLiabilities,\n          \"fac:NoncurrentLiabilities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(CurrentLiabilities)),not(isblank(Liabilities)))",
            "SourceFact" : [ "CurrentLiabilities" ],
            "BodySrc" : "Liabilities-CurrentLiabilities"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "ee2117cd-9220-4ee2-a982-33f4074c1ebc",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense",
        "Description" : "Rule to compute Nonoperating Income (Loss) + Interest and Debt Expense (fac:NonoperatingIncomeLossPlusInterestAndDebtExpense).",
        "ComputableConcepts" : [ "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense" ],
        "DependsOn" : [ "fac:NonoperatingIncomeLoss", "fac:InterestAndDebtExpense", "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments", "fac:IncomeLossFromEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\", \"fac:NonoperatingIncomeLoss\", \"fac:InterestAndDebtExpense\", \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\", \"fac:IncomeLossFromEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NonoperatingIncomeLossPlusInterestAndDebtExpense as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\"]\nlet $NonoperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLoss\"]\nlet $InterestAndDebtExpense as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:InterestAndDebtExpense\"]\nlet $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\"]\nlet $IncomeLossFromEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NonoperatingIncomeLossPlusInterestAndDebtExpense) return $NonoperatingIncomeLossPlusInterestAndDebtExpense\n  case (exists($NonoperatingIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($NonoperatingIncomeLoss) - rules:decimal-value($InterestAndDebtExpense)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NonoperatingIncomeLoss, \"NonoperatingIncomeLoss\") || \" - \" || rules:fact-trail($InterestAndDebtExpense, \"InterestAndDebtExpense\")\n  let $source-facts := ($NonoperatingIncomeLossPlusInterestAndDebtExpense, $NonoperatingIncomeLoss, $InterestAndDebtExpense, $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, $IncomeLossFromEquityMethodInvestments)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NonoperatingIncomeLoss,\n            \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NonoperatingIncomeLoss,\n          \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments) and not((not(exists($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments)))))\n  return\n    let $computed-value := rules:decimal-value($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments) - rules:decimal-value($IncomeLossFromEquityMethodInvestments)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, \"NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\") || \" - \" || rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\")\n  let $source-facts := ($NonoperatingIncomeLossPlusInterestAndDebtExpense, $NonoperatingIncomeLoss, $InterestAndDebtExpense, $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, $IncomeLossFromEquityMethodInvestments)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments,\n            \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments,\n          \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "True",
            "SourceFact" : [ "NonoperatingIncomeLoss" ],
            "BodySrc" : "NonoperatingIncomeLoss-InterestAndDebtExpense"
        }, {
            "PrereqSrc" : "not(isblank(NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments))",
            "SourceFact" : [ "NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments" ],
            "BodySrc" : "NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments -IncomeLossFromEquityMethodInvestments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "6abca1d8-12f9-4b87-b410-9d5d9e9322a3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments",
        "Description" : "Rule to compute Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments (fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments).",
        "ComputableConcepts" : [ "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments" ],
        "DependsOn" : [ "fac:NonoperatingIncomeLoss", "fac:InterestAndDebtExpense", "fac:IncomeLossFromEquityMethodInvestments", "fac:IncomeLossFromContinuingOperationsBeforeTax", "fac:OperatingIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\", \"fac:NonoperatingIncomeLoss\", \"fac:InterestAndDebtExpense\", \"fac:IncomeLossFromEquityMethodInvestments\", \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:OperatingIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\"]\nlet $NonoperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLoss\"]\nlet $InterestAndDebtExpense as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:InterestAndDebtExpense\"]\nlet $IncomeLossFromEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments) return $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\n  case (exists($NonoperatingIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($NonoperatingIncomeLoss) - rules:decimal-value($InterestAndDebtExpense) + rules:decimal-value($IncomeLossFromEquityMethodInvestments)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NonoperatingIncomeLoss, \"NonoperatingIncomeLoss\") || \" - \" || rules:fact-trail($InterestAndDebtExpense, \"InterestAndDebtExpense\") || \" + \" || rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\")\n  let $source-facts := ($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, $NonoperatingIncomeLoss, $InterestAndDebtExpense, $IncomeLossFromEquityMethodInvestments, $IncomeLossFromContinuingOperationsBeforeTax, $OperatingIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NonoperatingIncomeLoss,\n            \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NonoperatingIncomeLoss,\n          \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($IncomeLossFromContinuingOperationsBeforeTax) and not((not(exists($IncomeLossFromContinuingOperationsBeforeTax)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromContinuingOperationsBeforeTax) - rules:decimal-value($OperatingIncomeLoss)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossFromContinuingOperationsBeforeTax, \"IncomeLossFromContinuingOperationsBeforeTax\") || \" - \" || rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\")\n  let $source-facts := ($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, $NonoperatingIncomeLoss, $InterestAndDebtExpense, $IncomeLossFromEquityMethodInvestments, $IncomeLossFromContinuingOperationsBeforeTax, $OperatingIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $IncomeLossFromContinuingOperationsBeforeTax,\n            \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $IncomeLossFromContinuingOperationsBeforeTax,\n          \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NonoperatingIncomeLoss" ],
            "BodySrc" : "NonoperatingIncomeLoss - InterestAndDebtExpense + IncomeLossFromEquityMethodInvestments"
        }, {
            "PrereqSrc" : "not(isblank(IncomeLossFromContinuingOperationsBeforeTax))",
            "SourceFact" : [ "IncomeLossFromContinuingOperationsBeforeTax" ],
            "BodySrc" : "IncomeLossFromContinuingOperationsBeforeTax-OperatingIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "fc6d4f5d-58db-41f3-8f40-fea21461be53",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Operating Expenses",
        "Description" : "Rule to compute Operating Expenses (fac:OperatingExpenses).",
        "ComputableConcepts" : [ "fac:OperatingExpenses" ],
        "DependsOn" : [ "fac:CostOfRevenue", "fac:CostsAndExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OperatingExpenses\", \"fac:CostOfRevenue\", \"fac:CostsAndExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $OperatingExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $CostsAndExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OperatingExpenses) return $OperatingExpenses\n  case (exists($CostsAndExpenses) and not((not(exists($CostOfRevenue)))))\n  return\n    let $computed-value := rules:decimal-value($CostsAndExpenses) - rules:decimal-value($CostOfRevenue)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:OperatingExpenses\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CostsAndExpenses, \"CostsAndExpenses\") || \" - \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\")\n  let $source-facts := ($OperatingExpenses, $CostOfRevenue, $CostsAndExpenses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $CostsAndExpenses,\n            \"fac:OperatingExpenses\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $CostsAndExpenses,\n          \"fac:OperatingExpenses\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(CostOfRevenue))",
            "SourceFact" : [ "CostsAndExpenses" ],
            "BodySrc" : "CostsAndExpenses-CostOfRevenue"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "97cdc544-35ea-4d12-b3d4-128b4b1e593a",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Operating Income (Loss)",
        "Description" : "Rule to compute Operating Income (Loss) (fac:OperatingIncomeLoss).",
        "ComputableConcepts" : [ "fac:OperatingIncomeLoss" ],
        "DependsOn" : [ "fac:IncomeLossBeforeEquityMethodInvestments", "fac:NonoperatingIncomeLoss", "fac:InterestAndDebtExpense" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OperatingIncomeLoss\", \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:NonoperatingIncomeLoss\", \"fac:InterestAndDebtExpense\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $NonoperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLoss\"]\nlet $InterestAndDebtExpense as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:InterestAndDebtExpense\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OperatingIncomeLoss) return $OperatingIncomeLoss\n  case (exists($IncomeLossBeforeEquityMethodInvestments) and not((not(exists($IncomeLossBeforeEquityMethodInvestments)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossBeforeEquityMethodInvestments) + rules:decimal-value($NonoperatingIncomeLoss) - rules:decimal-value($InterestAndDebtExpense)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:OperatingIncomeLoss\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\") || \" + \" || rules:fact-trail($NonoperatingIncomeLoss, \"NonoperatingIncomeLoss\") || \" - \" || rules:fact-trail($InterestAndDebtExpense, \"InterestAndDebtExpense\")\n  let $source-facts := ($OperatingIncomeLoss, $IncomeLossBeforeEquityMethodInvestments, $NonoperatingIncomeLoss, $InterestAndDebtExpense)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $IncomeLossBeforeEquityMethodInvestments,\n            \"fac:OperatingIncomeLoss\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $IncomeLossBeforeEquityMethodInvestments,\n          \"fac:OperatingIncomeLoss\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(IncomeLossBeforeEquityMethodInvestments))",
            "SourceFact" : [ "IncomeLossBeforeEquityMethodInvestments" ],
            "BodySrc" : "IncomeLossBeforeEquityMethodInvestments+NonoperatingIncomeLoss-InterestAndDebtExpense"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS2",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS2] OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses",
        "Description" : "Rule to compute OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses (fac:OperatingIncomeLossValidation).",
        "ComputableConcepts" : [ "fac:OperatingIncomeLossValidation" ],
        "DependsOn" : [ "fac:OperatingIncomeLoss", "fac:GrossProfit", "fac:OperatingExpenses", "fac:OtherOperatingIncomeExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OperatingIncomeLossValidation\", \"fac:OperatingIncomeLoss\", \"fac:GrossProfit\", \"fac:OperatingExpenses\", \"fac:OtherOperatingIncomeExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $OperatingIncomeLossValidation as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLossValidation\"]\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $OperatingExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $OtherOperatingIncomeExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OperatingIncomeLossValidation) return $OperatingIncomeLossValidation\n  case (exists($OperatingIncomeLoss) and not((not(exists($OperatingIncomeLoss)))))\n  return\n    let $computed-value := rules:decimal-value($OperatingIncomeLoss) eq rules:decimal-value($GrossProfit) - rules:decimal-value($OperatingExpenses) + rules:decimal-value($OtherOperatingIncomeExpenses)\n    let $audit-trail-message := \n         rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" = \" || rules:fact-trail($GrossProfit, \"GrossProfit\") || \" - \" || rules:fact-trail($OperatingExpenses, \"OperatingExpenses\") || \" + \" || rules:fact-trail($OtherOperatingIncomeExpenses, \"OtherOperatingIncomeExpenses\")\n  let $source-facts := ($OperatingIncomeLossValidation, $OperatingIncomeLoss, $GrossProfit, $OperatingExpenses, $OtherOperatingIncomeExpenses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $OperatingIncomeLoss,\n            \"fac:OperatingIncomeLossValidation\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $OperatingIncomeLoss,\n          \"fac:OperatingIncomeLossValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $OperatingIncomeLoss,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:OperatingIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(OperatingIncomeLoss))",
            "SourceFact" : [ "OperatingIncomeLoss" ],
            "BodySrc" : "OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS11",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "Label" : "[IS11] OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses",
        "Description" : "Rule to compute OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses (fac:OperatingIncomeLossValidation2).",
        "ComputableConcepts" : [ "fac:OperatingIncomeLossValidation2" ],
        "DependsOn" : [ "fac:OperatingIncomeLoss", "fac:Revenues", "fac:CostsAndExpenses", "fac:OtherOperatingIncomeExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OperatingIncomeLossValidation2\", \"fac:OperatingIncomeLoss\", \"fac:Revenues\", \"fac:CostsAndExpenses\", \"fac:OtherOperatingIncomeExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $OperatingIncomeLossValidation2 as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLossValidation2\"]\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $CostsAndExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"]\nlet $OtherOperatingIncomeExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OperatingIncomeLossValidation2) return $OperatingIncomeLossValidation2\n  case (exists($OperatingIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($OperatingIncomeLoss) eq rules:decimal-value($Revenues) - rules:decimal-value($CostsAndExpenses) + rules:decimal-value($OtherOperatingIncomeExpenses)\n    let $audit-trail-message := \n         rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" = \" || rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($CostsAndExpenses, \"CostsAndExpenses\") || \" + \" || rules:fact-trail($OtherOperatingIncomeExpenses, \"OtherOperatingIncomeExpenses\")\n  let $source-facts := ($OperatingIncomeLossValidation2, $OperatingIncomeLoss, $Revenues, $CostsAndExpenses, $OtherOperatingIncomeExpenses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $OperatingIncomeLoss,\n            \"fac:OperatingIncomeLossValidation2\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $OperatingIncomeLoss,\n          \"fac:OperatingIncomeLossValidation2\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $OperatingIncomeLoss,\n            $computed-value)\n  default return ()",
        "ValidatedConcepts" : [ "fac:OperatingIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "OperatingIncomeLoss" ],
            "BodySrc" : "OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "cd07373d-1c26-4278-86e9-9b4715dff5ea",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Other Comprehensive Income (Loss)",
        "Description" : "Rule to compute Other Comprehensive Income (Loss) (fac:OtherComprehensiveIncomeLoss).",
        "ComputableConcepts" : [ "fac:OtherComprehensiveIncomeLoss" ],
        "DependsOn" : [ "fac:ComprehensiveIncomeLoss", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OtherComprehensiveIncomeLoss\", \"fac:ComprehensiveIncomeLoss\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $OtherComprehensiveIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherComprehensiveIncomeLoss\"]\nlet $ComprehensiveIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OtherComprehensiveIncomeLoss) return $OtherComprehensiveIncomeLoss\n  case (exists($ComprehensiveIncomeLoss) and not((not(exists($ComprehensiveIncomeLoss)))))\n  return\n    let $computed-value := rules:decimal-value($ComprehensiveIncomeLoss) - rules:decimal-value($NetIncomeLoss)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:OtherComprehensiveIncomeLoss\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($ComprehensiveIncomeLoss, \"ComprehensiveIncomeLoss\") || \" - \" || rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\")\n  let $source-facts := ($OtherComprehensiveIncomeLoss, $ComprehensiveIncomeLoss, $NetIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $ComprehensiveIncomeLoss,\n            \"fac:OtherComprehensiveIncomeLoss\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:OtherComprehensiveIncomeLoss\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(ComprehensiveIncomeLoss))",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "ComprehensiveIncomeLoss-NetIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "bf2d1587-491c-4492-b587-ddd00d762f2d",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Other Operating Income (Expenses)",
        "Description" : "Rule to compute Other Operating Income (Expenses) (fac:OtherOperatingIncomeExpenses).",
        "ComputableConcepts" : [ "fac:OtherOperatingIncomeExpenses" ],
        "DependsOn" : [ "fac:OperatingIncomeLoss", "fac:GrossProfit", "fac:OperatingExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OtherOperatingIncomeExpenses\", \"fac:OperatingIncomeLoss\", \"fac:GrossProfit\", \"fac:OperatingExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $OtherOperatingIncomeExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $OperatingExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OtherOperatingIncomeExpenses) return $OtherOperatingIncomeExpenses\n  case (exists($OperatingIncomeLoss) and (not((not(exists($OperatingIncomeLoss)))) and not((not(exists($GrossProfit)))) and not((not(exists($OperatingExpenses))))))\n  return\n    let $computed-value := rules:decimal-value($OperatingIncomeLoss) - rules:decimal-value($GrossProfit) - rules:decimal-value($OperatingExpenses)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:OtherOperatingIncomeExpenses\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" - \" || rules:fact-trail($GrossProfit, \"GrossProfit\") || \" - \" || rules:fact-trail($OperatingExpenses, \"OperatingExpenses\")\n  let $source-facts := ($OtherOperatingIncomeExpenses, $OperatingIncomeLoss, $GrossProfit, $OperatingExpenses)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $OperatingIncomeLoss,\n            \"fac:OtherOperatingIncomeExpenses\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $OperatingIncomeLoss,\n          \"fac:OtherOperatingIncomeExpenses\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(OperatingIncomeLoss)), not(isblank(GrossProfit)), not(isblank(OperatingExpenses)))",
            "SourceFact" : [ "OperatingIncomeLoss" ],
            "BodySrc" : "OperatingIncomeLoss-GrossProfit-OperatingExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "VAL1",
        "Label" : "Validation Statistics",
        "Type" : "xbrl28:formula",
        "Formula" : "let $validations := (\"fac:EquityValidation\", \"fac:AssetsValidation\", \"fac:AssetsValidation2\", \"fac:LiabilitiesValidation\", \"fac:LiabilitiesAndEquityValidation\", \"fac:NetCashFlowValidation\", \"fac:NetCashFlowContinuingValidation\", \"fac:NetCashFlowDiscontinuedValidation\", \"fac:NetCashFlowFromOperatingActivitiesValidation\", \"fac:NetCashFlowFromInvestingActivitiesValidation\", \"fac:NetCashFlowFromFinancingActivitiesValidation\", \"fac:GrossProfitValidation\", \"fac:OperatingIncomeLossValidation\", \"fac:OperatingIncomeLossValidation2\", \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\", \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\", \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\", \"fac:NetIncomeLossValidation\", \"fac:NetIncomeLossValidation2\", \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\", \"fac:ComprehensiveIncomeLossValidation\", \"fac:ComprehensiveIncomeLossValidation2\") for $facts in facts:facts-for-internal($validations, $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) let $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1] group by $canonical-filter-string := facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", $facts:PERIOD, \"Balance\")), $aligned-period return let $passed as object* := $facts[$$.Value eq true] let $failed as object* := $facts[$$.Value eq false] let $not-applied as string* := distinct-values($validations)[not($$ = $facts.$facts:ASPECTS.$facts:CONCEPT)] for $concept in flatten($aligned-filter.$facts:ASPECTS.$facts:CONCEPT) return switch ($concept) case \"fac:PassedValidations\" return let $computed-value := count($passed) let $audit-trail-message := \"count(\" || string-join($passed.$facts:ASPECTS.$facts:CONCEPT, \", \") || \")\" let $source-facts := ($passed) return copy $new := rules:create-computed-fact( ($facts[exists(facts:duration-for-fact($$))],$facts)[1], \"fac:PassedValidations\", $computed-value, {Label: $rule.Label || \": Passed Validations\", Type: \"xbrl28:formula\" }, $audit-trail-message, $source-facts, $options) modify ( if(exists($new.$facts:ASPECTS.$facts:UNIT)) then replace value of json $new.$facts:ASPECTS.$facts:UNIT with \"pure\" else insert json {$facts:UNIT : \"pure\"} into $new.$facts:ASPECTS, if(exists($new.Type)) then replace value of json $new.Type with \"NumericValue\" else insert json { Type : \"NumericValue\"} into $new, if(exists($new.Decimals)) then replace value of json $new.Decimals with 0 else insert json { Decimals : 0} into $new ) return $new case \"fac:FailedValidations\" return let $computed-value := count($failed) let $audit-trail-message := \"count(\" || string-join($failed.$facts:ASPECTS.$facts:CONCEPT, \", \") || \")\" let $source-facts := ($failed) return copy $new := rules:create-computed-fact( ($facts[exists(facts:duration-for-fact($$))],$facts)[1], \"fac:FailedValidations\", $computed-value, {Label: $rule.Label || \": Passed Validations\", Type: \"xbrl28:formula\" }, $audit-trail-message, $source-facts, $options) modify ( if(exists($new.$facts:ASPECTS.$facts:UNIT)) then replace value of json $new.$facts:ASPECTS.$facts:UNIT with \"pure\" else insert json {$facts:UNIT : \"pure\"} into $new.$facts:ASPECTS, if(exists($new.Type)) then replace value of json $new.Type with \"NumericValue\" else insert json { Type : \"NumericValue\"} into $new, if(exists($new.Decimals)) then replace value of json $new.Decimals with 0 else insert json { Decimals : 0} into $new ) return $new case \"fac:NotApplicableValidations\" return let $computed-value := count($not-applied) let $audit-trail-message := \"count(\" || string-join($not-applied, \", \") || \")\" let $source-facts := () return copy $new := rules:create-computed-fact( ($facts[exists(facts:duration-for-fact($$))],$facts)[1], \"fac:NotApplicableValidations\", $computed-value, {Label: $rule.Label || \": Validations that couldn't be applied\", Type: \"xbrl28:formula\" }, $audit-trail-message, $source-facts, $options) modify ( if(exists($new.$facts:ASPECTS.$facts:UNIT)) then replace value of json $new.$facts:ASPECTS.$facts:UNIT with \"pure\" else insert json {$facts:UNIT : \"pure\"} into $new.$facts:ASPECTS, if(exists($new.Type)) then replace value of json $new.Type with \"NumericValue\" else insert json { Type : \"NumericValue\"} into $new, if(exists($new.Decimals)) then replace value of json $new.Decimals with 0 else insert json { Decimals : 0} into $new ) return $new default return ()",
        "ComputableConcepts" : [ "fac:PassedValidations", "fac:FailedValidations", "fac:NotApplicableValidations" ],
        "DependsOn" : [ "fac:EquityValidation", "fac:AssetsValidation", "fac:AssetsValidation2", "fac:LiabilitiesValidation", "fac:LiabilitiesAndEquityValidation", "fac:NetCashFlowValidation", "fac:NetCashFlowContinuingValidation", "fac:NetCashFlowDiscontinuedValidation", "fac:NetCashFlowFromOperatingActivitiesValidation", "fac:NetCashFlowFromInvestingActivitiesValidation", "fac:NetCashFlowFromFinancingActivitiesValidation", "fac:GrossProfitValidation", "fac:OperatingIncomeLossValidation", "fac:OperatingIncomeLossValidation2", "fac:IncomeLossBeforeEquityMethodInvestmentsValidation", "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation", "fac:IncomeLossFromContinuingOperationsAfterTaxValidation", "fac:NetIncomeLossValidation", "fac:NetIncomeLossValidation2", "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation", "fac:ComprehensiveIncomeLossValidation", "fac:ComprehensiveIncomeLossValidation2" ]
    }, {
        "Id" : "4b138859-c05a-4715-86d2-5e75cc0ec110",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Preferred Stock Dividends and Other Adjustments",
        "Description" : "Rule to compute Preferred Stock Dividends and Other Adjustments (fac:PreferredStockDividendsAndOtherAdjustments).",
        "ComputableConcepts" : [ "fac:PreferredStockDividendsAndOtherAdjustments" ],
        "DependsOn" : [ "fac:NetIncomeLossAttributableToParent", "fac:NetIncomeLossAvailableToCommonStockholdersBasic" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:PreferredStockDividendsAndOtherAdjustments\", \"fac:NetIncomeLossAttributableToParent\", \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $PreferredStockDividendsAndOtherAdjustments as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:PreferredStockDividendsAndOtherAdjustments\"]\nlet $NetIncomeLossAttributableToParent as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($PreferredStockDividendsAndOtherAdjustments) return $PreferredStockDividendsAndOtherAdjustments\n  case (exists($NetIncomeLossAttributableToParent) and (not((not(exists($NetIncomeLossAttributableToParent)))) and not((not(exists($NetIncomeLossAvailableToCommonStockholdersBasic))))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLossAttributableToParent) - rules:decimal-value($NetIncomeLossAvailableToCommonStockholdersBasic)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:PreferredStockDividendsAndOtherAdjustments\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLossAttributableToParent, \"NetIncomeLossAttributableToParent\") || \" - \" || rules:fact-trail($NetIncomeLossAvailableToCommonStockholdersBasic, \"NetIncomeLossAvailableToCommonStockholdersBasic\")\n  let $source-facts := ($PreferredStockDividendsAndOtherAdjustments, $NetIncomeLossAttributableToParent, $NetIncomeLossAvailableToCommonStockholdersBasic)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLossAttributableToParent,\n            \"fac:PreferredStockDividendsAndOtherAdjustments\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLossAttributableToParent,\n          \"fac:PreferredStockDividendsAndOtherAdjustments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  case (exists($NetIncomeLossAttributableToParent) and true)\n  return\n    let $computed-value := 0\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:PreferredStockDividendsAndOtherAdjustments\" }, Value: $computed-value }) || \" = \" || \n         \"0\"\n  let $source-facts := ($PreferredStockDividendsAndOtherAdjustments, $NetIncomeLossAttributableToParent, $NetIncomeLossAvailableToCommonStockholdersBasic)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLossAttributableToParent,\n            \"fac:PreferredStockDividendsAndOtherAdjustments\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLossAttributableToParent,\n          \"fac:PreferredStockDividendsAndOtherAdjustments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetIncomeLossAttributableToParent)), not(isblank(NetIncomeLossAvailableToCommonStockholdersBasic)))",
            "SourceFact" : [ "NetIncomeLossAttributableToParent" ],
            "BodySrc" : "NetIncomeLossAttributableToParent-NetIncomeLossAvailableToCommonStockholdersBasic"
        }, {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "fac:NetIncomeLossAttributableToParent" ],
            "BodySrc" : "0"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "78e824dc-4b68-4a1b-9aa3-ec51d0f55335",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Return on Assets (ROA)",
        "Description" : "Rule to compute Return on Assets (ROA) (fac:ReturnOnAssets).",
        "ComputableConcepts" : [ "fac:ReturnOnAssets" ],
        "DependsOn" : [ "fac:Assets", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ReturnOnAssets\", \"fac:Assets\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $ReturnOnAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ReturnOnAssets\"]\nlet $Assets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ReturnOnAssets) return $ReturnOnAssets\n  case (exists($NetIncomeLoss) and rules:decimal-value($Assets) ne 0)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Assets)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ReturnOnAssets\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Assets, \"Assets\")\n  let $source-facts := ($ReturnOnAssets, $Assets, $NetIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLoss,\n            \"fac:ReturnOnAssets\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:ReturnOnAssets\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "Assets<>0",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss/Assets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "fe735813-326b-4f09-a38e-8f80c80e816b",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Return on Equity (ROE)",
        "Description" : "Rule to compute Return on Equity (ROE) (fac:ReturnOnEquity).",
        "ComputableConcepts" : [ "fac:ReturnOnEquity" ],
        "DependsOn" : [ "fac:Equity", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ReturnOnEquity\", \"fac:Equity\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $ReturnOnEquity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ReturnOnEquity\"]\nlet $Equity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ReturnOnEquity) return $ReturnOnEquity\n  case (exists($NetIncomeLoss) and rules:decimal-value($Equity) ne 0)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Equity)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ReturnOnEquity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Equity, \"Equity\")\n  let $source-facts := ($ReturnOnEquity, $Equity, $NetIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLoss,\n            \"fac:ReturnOnEquity\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:ReturnOnEquity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "Equity<>0",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss/Equity"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "de1806dc-ff91-47a9-a10b-fb631b268ae3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Return on Sales (ROS)",
        "Description" : "Rule to compute Return on Sales (ROS) (fac:ReturnOnSales).",
        "ComputableConcepts" : [ "fac:ReturnOnSales" ],
        "DependsOn" : [ "fac:Revenues", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ReturnOnSales\", \"fac:Revenues\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $ReturnOnSales as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ReturnOnSales\"]\nlet $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ReturnOnSales) return $ReturnOnSales\n  case (exists($Revenues) and rules:decimal-value($Revenues) ne 0)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Revenues)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ReturnOnSales\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Revenues, \"Revenues\")\n  let $source-facts := ($ReturnOnSales, $Revenues, $NetIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $Revenues,\n            \"fac:ReturnOnSales\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $Revenues,\n          \"fac:ReturnOnSales\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "Revenues<>0",
            "SourceFact" : [ "Revenues" ],
            "BodySrc" : "NetIncomeLoss/Revenues"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "fd810901-ee86-46ad-8c55-ec933c27169a",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Revenues",
        "Description" : "Rule to compute Revenues (fac:Revenues).",
        "ComputableConcepts" : [ "fac:Revenues" ],
        "DependsOn" : [ "fac:CostOfRevenue", "fac:GrossProfit" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:Revenues\", \"fac:CostOfRevenue\", \"fac:GrossProfit\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($Revenues) return $Revenues\n  case (exists($GrossProfit) and not((not(exists($CostOfRevenue)))))\n  return\n    let $computed-value := rules:decimal-value($GrossProfit) + rules:decimal-value($CostOfRevenue)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:Revenues\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($GrossProfit, \"GrossProfit\") || \" + \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\")\n  let $source-facts := ($Revenues, $CostOfRevenue, $GrossProfit)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $GrossProfit,\n            \"fac:Revenues\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $GrossProfit,\n          \"fac:Revenues\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(CostOfRevenue))",
            "SourceFact" : [ "GrossProfit" ],
            "BodySrc" : "GrossProfit+CostOfRevenue"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [ "fac:OtherOperatingIncomeExpenses" ]
    }, {
        "Id" : "9f8da807-3830-485d-8f97-6f77c9b1ab05",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Sustainable Growth Rate (SGR)",
        "Description" : "Rule to compute Sustainable Growth Rate (SGR) (fac:SustainableGrowthRate).",
        "ComputableConcepts" : [ "fac:SustainableGrowthRate" ],
        "DependsOn" : [ "fac:Equity", "fac:Assets", "fac:Revenues", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:SustainableGrowthRate\", \"fac:Equity\", \"fac:Assets\", \"fac:Revenues\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $SustainableGrowthRate as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:SustainableGrowthRate\"]\nlet $Equity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $Assets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $NetIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($SustainableGrowthRate) return $SustainableGrowthRate\n  case (exists($NetIncomeLoss) and (rules:decimal-value($Equity) ne 0 and rules:decimal-value($Assets) ne 0 and rules:decimal-value($Revenues) ne 0 and rules:decimal-value($NetIncomeLoss) ne 0))\n  return\n    let $computed-value := ((rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Revenues)) * (1 + (rules:decimal-value($Assets) - rules:decimal-value($Equity)) div rules:decimal-value($Equity))) div ((1 div (rules:decimal-value($Revenues) div rules:decimal-value($Assets))) - ((rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Revenues)) * (1 + (rules:decimal-value($Assets) - rules:decimal-value($Equity)) div rules:decimal-value($Equity))))\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:SustainableGrowthRate\" }, Value: $computed-value }) || \" = \" || \n         \" ( \" || \" ( \" || rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Revenues, \"Revenues\") || \" )\" || \" * \" || \" ( \" || \"1\" || \" + \" || \" ( \" || rules:fact-trail($Assets, \"Assets\") || \" - \" || rules:fact-trail($Equity, \"Equity\") || \" )\" || \" div \" || rules:fact-trail($Equity, \"Equity\") || \" )\" || \" )\" || \" div \" || \" ( \" || \" ( \" || \"1\" || \" div \" || \" ( \" || rules:fact-trail($Revenues, \"Revenues\") || \" div \" || rules:fact-trail($Assets, \"Assets\") || \" )\" || \" )\" || \" - \" || \" ( \" || \" ( \" || rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Revenues, \"Revenues\") || \" )\" || \" * \" || \" ( \" || \"1\" || \" + \" || \" ( \" || rules:fact-trail($Assets, \"Assets\") || \" - \" || rules:fact-trail($Equity, \"Equity\") || \" )\" || \" div \" || rules:fact-trail($Equity, \"Equity\") || \" )\" || \" )\" || \" )\"\n  let $source-facts := ($SustainableGrowthRate, $Equity, $Assets, $Revenues, $NetIncomeLoss)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $NetIncomeLoss,\n            \"fac:SustainableGrowthRate\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:SustainableGrowthRate\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(Equity <> 0, Assets <>0, Revenues <>0, NetIncomeLoss <> 0)",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "(( NetIncomeLoss / Revenues ) * (1 + ( Assets - Equity ) / Equity ))\n  / (( 1 / ( Revenues / Assets )) - (( NetIncomeLoss / Revenues ) * (1 + ( Assets - Equity ) /Equity )))"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "c96061a8-4f97-4973-99e3-4050f69bfd84",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Label" : "Temporary Equity",
        "Description" : "Rule to compute Temporary Equity (fac:TemporaryEquity).",
        "ComputableConcepts" : [ "fac:TemporaryEquity" ],
        "DependsOn" : [ "fac:RedeemableNoncontrollingInterest", "fac:TemporaryEquity" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:TemporaryEquity\", \"fac:RedeemableNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\ngroup by $canonical-filter-string := \n  facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\", $facts:PERIOD))\n  , $aligned-period\nlet $TemporaryEquity as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:TemporaryEquity\"]\nlet $RedeemableNoncontrollingInterest as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:RedeemableNoncontrollingInterest\"]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($TemporaryEquity) return $TemporaryEquity\n  case (exists($RedeemableNoncontrollingInterest) and not((not(exists($RedeemableNoncontrollingInterest)))))\n  return\n    let $computed-value := rules:decimal-value($TemporaryEquity) + rules:decimal-value($RedeemableNoncontrollingInterest)\n    let $audit-trail-message := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:TemporaryEquity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($TemporaryEquity, \"TemporaryEquity\") || \" + \" || rules:fact-trail($RedeemableNoncontrollingInterest, \"RedeemableNoncontrollingInterest\")\n  let $source-facts := ($TemporaryEquity, $RedeemableNoncontrollingInterest)\n    return\n      if(string(number($computed-value)) != \"NaN\" and not($computed-value instance of xs:boolean) and $computed-value ne xs:integer($computed-value))\n      then\n        copy $newfact :=\n          rules:create-computed-fact(\n            $RedeemableNoncontrollingInterest,\n            \"fac:TemporaryEquity\",\n            $computed-value,\n            $rule,\n            $audit-trail-message,\n            $source-facts,\n            $options)\n        modify (\n            replace value of json $newfact(\"Decimals\") with 2\n          )\n        return $newfact\n      else\n        rules:create-computed-fact(\n          $RedeemableNoncontrollingInterest,\n          \"fac:TemporaryEquity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(RedeemableNoncontrollingInterest))",
            "SourceFact" : [ "RedeemableNoncontrollingInterest" ],
            "BodySrc" : "TemporaryEquity+RedeemableNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "gi_TradingSymbol",
        "Type" : "xbrl28:formula",
        "Label" : "TradingSymbol imputation",
        "Formula" : "import module namespace entities = \"http://xbrl.io/modules/bizql/entities\"; for $facts in facts:facts-for-internal(( \"fac:TradingSymbol\", \"fac:Assets\"), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) group by $canonical-filter-string := facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\")) let $TradingSymbol as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:TradingSymbol\"] let $Assets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"] let $unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1] return switch (true) case (exists($TradingSymbol)) return $TradingSymbol case (exists($Assets)) return let $computed-value := entities:entities($Assets.Aspects.\"xbrl:Entity\").Profiles.SEC.Tickers[[1]] let $audit-trail-message := rules:fact-trail({ \"Aspects\" : { \"xbrl:Unit\" : $unit, \"xbrl:Concept\" : \"fac:TradingSymbol\" }, Value: $computed-value }) || \" = external source\" return copy $newfact := rules:create-computed-fact( $Assets, \"fac:TradingSymbol\", if (exists($computed-value)) then $computed-value else \"N/A\", $rule, $audit-trail-message, $Assets, $options) modify ( replace value of json $newfact(\"Type\") with \"NonNumericValue\" ) return $newfact default return {}",
        "ComputableConcepts" : [ "fac:TradingSymbol" ],
        "DependsOn" : [ "fac:TradingSymbol", "fac:Assets" ]
    }, {
        "Id" : "default_zero",
        "Type" : "xbrl28:formula",
        "Label" : "Zeros instead of null",
        "Formula" : "import module namespace r = \"http://zorba.io/modules/random\";\r\n\r\nlet $non-numeric-concepts := (\"fac:FiscalPeriod\", \"fac:EntityRegistrantName\", \"fac:EntityCentralIndexKey\", \"fac:EntityFilerCategory\",\r\n                            \"fac:TradingSymbol\", \"fac:FiscalYearEnd\", \"fac:FiscalYear\", \"fac:FiscalPeriod\", \"fac:DocumentType\",\r\n                            \"fac:BalanceSheetDate\", \"fac:IncomeStatementStartPeriodYearToDate\", \"fac:BalanceSheetFormat\",\r\n                            \"fac:IncomeStatementFormat\", \"fac:NatureOfOperations\", \"fac:EquityValidation\",\r\n                            \"fac:AssetsValidation2\", \"fac:LiabilitiesValidation\", \"fac:LiabilitiesAndEquityValidation\",\r\n                            \"fac:GrossProfitValidation\", \"fac:OperatingIncomeLossValidation\",\r\n                            \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\", \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\",\r\n                            \"fac:NetIncomeLossValidation\", \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\",\r\n                            \"fac:ComprehensiveIncomeLossValidation\", \"fac:ComprehensiveIncomeLossValidation2\",\r\n                            \"fac:OperatingIncomeLossValidation2\", \"fac:NetCashFlowValidation\", \"fac:NetCashFlowContinuingValidation\",\r\n                            \"fac:NetCashFlowDiscontinuedValidation\", \"fac:NetCashFlowFromOperatingActivitiesValidation\",\r\n                            \"fac:NetCashFlowFromInvestingActivitiesValidation\", \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\",\r\n                            \"fac:NetCashFlowFromFinancingActivitiesValidation\", \"fac:NetIncomeLossValidation2\", \"fac:AssetsValidation\" )\r\nlet $abstract-concepts := (\"xbrl:ConceptDomain\", \"fac:FundamentalAccountingConceptsLineItems\", \"fac:FundamentalAccountingConceptsHierarchy\",\r\n                           \"fac:GeneralInformationHierarchy\", \"fac:BalanceSheetHierarchy\", \"fac:IncomeStatementHierarchy\",\r\n                           \"fac:StatementComprehensiveIncomeHierarchy\", \"fac:CashFlowStatementHierarchy\", \"fac:KeyRatiosHierarchy\",\r\n                           \"fac:ValidationStatistics\", \"fac:Validations\")\r\nlet $numeric-concepts := $concepts[not($$ = $non-numeric-concepts) and not($$ = $abstract-concepts) and starts-with($$, \"fac:\")]\r\nlet $numeric-instant-concepts := (\"fac:CurrentAssets\", \"fac:NoncurrentAssets\", \"fac:Assets\", \"fac:CurrentLiabilities\",\r\n                         \"fac:NoncurrentLiabilities\", \"fac:Liabilities\", \"fac:CommitmentsAndContingencies\", \"fac:TemporaryEquity\",\r\n                         \"fac:RedeemableNoncontrollingInterest\", \"fac:EquityAttributableToParent\",\r\n                         \"fac:EquityAttributableToNoncontrollingInterest\", \"fac:Equity\", \"fac:LiabilitiesAndEquity\", \"fac:CommonStockSharesAuthorized\", \"fac:CommonStockSharesIssued\", \"fac:CommonStockSharesOutstanding\")\r\nlet $numeric-duration-concepts := $numeric-concepts[not($$ = $numeric-instant-concepts)]\r\nlet $numeric-instant-concepts := $numeric-concepts[$$ = $numeric-instant-concepts]\r\nlet $concepts-not-in-report := $concepts[not starts-with($$, \"fac:\")]\r\nreturn\r\nfor $facts in facts:facts-for-internal($concepts, $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\r\ngroup by facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT))\r\nlet $template-fact as object := ($facts[$$.$facts:ASPECTS.$facts:CONCEPT = $numeric-concepts], $facts)[1]\r\nlet $is-instant := not contains($template-fact.$facts:ASPECTS.$facts:PERIOD, \"/\")\r\nreturn (\r\n        $facts[$$.$facts:ASPECTS.$facts:CONCEPT = $concepts-not-in-report],\r\n\t\t$facts[$$.$facts:ASPECTS.$facts:CONCEPT = $non-numeric-concepts],\r\n        \r\n        (: default 0 :)\r\n        let $concepts-with-relevant-period-type := if($is-instant) then $numeric-instant-concepts else $numeric-duration-concepts\r\n        for $concept in $concepts-with-relevant-period-type\r\n        let $fact as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq $concept]\r\n        return switch(true)\r\n          (: fill empty cell with zero :)\r\n          case empty($fact)\r\n          return\r\n            let $audit-trail := {\r\n              \"Type\" : \"xbrl28:default-fact-value\",\r\n              \"Label\" : \"Default fact value\",\r\n              \"Message\" : $concept || \" = 0\",\r\n              \"Data\" : {\r\n                \"OutputConcept\" : $concept\r\n              }\r\n            }\r\n            return\r\n            copy $f := $template-fact\r\n            modify (\r\n                replace value of json $f._id with r:uuid(),\r\n                replace value of json $f.$facts:ASPECTS.$facts:CONCEPT with $concept,\r\n                replace value of json $f.Value with 0,\r\n                replace value of json $f.Type with \"NumericValue\",\r\n                if(exists($f.Decimals))\r\n                then replace value of json $f.Decimals with 3\r\n                else insert json { Decimals: 3 } into $f,\r\n                if(exists($f.AuditTrails))\r\n                then replace value of json $f.AuditTrails with [ $audit-trail ]\r\n                else insert json { AuditTrails: [ $audit-trail ] } into $f\r\n            )\r\n            return $f\r\n\r\n        (: replacing null with zero :)\r\n        case $fact.Type eq \"NumericValue\" and $fact.Value eq null\r\n        return\r\n                let $concept := $fact.$facts:ASPECTS.$facts:CONCEPT\r\n                let $audit-trail := {\r\n                    Type: \"xbrl28:null-to-zero\",\r\n                    Label: \"Adapting null value\",\r\n                    Message: \"Replacing null value with 0.\",\r\n                    Data:\r\n                        { OutputConcept: $concept }\r\n                }\r\n                return\r\n                    copy $f := $fact\r\n                    modify (\r\n                        replace value of json $f.Value with 0,\r\n                        if(exists($f.AuditTrails))\r\n                        then append json $audit-trail into $f.AuditTrails\r\n                        else insert json { AuditTrails: [ $audit-trail ] } into $f\r\n                    )\r\n                    return $f\r\n\r\n        default return $fact\r\n    )"
    } ],
    "Filters" : {
        "cik" : [  ],
        "tag" : [ "DOW30" ],
        "fiscalYear" : [ 2013 ],
        "fiscalPeriod" : [ "FY" ],
        "sic" : [  ]
    }
}