
{
    "_id" : "BasicFinancialInformation",
    "Archive" : null,
    "Label" : "Basic Financial Information",
    "Description" : "This report extends the fundamental accounting concepts report. Documentation about the fundamental accounting concepts defined in this report can be found at http://fundamentalaccountingconcepts.wikispaces.com/home",
    "Prefix" : "fac",
    "Role" : "http://xbrl.io/basic-financial-information",
    "Owner" : "charlie@prudena.com",
    "LastModified" : "2015-01-09T12:12:52.531177Z",
    "ACL" : [  ],
    "Networks" : [ {
        "LinkName" : "link:presentationLink",
        "LinkRole" : "http://xbrl.io/basic-financial-information",
        "ArcName" : "link:presentationArc",
        "ArcRole" : "http://www.xbrl.org/2003/arcrole/parent-child",
        "Kind" : "InterConceptTreeNetwork",
        "ShortName" : "Presentation",
        "CyclesAllowed" : "undirected",
        "Trees" : [ {
            "Name" : "fac:FundamentalAccountingConceptsLineItems",
            "Label" : "Fundamental Accounting Concepts [Line Items]",
            "To" : [ {
                "Name" : "fac:FundamentalAccountingConceptsHierarchy",
                "Label" : "Fundamental Accounting Concepts [Hierarchy]",
                "To" : [ {
                    "Name" : "fac:GeneralInformationHierarchy",
                    "Label" : "General Information [Hierarchy]",
                    "To" : [ {
                        "Name" : "fac:EntityRegistrantName",
                        "Label" : "Entity Registrant Name",
                        "Id" : "0faa52f2-336f-49ee-98da-8e4f09a373f2"
                    }, {
                        "Name" : "fac:EntityCentralIndexKey",
                        "Label" : "Central Index Key (CIK)",
                        "Id" : "9d0c845e-aeae-4755-b25b-5ac55eeb4c11"
                    }, {
                        "Name" : "fac:EntityFilerCategory",
                        "Label" : "Entity Filer Category",
                        "Id" : "5c97d4d6-0a4f-4bf1-8fb1-aec79a129a84"
                    }, {
                        "Name" : "fac:TradingSymbol",
                        "Label" : "Trading Symbol",
                        "Id" : "4365cf66-9b6e-433a-842b-17c6b447e64f"
                    }, {
                        "Name" : "fac:FiscalYearEnd",
                        "Label" : "Fiscal Year End",
                        "Id" : "ba01100a-8e4e-4d02-874a-508ef88a0abf"
                    }, {
                        "Name" : "fac:FiscalYear",
                        "Label" : "Fiscal Year",
                        "Id" : "24cfc384-4a35-41a6-891c-f88c4288e2b6"
                    }, {
                        "Name" : "fac:FiscalPeriod",
                        "Label" : "Fiscal Period",
                        "Id" : "a766acf7-db97-497a-854a-71f859e93b93"
                    }, {
                        "Name" : "fac:DocumentType",
                        "Label" : "Document Type",
                        "Id" : "c34ef95e-2453-4af0-908c-53e367c647e2"
                    }, {
                        "Name" : "fac:BalanceSheetDate",
                        "Label" : "Balance Sheet Date",
                        "Id" : "d2438c22-0bf8-420c-ada5-4c6271f99ed4"
                    }, {
                        "Name" : "fac:IncomeStatementStartPeriodYearToDate",
                        "Label" : "Income Statement Start of Period",
                        "Id" : "93940333-1905-4e35-ace6-50b610222a59"
                    }, {
                        "Name" : "fac:BalanceSheetFormat",
                        "Label" : "Balance Sheet Format",
                        "Id" : "31e675df-393c-4c94-a59a-3d8e24fef49b"
                    }, {
                        "Name" : "fac:IncomeStatementFormat",
                        "Label" : "Income Statement Format",
                        "Id" : "2d213e03-f88d-4808-8a2c-d8d9eeaa0368"
                    }, {
                        "Name" : "fac:NatureOfOperations",
                        "Label" : "Nature of Operations",
                        "Id" : "abf38e04-76c9-4fdf-81c9-72dffad172fb"
                    }, {
                        "Name" : "fac:CommonStockSharesAuthorized",
                        "Label" : "Common Stock Shares (authorized)",
                        "Id" : "4f01784a-2c8a-41a9-8296-87f3714ae581"
                    }, {
                        "Name" : "fac:CommonStockSharesIssued",
                        "Label" : "Common Stock Shares (issued)",
                        "Id" : "a7e07c77-e9fc-4846-8229-cf13d0949443"
                    }, {
                        "Name" : "fac:CommonStockSharesOutstanding",
                        "Label" : "Common Stock Shares (outstanding)",
                        "Id" : "2f2c45dc-fbcc-4586-a1d9-5ea49b1a5bac"
                    } ],
                    "Id" : "368e4683-e47f-4e04-854f-dfc5eb43e401",
                    "IsAbstract" : true
                }, {
                    "Name" : "fac:BalanceSheetHierarchy",
                    "Label" : "Balance Sheet [Hierarchy]",
                    "To" : [ {
                        "Name" : "fac:CurrentAssets",
                        "Label" : "Current Assets",
                        "Order" : 1,
                        "Id" : "119ac3ff-cfc7-4595-947d-42acab81284b"
                    }, {
                        "Name" : "fac:NoncurrentAssets",
                        "Label" : "Noncurrent Assets",
                        "Order" : 2,
                        "Id" : "598130de-2a5a-4280-b57c-1a6e378d437b"
                    }, {
                        "Name" : "fac:Assets",
                        "Label" : "Assets",
                        "Order" : 3,
                        "Id" : "db2044bc-74d0-4f33-bbe3-66956f59bbe1"
                    }, {
                        "Name" : "fac:CurrentLiabilities",
                        "Label" : "Current Liabilities",
                        "Order" : 4,
                        "Id" : "ac483d05-972b-4a3c-a89c-01e9afe60ab9"
                    }, {
                        "Name" : "fac:NoncurrentLiabilities",
                        "Label" : "Noncurrent Liabilities",
                        "Order" : 5,
                        "Id" : "d54ac4a8-af6a-4e11-94e1-d7566fbdb23f"
                    }, {
                        "Name" : "fac:Liabilities",
                        "Label" : "Liabilities",
                        "Order" : 6,
                        "Id" : "530d7100-72c7-4e2e-b6bf-7fe047108b6a"
                    }, {
                        "Name" : "fac:CommitmentsAndContingencies",
                        "Label" : "Commitments and Contingencies",
                        "Order" : 7,
                        "Id" : "3fcec7f9-ac17-4cff-95df-2a0f0a7f3de8"
                    }, {
                        "Name" : "fac:TemporaryEquity",
                        "Label" : "Temporary Equity",
                        "Order" : 8,
                        "Id" : "5b6ad874-5269-4114-9df8-d82b40e65af2"
                    }, {
                        "Name" : "fac:RedeemableNoncontrollingInterest",
                        "Label" : "Redeemable Noncontrolling Interest",
                        "Order" : 9,
                        "Id" : "f4d9ed7d-ab0e-434f-b3d1-ddceda0803e8"
                    }, {
                        "Name" : "fac:EquityAttributableToParent",
                        "Label" : "Equity Attributable to Parent",
                        "Order" : 10,
                        "Id" : "6d70df8c-5215-4bc2-85ae-70eda5e06744"
                    }, {
                        "Name" : "fac:EquityAttributableToNoncontrollingInterest",
                        "Label" : "Equity Attributable to Noncontrolling Interest",
                        "Order" : 11,
                        "Id" : "97003475-c14d-4a53-be10-7a4975d34d50"
                    }, {
                        "Name" : "fac:Equity",
                        "Label" : "Equity",
                        "Order" : 12,
                        "Id" : "c59cdf52-d304-45f4-b131-93d74a838d98"
                    }, {
                        "Name" : "fac:LiabilitiesAndEquity",
                        "Label" : "Liabilities and Equity",
                        "Order" : 13,
                        "Id" : "b5a1c875-5911-4398-940d-8d1695cd7eac"
                    } ],
                    "Id" : "35ad1007-6674-481d-b1d2-9bb8c6bbb45f",
                    "IsAbstract" : true
                }, {
                    "Name" : "fac:IncomeStatementHierarchy",
                    "Label" : "Income Statement [Hierarchy]",
                    "To" : [ {
                        "Name" : "fac:Revenues",
                        "Label" : "Revenues",
                        "Order" : 1,
                        "Id" : "bc17477e-b75c-407c-834a-90b1383d88c6"
                    }, {
                        "Name" : "fac:CostOfRevenue",
                        "Label" : "Cost of Revenues",
                        "Order" : 2,
                        "Id" : "b3a8878e-bcc7-42c1-9232-7a3b5548769d"
                    }, {
                        "Name" : "fac:GrossProfit",
                        "Label" : "Gross Profit",
                        "Order" : 3,
                        "Id" : "a3a91297-d9b9-4f46-8f90-972bdcdbd705"
                    }, {
                        "Name" : "fac:OperatingExpenses",
                        "Label" : "Operating Expenses",
                        "Order" : 4,
                        "Id" : "01ee4d13-15f8-44be-88f5-fa8e0dd428ba"
                    }, {
                        "Name" : "fac:CostsAndExpenses",
                        "Label" : "Costs and Expenses",
                        "Order" : 5,
                        "Id" : "dd389af7-9349-40cd-898d-82f892eb1776"
                    }, {
                        "Name" : "fac:OtherOperatingIncomeExpenses",
                        "Label" : "Other Operating Income (Expenses)",
                        "Order" : 6,
                        "Id" : "5d21070a-7b9b-4640-be1e-eb9247aaffd2"
                    }, {
                        "Name" : "fac:OperatingIncomeLoss",
                        "Label" : "Operating Income (Loss)",
                        "Order" : 7,
                        "Id" : "e20bf4b9-3855-42fe-8911-1ed7b8595033"
                    }, {
                        "Name" : "fac:NonoperatingIncomeLoss",
                        "Label" : "Nonoperating Income (Loss)",
                        "Order" : 8,
                        "Id" : "f03d19df-1cdb-419e-b2f0-8e59b84b4e5c"
                    }, {
                        "Name" : "fac:InterestAndDebtExpense",
                        "Label" : "Interest and Debt Expense",
                        "Order" : 9,
                        "Id" : "bd1d42e3-6b96-4a9b-bbe3-beb312e91150"
                    }, {
                        "Name" : "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense",
                        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense",
                        "Order" : 10,
                        "Id" : "898f9cde-740d-4403-8a51-5a460c1d5223"
                    }, {
                        "Name" : "fac:IncomeLossBeforeEquityMethodInvestments",
                        "Label" : "Income (Loss) Before Equity Method Investments",
                        "Order" : 11,
                        "Id" : "6d3b7bd9-fc2b-4ca9-b071-926930af6a03"
                    }, {
                        "Name" : "fac:IncomeLossFromEquityMethodInvestments",
                        "Label" : "Income (Loss) from Equity Method Investments",
                        "Order" : 12,
                        "Id" : "573d25c1-cc32-4420-9dc9-6f3d6745c924"
                    }, {
                        "Name" : "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments",
                        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments",
                        "Order" : 13,
                        "Id" : "b8c4bf89-b2a7-4d4a-9006-73586dea7cca"
                    }, {
                        "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTax",
                        "Label" : "Income (Loss) from Continuing Operations Before Tax",
                        "Order" : 14,
                        "Id" : "bdf371e6-4aa2-457a-b6b6-334041dd17a4"
                    }, {
                        "Name" : "fac:IncomeTaxExpenseBenefit",
                        "Label" : "Income Tax Expense (Benefit)",
                        "Order" : 15,
                        "Id" : "127c2ead-9dc2-48af-a609-54596217d3e5"
                    }, {
                        "Name" : "fac:IncomeLossFromContinuingOperationsAfterTax",
                        "Label" : "Income (Loss) from Continuing Operations After Tax",
                        "Order" : 16,
                        "Id" : "5ff26803-ca39-45ce-9623-083959b019d6"
                    }, {
                        "Name" : "fac:IncomeLossFromDiscontinuedOperationsNetOfTax",
                        "Label" : "Income (Loss) from Discontinued Operations, Net of Tax",
                        "Order" : 17,
                        "Id" : "d1aaa4d3-9e7c-4cb8-936b-7c1de91cc458"
                    }, {
                        "Name" : "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax",
                        "Label" : "Extraordinary Items of Income (Expense), Net of Tax",
                        "Order" : 18,
                        "Id" : "e2af888c-8dcd-41b0-8ff1-c444f5a1a0fa"
                    }, {
                        "Name" : "fac:NetIncomeLoss",
                        "Label" : "Net Income (Loss)",
                        "Order" : 19,
                        "Id" : "8de38627-fc83-493e-b810-8c430cf89821"
                    }, {
                        "Name" : "fac:NetIncomeLossAttributableToParent",
                        "Label" : "Net Income Attributable to Parent",
                        "Order" : 20,
                        "Id" : "57c7b889-eeb8-493e-a98f-11247ec21f4e"
                    }, {
                        "Name" : "fac:NetIncomeLossAttributableToNoncontrollingInterest",
                        "Label" : "Net Income Attributable to Noncontrolling Interest",
                        "Order" : 21,
                        "Id" : "abd4cf79-16d1-401d-be06-5f208719cd5c"
                    }, {
                        "Name" : "fac:ResearchAndDevelopment",
                        "Label" : "Research and Development",
                        "Order" : 22,
                        "Id" : "ef297e4d-89ac-4188-b2fd-0effc268544c"
                    }, {
                        "Name" : "fac:PreferredStockDividendsAndOtherAdjustments",
                        "Label" : "Preferred Stock Dividends and Other Adjustments",
                        "Order" : 23,
                        "Id" : "68ab4c38-51d3-489a-9c5d-05a2ccbf16c2"
                    }, {
                        "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasic",
                        "Label" : "Net Income (Loss) Available to Common Stockholders, Basic",
                        "Order" : 24,
                        "Id" : "4819769a-e020-41fc-a1fc-591c6e2b855d"
                    } ],
                    "Id" : "9bc9d470-7536-4161-bbe3-e0e4925082ed",
                    "IsAbstract" : true
                }, {
                    "Name" : "fac:StatementComprehensiveIncomeHierarchy",
                    "Label" : "Statement of Comprehensive Income [Hierarchy]",
                    "To" : [ {
                        "Name" : "fac:NetIncomeLoss",
                        "Label" : "Net Income (Loss)",
                        "Order" : 1,
                        "Id" : "4c96a34b-f8b6-4978-8bd0-4bf3878f108a"
                    }, {
                        "Name" : "fac:OtherComprehensiveIncomeLoss",
                        "Label" : "Other Comprehensive Income (Loss)",
                        "Order" : 2,
                        "Id" : "bfb0b730-a206-4f23-8fb1-3c252f7eae89"
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLoss",
                        "Label" : "Comprehensive Income (Loss)",
                        "Order" : 3,
                        "Id" : "8e874feb-fc5b-4261-baae-d3ecd897ab15"
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLossAttributableToParent",
                        "Label" : "Comprehensive Income (Loss) Attributable to Parent",
                        "Order" : 4,
                        "Id" : "945c25b6-5795-4ced-8c0f-ad6c97714bb3"
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
                        "Label" : "Comprehensive Income (Loss) Attributable to Noncontrolling Interest",
                        "Order" : 5,
                        "Id" : "18c6cb18-bd7e-4244-8e90-b49a17d2445f"
                    } ],
                    "Id" : "3345a395-a301-4e78-aad1-ecb1de1166aa",
                    "IsAbstract" : true
                }, {
                    "Name" : "fac:CashFlowStatementHierarchy",
                    "Label" : "Cash Flow Statement [Hierarchy]",
                    "To" : [ {
                        "Name" : "fac:NetCashFlowFromOperatingActivitiesContinuing",
                        "Label" : "Net Cash Flow from Operating Activities, Continuing",
                        "Order" : 1,
                        "Id" : "efcb63cc-18ba-4469-ad2f-7e2ca09363f5"
                    }, {
                        "Name" : "fac:NetCashFlowFromOperatingActivitiesDiscontinued",
                        "Label" : "Net Cash Flow from Operating Activities, Discontinued",
                        "Order" : 2,
                        "Id" : "35426691-b2fe-41d0-a525-def1802d5e72"
                    }, {
                        "Name" : "fac:NetCashFlowFromOperatingActivities",
                        "Label" : "Net Cash Flow from Operating Activities",
                        "Order" : 3,
                        "Id" : "ed5d99ef-a7ee-465b-a96f-f5eca5eb1f3f"
                    }, {
                        "Name" : "fac:NetCashFlowFromInvestingActivitiesContinuing",
                        "Label" : "Net Cash Flow from Investing Activities, Continuing",
                        "Order" : 4,
                        "Id" : "22d9c484-33e7-42ea-b5f9-3905cd15c738"
                    }, {
                        "Name" : "fac:NetCashFlowFromInvestingActivitiesDiscontinued",
                        "Label" : "Net Cash Flow from Investing Activities, Discontinued",
                        "Order" : 5,
                        "Id" : "b32c86ba-616c-4685-8fd4-c08ad2baf36b"
                    }, {
                        "Name" : "fac:NetCashFlowFromInvestingActivities",
                        "Label" : "Net Cash Flow from Investing Activities",
                        "Order" : 6,
                        "Id" : "7bd10758-1899-4e5d-b565-8188065af6aa"
                    }, {
                        "Name" : "fac:NetCashFlowFromFinancingActivitiesContinuing",
                        "Label" : "Net Cash Flow from Financing Activities, Continuing",
                        "Order" : 7,
                        "Id" : "34a5cbf9-197b-490d-a146-22f54bcbac66"
                    }, {
                        "Name" : "fac:NetCashFlowFromFinancingActivitiesDiscontinued",
                        "Label" : "Net Cash Flow from Financing Activities, Discontinued",
                        "Order" : 8,
                        "Id" : "2f1a141d-981d-4c75-b03e-94919b030aec"
                    }, {
                        "Name" : "fac:NetCashFlowFromFinancingActivities",
                        "Label" : "Net Cash Flow from Financing Activities",
                        "Order" : 9,
                        "Id" : "e4602916-882e-472a-8574-a991f86c8152"
                    }, {
                        "Name" : "fac:NetCashFlowContinuing",
                        "Label" : "Net Cash Flow, Continuing",
                        "Order" : 10,
                        "Id" : "464004ea-9f9a-439f-9cb7-04af54024ed9"
                    }, {
                        "Name" : "fac:NetCashFlowDiscontinued",
                        "Label" : "Net Cash Flow, Discontinued",
                        "Order" : 11,
                        "Id" : "fb5a765f-6f8e-4409-be72-af711bca19cc"
                    }, {
                        "Name" : "fac:ExchangeGainsLosses",
                        "Label" : "Exchange Gains (Losses)",
                        "Order" : 12,
                        "Id" : "cf75293f-3eb5-45d3-9477-c5a025edd184"
                    }, {
                        "Name" : "fac:NetCashFlow",
                        "Label" : "Net Cash Flow",
                        "Order" : 13,
                        "Id" : "e988dd46-dbf2-4a1e-89ea-55c23e753f79"
                    } ],
                    "Id" : "ea86a7f9-ab3b-4a87-9d4c-f248f33e59b7",
                    "IsAbstract" : true
                }, {
                    "Name" : "fac:KeyRatiosHierarchy",
                    "Label" : "Key Ratios [Hierarchy]",
                    "To" : [ {
                        "Name" : "fac:ReturnOnAssets",
                        "Label" : "Return on Assets (ROA)",
                        "Order" : 1,
                        "Id" : "1308ff1d-5835-4058-8f3f-586a92215db3"
                    }, {
                        "Name" : "fac:ReturnOnSales",
                        "Label" : "Return on Sales (ROS)",
                        "Order" : 2,
                        "Id" : "3802316b-efc5-4c1c-b29a-37419a8e3d32"
                    }, {
                        "Name" : "fac:SustainableGrowthRate",
                        "Label" : "Sustainable Growth Rate (SGR)",
                        "Order" : 3,
                        "Id" : "eafd48e1-672a-4743-8208-f12ee998d7a7"
                    }, {
                        "Name" : "fac:ReturnOnEquity",
                        "Label" : "Return on Equity (ROE)",
                        "Order" : 4,
                        "Id" : "fa933373-3a51-422a-ab67-66d8cecf6736"
                    } ],
                    "Id" : "cb706c3a-cf45-476d-b7b4-4074a163026e",
                    "IsAbstract" : true
                }, {
                    "Name" : "fac:Validations",
                    "Label" : "Fact Validation Rule Results [Hierarchy]",
                    "To" : [ {
                        "Name" : "fac:EquityValidation",
                        "Label" : "[BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest",
                        "Id" : "a91f84a2-7333-40eb-9682-fb6f9e673b18",
                        "Order" : 1
                    }, {
                        "Name" : "fac:AssetsValidation2",
                        "Label" : "[BS3] Assets = CurrentAssets + NoncurrentAssets",
                        "Id" : "201eb543-13dd-4d0f-ad4c-be3825f01930",
                        "Order" : 3
                    }, {
                        "Name" : "fac:LiabilitiesValidation",
                        "Label" : "[BS4] Liabilities = CurrentLiabilities + NoncurrentLiabilities",
                        "Id" : "9a4f5bd8-ea40-4738-b89c-1c1d4c9732aa",
                        "Order" : 4
                    }, {
                        "Name" : "fac:LiabilitiesAndEquityValidation",
                        "Label" : "[BS5] LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity",
                        "Id" : "c91f1008-a989-42cf-a83a-81a0dbab4873",
                        "Order" : 5
                    }, {
                        "Name" : "fac:GrossProfitValidation",
                        "Label" : "[IS1] GrossProfit = Revenues - CostOfRevenue",
                        "Id" : "49f1c876-4510-41f5-84b1-55c94678c46a",
                        "Order" : 6
                    }, {
                        "Name" : "fac:OperatingIncomeLossValidation",
                        "Label" : "[IS2] OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses",
                        "Id" : "92459f1c-8051-49e5-9fd5-db16cd2e3710",
                        "Order" : 7
                    }, {
                        "Name" : "fac:IncomeLossBeforeEquityMethodInvestmentsValidation",
                        "Label" : "[IS3] IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense",
                        "Id" : "ed742251-b569-43f1-98f9-fe1c814c374e",
                        "Order" : 8
                    }, {
                        "Name" : "fac:IncomeLossFromContinuingOperationsAfterTaxValidation",
                        "Label" : "[IS5] IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit",
                        "Id" : "f1b04b83-1b34-465d-b73b-0bfe58d25924",
                        "Order" : 10
                    }, {
                        "Name" : "fac:NetIncomeLossValidation",
                        "Label" : "[IS6] NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax",
                        "Id" : "3a502c79-29ce-44e5-acea-8670ad4d4aba",
                        "Order" : 11
                    }, {
                        "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation",
                        "Label" : "[IS8] NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments",
                        "Id" : "2550e442-9a0f-41da-99a2-8ebab9acca60",
                        "Order" : 13
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLossValidation",
                        "Label" : "[IS9] ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
                        "Id" : "86bd842b-7c76-41a5-862d-2a73d3b09b12",
                        "Order" : 14
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLossValidation2",
                        "Label" : "[IS10] ComprehensiveIncomeLoss = NetIncomeLoss + OtherComprehensiveIncomeLoss",
                        "Id" : "b6f17ac1-3244-43c4-ac74-873697c0ef9c",
                        "Order" : 15
                    }, {
                        "Name" : "fac:OperatingIncomeLossValidation2",
                        "Label" : "[IS11] OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses",
                        "Id" : "b464599f-25a6-4bc7-83c0-18b53ddb61e1",
                        "Order" : 16
                    }, {
                        "Name" : "fac:NetCashFlowValidation",
                        "Label" : "[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]",
                        "Id" : "c13c8d66-f83b-44d3-9296-305e874b794b",
                        "Order" : 17
                    }, {
                        "Name" : "fac:NetCashFlowContinuingValidation",
                        "Label" : "[CF2] NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing",
                        "Id" : "56dc32e6-1f26-4f8f-a93e-20b246a56575",
                        "Order" : 18
                    }, {
                        "Name" : "fac:NetCashFlowDiscontinuedValidation",
                        "Label" : "[CF3] NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued",
                        "Id" : "0fb7b760-405d-447c-ba69-de41d99216f9",
                        "Order" : 19
                    }, {
                        "Name" : "fac:NetCashFlowFromOperatingActivitiesValidation",
                        "Label" : "[CF4] NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued",
                        "Id" : "897ba356-f94f-4d11-95ae-950be64ff656",
                        "Order" : 20
                    }, {
                        "Name" : "fac:NetCashFlowFromInvestingActivitiesValidation",
                        "Label" : "[CF5] NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued",
                        "Id" : "a40fe0f9-c8cd-46f2-a2d9-0c862f5fd987",
                        "Order" : 21
                    }, {
                        "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation",
                        "Label" : "[IS4] IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments",
                        "Id" : "fb75d915-dbb1-4386-a616-f850a21e14a1",
                        "Order" : 9
                    }, {
                        "Name" : "fac:NetCashFlowFromFinancingActivitiesValidation",
                        "Label" : "[CF6] NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued",
                        "Id" : "30cf2b70-ae4d-4f22-a445-3e42afb37363",
                        "Order" : 22
                    }, {
                        "Name" : "fac:NetIncomeLossValidation2",
                        "Label" : "[IS7] NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest",
                        "Id" : "ada5245b-0a9f-4783-8ea7-852e639a716a",
                        "Order" : 12
                    }, {
                        "Name" : "fac:AssetsValidation",
                        "Label" : "[BS2] Assets = LiabilitiesAndEquity",
                        "Id" : "1314c825-263e-4026-b1e8-52f1019a5a82",
                        "Order" : 2
                    } ],
                    "Id" : "07449cd9-1dbf-4978-ba43-7d84cf5cfc2f",
                    "IsAbstract" : true
                } ],
                "Id" : "5a800c15-8a39-4228-93e1-08c967d917e5",
                "IsAbstract" : true
            } ],
            "Id" : "7f8a6800-a523-41a5-98d2-6c2a01f3f604",
            "IsAbstract" : true
        } ]
    }, {
        "LinkName" : "link:definitionLink",
        "LinkRole" : "http://xbrl.io/basic-financial-information",
        "ArcName" : "link:definitionArc",
        "ArcRole" : "http://www.xbrlsite.com/2013/fro/arcrole/class-subClass",
        "Kind" : "InterConceptTreeNetwork",
        "ShortName" : "ConceptMap",
        "CyclesAllowed" : "undirected",
        "Trees" : [ {
            "Name" : "fac:PreferredStockDividendsAndOtherAdjustments",
            "Label" : "Preferred Stock Dividends and Other Adjustments",
            "To" : [ {
                "Name" : "us-gaap:PreferredStockDividendsAndOtherAdjustments",
                "Id" : "07a67fb6-f09c-4d7a-8cd9-405db8bb447e"
            } ],
            "Id" : "3947f39d-4a52-4aa9-b750-1e2c466a2ffb"
        }, {
            "Name" : "fac:NoncurrentLiabilities",
            "Label" : "Noncurrent Liabilities",
            "To" : [ {
                "Name" : "us-gaap:LiabilitiesNoncurrent",
                "Id" : "20d8f287-f6ab-411a-bee7-aeda9022da96"
            } ],
            "Id" : "43aa816d-3602-4cd0-bbe3-80be9cc7c9b6"
        }, {
            "Name" : "fac:EntityRegistrantName",
            "Label" : "Entity Registrant Name",
            "To" : [ {
                "Name" : "dei:EntityRegistrantName",
                "Id" : "40cdc89c-ed17-4fab-993e-9d7573369c47"
            } ],
            "Id" : "cafbf475-357d-4d5a-a004-4f594fc90474"
        }, {
            "Name" : "fac:Revenues",
            "Label" : "Revenues",
            "To" : [ {
                "Name" : "us-gaap:Revenues",
                "Id" : "bb17a6b5-c881-4e32-82c9-f6208a15d9de"
            }, {
                "Name" : "us-gaap:SalesRevenueNet",
                "Id" : "afbe39a6-9a62-40e2-9acb-4d0c45f5d1f2"
            }, {
                "Name" : "us-gaap:SalesRevenueServicesNet",
                "Id" : "80cbc877-b0f4-47fb-a44d-59d33302f724"
            }, {
                "Name" : "us-gaap:SalesRevenueGoodsNet",
                "Id" : "e4d3bd39-4441-462b-b778-37b487415b97"
            }, {
                "Name" : "us-gaap:RevenuesNetOfInterestExpense",
                "Id" : "206d16ea-7aa3-4357-892e-162635694f5b"
            }, {
                "Name" : "us-gaap:HealthCareOrganizationRevenue",
                "Id" : "fd8b327c-556d-4ea8-a06e-dca505bfe17a"
            }, {
                "Name" : "us-gaap:InterestAndDividendIncomeOperating",
                "Id" : "d54ea5a3-0766-4284-83c1-885848c97c0f"
            }, {
                "Name" : "us-gaap:RealEstateRevenueNet",
                "Id" : "b94f6393-f316-4017-bce6-b92cfe044c0d"
            }, {
                "Name" : "us-gaap:RevenueMineralSales",
                "Id" : "428f6c42-b229-4005-936e-11d863459cff"
            }, {
                "Name" : "us-gaap:OilAndGasRevenue",
                "Id" : "8484103d-fd87-42c3-ac14-abf7a094a282"
            }, {
                "Name" : "us-gaap:RegulatedAndUnregulatedOperatingRevenue",
                "Id" : "003c1b99-3074-4758-b81e-f37b418f9eac"
            }, {
                "Name" : "us-gaap:FinancialServicesRevenue",
                "Id" : "43d3e84c-e06c-458a-87a0-ade7f98f452c"
            }, {
                "Name" : "us-gaap:ShippingAndHandlingRevenue",
                "Id" : "52ca1a52-0cce-4980-b3d6-d47551610d34"
            }, {
                "Name" : "us-gaap:SalesRevenueFromEnergyCommoditiesAndServices",
                "Id" : "b002598a-c744-4554-b1f8-98824fb82d82"
            }, {
                "Name" : "us-gaap:UtilityRevenue",
                "Id" : "032bd095-8901-409e-8982-f1aac3681ad6"
            }, {
                "Name" : "us-gaap:PhaseInPlanAmountOfCapitalizedCostsRecovered",
                "Id" : "a5412af0-2583-4e33-8dfe-3dd5bd55e944"
            }, {
                "Name" : "us-gaap:SecondaryProcessingRevenue",
                "Id" : "20da8d58-67c4-40db-ad37-9b96d72fb1b4"
            }, {
                "Name" : "us-gaap:RevenueSteamProductsAndServices",
                "Id" : "c77f9e01-44f2-4537-a0e1-de41dbc4de78"
            }, {
                "Name" : "us-gaap:RevenueFromLeasedAndOwnedHotels",
                "Id" : "37c1dcfe-d982-450a-83e6-032f271fb75e"
            }, {
                "Name" : "us-gaap:FranchisorRevenue",
                "Id" : "fff4d73b-c03f-4842-a0bc-ca5659df8200"
            }, {
                "Name" : "us-gaap:SubscriptionRevenue",
                "Id" : "887294e2-001b-420f-b700-b27194225335"
            }, {
                "Name" : "us-gaap:AdvertisingRevenue",
                "Id" : "5dc17ee0-1da6-481f-93bb-f05e776b6f54"
            }, {
                "Name" : "us-gaap:AdmissionsRevenue",
                "Id" : "5bc89800-986e-4c6d-b068-6a774184c1cd"
            }, {
                "Name" : "us-gaap:RevenueFromEnrollmentAndRegistrationFeesExcludingHospitalityEnterprises",
                "Id" : "046895b9-2f82-4009-8c47-f225a97cfef4"
            }, {
                "Name" : "us-gaap:MembershipDuesRevenueOnGoing",
                "Id" : "cfd58746-e2f0-4a4f-a666-d8ba73c99c7b"
            }, {
                "Name" : "us-gaap:LicensesRevenue",
                "Id" : "edf01b78-011a-45a0-ade3-14347f7b073f"
            }, {
                "Name" : "us-gaap:RoyaltyRevenue",
                "Id" : "d34686af-345a-4052-bcdf-44c77b3c26b9"
            }, {
                "Name" : "us-gaap:SalesOfOilAndGasProspects",
                "Id" : "89e34d89-8868-42dc-95e9-16a41ad1a75c"
            }, {
                "Name" : "us-gaap:ClearingFeesRevenue",
                "Id" : "d730fb6b-1c61-411a-9a71-a818227a0699"
            }, {
                "Name" : "us-gaap:ReimbursementRevenue",
                "Id" : "6dc8d8da-40c5-4db7-9952-d1a4bf31638b"
            }, {
                "Name" : "us-gaap:RevenueFromGrants",
                "Id" : "cdde62ba-b974-4939-b46a-2eb72ecc6177"
            }, {
                "Name" : "us-gaap:RevenueOtherManufacturedProducts",
                "Id" : "8672b43f-8716-4ec2-a3cb-bed35ed6591e"
            }, {
                "Name" : "us-gaap:ConstructionMaterialsRevenue",
                "Id" : "3ff17025-aa04-47a2-a84b-d757330e20bb"
            }, {
                "Name" : "us-gaap:TimberRevenue",
                "Id" : "5638565d-565a-4fb4-8c8a-89f099b6eb00"
            }, {
                "Name" : "us-gaap:RecyclingRevenue",
                "Id" : "2d15a667-612e-4c59-bb28-3c82e97df038"
            }, {
                "Name" : "us-gaap:OtherSalesRevenueNet",
                "Id" : "cb036fbb-373b-45fa-b567-7b304f8feca3"
            }, {
                "Name" : "us-gaap:SaleOfTrustAssetsToPayExpenses",
                "Id" : "f98f6df2-7c08-4f7a-9d56-96884e0e5d54"
            }, {
                "Name" : "us-gaap:PassengerRevenue",
                "Id" : "f894a241-19bf-431d-b271-fd866658fa66"
            }, {
                "Name" : "us-gaap:VehicleTollRevenue",
                "Id" : "07d81ec1-dd6a-44c6-9d22-3d6aa69d2ced"
            }, {
                "Name" : "us-gaap:CargoAndFreightRevenue",
                "Id" : "f4f07b9a-7e23-4a08-bf22-3cecd123e37c"
            }, {
                "Name" : "us-gaap:NetInvestmentIncome",
                "Id" : "cc9169e5-dbfa-49bf-9237-3e2a07687e0a"
            }, {
                "Name" : "us-gaap:RevenuesExcludingInterestAndDividends",
                "Id" : "70fbf496-2fd1-4b1f-b838-bda9a2a21e72"
            }, {
                "Name" : "us-gaap:InvestmentBankingRevenue",
                "Id" : "d6204306-6101-407f-bb71-1ac7394eb818"
            }, {
                "Name" : "us-gaap:UnderwritingIncomeLoss",
                "Id" : "f3b0fcdc-4c00-4f43-926b-286c786a31df"
            }, {
                "Name" : "us-gaap:MarketDataRevenue",
                "Id" : "5a2c3012-c599-4cc3-8155-352f1cc5aff0"
            } ],
            "Id" : "b7adfbd2-ee02-406c-84e2-2b1cadd396b1"
        }, {
            "Name" : "fac:NetCashFlowContinuing",
            "Label" : "Net Cash Flow, Continuing",
            "To" : [ {
                "Name" : "us-gaap:NetCashProvidedByUsedInContinuingOperations",
                "Id" : "456ba8bf-7c9b-4019-95a8-2b90ac4084fc"
            } ],
            "Id" : "47771240-291b-467f-999a-dd8539290a29"
        }, {
            "Name" : "fac:Assets",
            "Label" : "Assets",
            "To" : [ {
                "Id" : "0ee2719f-96a9-4ba4-8c9e-0b361af69d2c",
                "Name" : "us-gaap:Assets",
                "Order" : 1
            }, {
                "Id" : "131ad3b9-1ef5-49e8-810b-15dc32b8394a",
                "Name" : "us-gaap:AssetsCurrent",
                "Order" : 2
            } ],
            "Id" : "4ab5d61d-393d-4d9e-9b9f-6c7ae97d8db1"
        }, {
            "Name" : "fac:EquityAttributableToParent",
            "Label" : "Equity Attributable to Parent",
            "To" : [ {
                "Name" : "us-gaap:StockholdersEquity",
                "Id" : "131424be-7c97-4cda-b735-200ef2309844"
            }, {
                "Name" : "us-gaap:PartnersCapital",
                "Id" : "9591c4c2-7c49-4bb2-95cd-5b6035df0c60"
            }, {
                "Name" : "us-gaap:MemberEquity",
                "Id" : "3dda6a8a-6dae-4209-9c85-6af499e26f68"
            } ],
            "Id" : "080b29b1-98ff-4b1c-a520-9f50460b2545"
        }, {
            "Name" : "fac:InterestAndDebtExpense",
            "Label" : "Interest and Debt Expense",
            "To" : [ {
                "Name" : "us-gaap:InterestAndDebtExpense",
                "Id" : "01fe3c6b-3d0a-4010-a96a-a19da9bf8de7"
            } ],
            "Id" : "f913dfa2-a0f3-4e92-ba89-94cc487c6749"
        }, {
            "Name" : "fac:IncomeTaxExpenseBenefit",
            "Label" : "Income Tax Expense (Benefit)",
            "To" : [ {
                "Name" : "us-gaap:IncomeTaxExpenseBenefit",
                "Id" : "bea18b1f-129c-448a-a9ee-c74b121057f6"
            }, {
                "Name" : "us-gaap:IncomeTaxExpenseBenefitContinuingOperations",
                "Id" : "18a9eaa4-5135-4917-8edb-ee1bf800f6b0"
            }, {
                "Name" : "us-gaap:FederalHomeLoanBankAssessments",
                "Id" : "d72beb19-fcd2-4f8d-8a74-3daabf6c4df0"
            } ],
            "Id" : "593c2099-f044-4e4d-853c-a2f5dbf66cc4"
        }, {
            "Name" : "fac:EntityCentralIndexKey",
            "Label" : "Central Index Key (CIK)",
            "To" : [ {
                "Name" : "dei:EntityCentralIndexKey",
                "Id" : "042d8097-89a1-451d-8ee7-d81361db4c40"
            } ],
            "Id" : "73c3ebbd-1861-4581-9633-e1debb503037"
        }, {
            "Name" : "fac:NatureOfOperations",
            "Label" : "Nature of Operations",
            "To" : [ {
                "Name" : "us-gaap:NatureOfOperations",
                "Id" : "d3c74b93-6595-4d0d-afef-bd0e5a3def6a"
            }, {
                "Name" : "us-gaap:BusinessDescriptionAndBasisOfPresentationTextBlock",
                "Id" : "1c1a4021-690b-4278-b563-1a680264e916"
            }, {
                "Name" : "us-gaap:OrganizationConsolidationAndPresentationOfFinancialStatementsDisclosureTextBlock",
                "Id" : "718781e7-4faa-4ee3-9b65-f019c946f23e"
            }, {
                "Name" : "us-gaap:OrganizationConsolidationBasisOfPresentationBusinessDescriptionAndAccountingPoliciesTextBlock",
                "Id" : "415a27ba-96ba-4ea4-a56e-3ee68a7cd696"
            } ],
            "Id" : "63b4557c-e54d-4b55-abfd-4f1638f8595a"
        }, {
            "Name" : "fac:ResearchAndDevelopment",
            "Label" : "Research and Development",
            "To" : [ {
                "Name" : "us-gaap:ResearchAndDevelopmentExpense",
                "Id" : "216f2594-0294-4fda-9366-61bcd0240385"
            }, {
                "Name" : "us-gaap:ResearchAndDevelopmentExpenseExcludingAcquiredInProcessCost",
                "Id" : "da9322fc-1331-4dec-b5e5-94607cf385cd"
            }, {
                "Name" : "us-gaap:ResearchAndDevelopmentExpenseSoftwareExcludingAcquiredInProcessCost",
                "Id" : "fc62e94d-ec13-499e-bcfc-3f6e553f9dfb"
            }, {
                "Name" : "us-gaap:ResearchAndDevelopmentInProcess",
                "Id" : "6e5f5939-6b33-4872-afb4-ecacc5166828"
            }, {
                "Name" : "us-gaap:ResearchAndDevelopmentAssetAcquiredOtherThanThroughBusinessCombinationWrittenOff",
                "Id" : "0aabca20-300b-4cd6-8522-e936dfa91aa1"
            } ],
            "Id" : "3dde3358-7168-4b01-9a96-034344ee7681"
        }, {
            "Name" : "fac:OtherOperatingIncomeExpenses",
            "Label" : "Other Operating Income (Expenses)",
            "To" : [ {
                "Name" : "us-gaap:OtherOperatingIncome",
                "Id" : "4682eb68-4c28-44d5-bc9f-e50b0c36c4fc"
            } ],
            "Id" : "bbb6ebda-c920-4d11-b71c-31738b5f4501"
        }, {
            "Name" : "fac:NetCashFlowFromInvestingActivities",
            "Label" : "Net Cash Flow from Investing Activities",
            "To" : [ {
                "Name" : "us-gaap:NetCashProvidedByUsedInInvestingActivities",
                "Id" : "27be0330-d36e-41dd-81e8-2a42b3a930e8"
            } ],
            "Id" : "1daaeb76-c502-4e33-b139-465af8b9ea6b"
        }, {
            "Name" : "fac:IncomeLossBeforeEquityMethodInvestments",
            "Label" : "Income (Loss) Before Equity Method Investments",
            "To" : [ {
                "Name" : "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesMinorityInterestAndIncomeLossFromEquityMethodInvestments",
                "Id" : "d71ef5ab-0448-4a1e-ac46-eed1f191a9d8"
            } ],
            "Id" : "7c5986ff-40a0-4f6e-a9d6-7c142fa6896b"
        }, {
            "Name" : "fac:TradingSymbol",
            "Label" : "Trading Symbol",
            "To" : [ {
                "Name" : "dei:TradingSymbol",
                "Id" : "19d02c19-ea68-420b-8b92-c4208f34880c"
            } ],
            "Id" : "8f5e2b02-d51d-473e-8c2a-4b01275d975c"
        }, {
            "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasic",
            "Label" : "Net Income (Loss) Available to Common Stockholders, Basic",
            "To" : [ {
                "Name" : "us-gaap:NetIncomeLossAvailableToCommonStockholdersBasic",
                "Id" : "a5d316f3-9a21-4da6-9344-b5054b531e31"
            } ],
            "Id" : "1588c523-1f20-43c0-95b5-926dd5e087d6"
        }, {
            "Name" : "fac:EntityFilerCategory",
            "Label" : "Entity Filer Category",
            "To" : [ {
                "Name" : "dei:EntityFilerCategory",
                "Id" : "0d4a05e8-f64f-4fef-bb07-81108da1759d"
            } ],
            "Id" : "939209d3-5434-4436-a636-66e36e372c98"
        }, {
            "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTax",
            "Label" : "Income (Loss) from Continuing Operations Before Tax",
            "To" : [ {
                "Name" : "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesExtraordinaryItemsNoncontrollingInterest",
                "Id" : "2ab4dcbb-3f95-4c47-af72-c9972e5cf3d8"
            }, {
                "Name" : "us-gaap:IncomeLossFromContinuingOperationsBeforeIncomeTaxesMinorityInterestAndIncomeLossFromEquityMethodInvestments",
                "Id" : "50765905-a1ab-4593-a742-a84f7ce8fe10"
            } ],
            "Id" : "aeddbae4-63a0-4982-bba7-f47763404186"
        }, {
            "Name" : "fac:OperatingExpenses",
            "Label" : "Operating Expenses",
            "To" : [ {
                "Name" : "us-gaap:OperatingExpenses",
                "Id" : "4bd413f0-2ee4-4852-b7e9-ce545e10e828"
            }, {
                "Name" : "us-gaap:OperatingCostsAndExpenses",
                "Id" : "289e6457-3721-40f1-a9d7-98e14b5d0e65"
            } ],
            "Id" : "8470e939-9745-48b3-8d5a-4da8cea3ca69"
        }, {
            "Name" : "fac:NetCashFlowDiscontinued",
            "Label" : "Net Cash Flow, Discontinued",
            "To" : [ {
                "Name" : "us-gaap:NetCashProvidedByUsedInDiscontinuedOperations",
                "Id" : "e8415a25-01fa-4f56-847d-e5147376fcca"
            } ],
            "Id" : "77329c4a-d5f3-437d-9edc-77498e4a63b6"
        }, {
            "Name" : "fac:Liabilities",
            "Label" : "Liabilities",
            "To" : [ {
                "Name" : "us-gaap:Liabilities",
                "Id" : "4edf6ae7-0919-4756-9b93-dcb0637fd6d0"
            } ],
            "Id" : "7083d81c-4851-47ad-a33f-5147d0fa5553"
        }, {
            "Name" : "fac:ComprehensiveIncomeLossAttributableToParent",
            "Label" : "Comprehensive Income (Loss) Attributable to Parent",
            "To" : [ {
                "Name" : "us-gaap:ComprehensiveIncomeNetOfTax",
                "Id" : "6a1eb0d4-74d8-4fbd-b890-fe04d388fcaf"
            } ],
            "Id" : "36e37b04-64bb-426d-a6c9-e2a82dc6f18c"
        }, {
            "Name" : "fac:CostOfRevenue",
            "Label" : "Cost of Revenues",
            "To" : [ {
                "Name" : "us-gaap:CostOfRevenue",
                "Id" : "be2cc426-3691-4feb-9a53-ad63cf85b843"
            }, {
                "Name" : "us-gaap:CostOfGoodsAndServicesSold",
                "Id" : "b55a9135-ceae-42c6-b6c3-e38c970a7a78"
            }, {
                "Name" : "us-gaap:CostOfServices",
                "Id" : "7d25bb66-320f-4958-a942-90a3c2ff34a0"
            }, {
                "Name" : "us-gaap:CostOfGoodsSold",
                "Id" : "2b2d1a1c-d4f0-4fc4-8247-aebfb86f7778"
            } ],
            "Id" : "da7d9535-dec2-48b7-a532-5fc2e59f7e10"
        }, {
            "Name" : "fac:NetCashFlow",
            "Label" : "Net Cash Flow",
            "To" : [ {
                "Name" : "us-gaap:CashAndCashEquivalentsPeriodIncreaseDecrease",
                "Id" : "306de736-7887-408e-a29b-488a03e93994"
            }, {
                "Name" : "us-gaap:CashPeriodIncreaseDecrease",
                "Id" : "b0442974-a7f4-4764-b1ac-5b359ac3cef9"
            }, {
                "Name" : "us-gaap:NetCashProvidedByUsedInContinuingOperations",
                "Id" : "f2830469-9df9-4b86-8c66-2cf80162daff"
            } ],
            "Id" : "03ced8bf-bfaf-4b2f-a099-0070660991d4"
        }, {
            "Name" : "fac:NonoperatingIncomeLoss",
            "Label" : "Nonoperating Income (Loss)",
            "To" : [ {
                "Name" : "us-gaap:NonoperatingIncomeExpense",
                "Id" : "96dd0fa2-4244-482e-aba9-75df3f0de85d"
            } ],
            "Id" : "073a78d0-6f53-4715-8c52-5434dfe761aa"
        }, {
            "Name" : "fac:NetCashFlowFromFinancingActivitiesContinuing",
            "Label" : "Net Cash Flow from Financing Activities, Continuing",
            "To" : [ {
                "Name" : "us-gaap:NetCashProvidedByUsedInFinancingActivitiesContinuingOperations",
                "Id" : "d59918e9-11b6-42a6-b3cc-cc194aa81cda"
            } ],
            "Id" : "a69d5218-110d-4122-9b36-474f5b73c749"
        }, {
            "Name" : "fac:IncomeLossFromContinuingOperationsAfterTax",
            "Label" : "Income (Loss) from Continuing Operations After Tax",
            "To" : [ {
                "Name" : "us-gaap:IncomeLossFromContinuingOperationsIncludingPortionAttributableToNoncontrollingInterest",
                "Id" : "74d61400-8e48-4ad9-a8bb-5891cc75f1b0"
            }, {
                "Name" : "us-gaap:IncomeLossBeforeExtraordinaryItemsAndCumulativeEffectOfChangeInAccountingPrinciple",
                "Id" : "05bc52bd-ed84-4caf-9dcf-2bd7776dc241"
            }, {
                "Name" : "us-gaap:IncomeLossFromContinuingOperations",
                "Id" : "7db2fec5-373f-4357-b8e3-61e7f5f4f8e0"
            } ],
            "Id" : "b411d599-3024-4e91-a9fe-7a4c4f9332a1"
        }, {
            "Name" : "fac:NetIncomeLossAttributableToParent",
            "Label" : "Net Income Attributable to Parent",
            "To" : [ {
                "Name" : "us-gaap:NetIncomeLoss",
                "Id" : "472745ea-362d-484f-b85d-59222229c820"
            } ],
            "Id" : "47a59d37-7cec-4815-90eb-c6809041e5e2"
        }, {
            "Name" : "fac:CommitmentsAndContingencies",
            "Label" : "Commitments and Contingencies",
            "To" : [ {
                "Name" : "us-gaap:CommitmentsAndContingencies",
                "Id" : "3311107e-61bc-431e-aa37-3b3784f113d3"
            } ],
            "Id" : "f6dc2e49-451c-40cd-834b-4a5186c043b3"
        }, {
            "Name" : "fac:NetCashFlowFromInvestingActivitiesDiscontinued",
            "Label" : "Net Cash Flow from Investing Activities, Discontinued",
            "To" : [ {
                "Name" : "us-gaap:CashProvidedByUsedInInvestingActivitiesDiscontinuedOperations",
                "Id" : "dc316e40-dd3d-4432-86f2-cd7250da0c6e"
            } ],
            "Id" : "ba4ce76b-05a7-46f1-ac81-d0a3ea052fb8"
        }, {
            "Name" : "fac:NetCashFlowFromFinancingActivitiesDiscontinued",
            "Label" : "Net Cash Flow from Financing Activities, Discontinued",
            "To" : [ {
                "Name" : "us-gaap:CashProvidedByUsedInFinancingActivitiesDiscontinuedOperations",
                "Id" : "99c3e1f0-4faf-4453-87e9-c2617b1b8d49"
            } ],
            "Id" : "792e8053-1fd1-4052-80b7-c3647099daef"
        }, {
            "Name" : "fac:NetIncomeLossAttributableToNoncontrollingInterest",
            "Label" : "Net Income Attributable to Noncontrolling Interest",
            "To" : [ {
                "Name" : "us-gaap:NetIncomeLossAttributableToNoncontrollingInterest",
                "Id" : "d7f71c5c-a7ed-40a2-b592-1fc7d81006bf"
            } ],
            "Id" : "c5832ad5-094f-4f12-9991-15303b56074b"
        }, {
            "Name" : "fac:FiscalYearEnd",
            "Label" : "Fiscal Year End",
            "To" : [ {
                "Name" : "dei:CurrentFiscalYearEndDate",
                "Id" : "5297ff3b-0d8b-4274-8b95-73fad1df2a03"
            } ],
            "Id" : "e8db794e-17b0-4335-b288-6655e8ec0bca"
        }, {
            "Name" : "fac:NoncurrentAssets",
            "Label" : "Noncurrent Assets",
            "To" : [ {
                "Name" : "us-gaap:AssetsNoncurrent",
                "Id" : "78a8aeb6-66b5-4de8-bd45-d147d045da63"
            } ],
            "Id" : "4c882455-6e23-4398-9fa0-6ac12dd80b04"
        }, {
            "Name" : "fac:FiscalPeriod",
            "Label" : "Fiscal Period",
            "To" : [ {
                "Name" : "dei:DocumentFiscalPeriodFocus",
                "Id" : "b10919ff-b88a-407e-84ab-69c334824c13"
            } ],
            "Id" : "357ac670-ac11-4ce2-803a-1fb7cbf12e1d"
        }, {
            "Name" : "fac:FiscalYear",
            "Label" : "Fiscal Year",
            "To" : [ {
                "Name" : "dei:DocumentFiscalYearFocus",
                "Id" : "ffeeaf3a-794c-4b6c-ba71-f73013ce612f"
            } ],
            "Id" : "3155f4fa-fc35-4ec2-a667-a45b5cf226af"
        }, {
            "Name" : "fac:NetIncomeLoss",
            "Label" : "Net Income (Loss)",
            "To" : [ {
                "Name" : "us-gaap:ProfitLoss",
                "Id" : "60633ca0-4313-4407-8577-c5bb870bf9b0"
            }, {
                "Name" : "us-gaap:NetIncomeLoss",
                "Id" : "22a47996-5cc3-48dd-93b3-f15ee6e6277e"
            }, {
                "Name" : "us-gaap:NetIncomeLossAvailableToCommonStockholdersBasic",
                "Id" : "4ac07caf-5443-4c8e-98c8-2b97095af197"
            }, {
                "Name" : "us-gaap:IncomeLossFromContinuingOperations",
                "Id" : "9076ab5c-5c52-4086-b867-27292a53ae0f"
            }, {
                "Name" : "us-gaap:IncomeLossAttributableToParent",
                "Id" : "f037c4da-08d7-47c8-8dae-9faf5bb35a59"
            }, {
                "Name" : "us-gaap:IncomeLossFromContinuingOperationsIncludingPortionAttributableToNoncontrollingInterest",
                "Id" : "fb683fe6-6175-4e4f-b455-f95ca20b6ed6"
            } ],
            "Id" : "b5164267-d716-452e-aa19-e77922614ef2"
        }, {
            "Name" : "fac:ExchangeGainsLosses",
            "Label" : "Exchange Gains (Losses)",
            "To" : [ {
                "Name" : "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalents",
                "Id" : "26df39ea-441a-46d9-8e40-98e4b188e1ce"
            }, {
                "Name" : "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalentsContinuingOperations",
                "Id" : "7f75fac8-fcda-4504-b5c2-e0a3b14536b5"
            }, {
                "Name" : "us-gaap:EffectOfExchangeRateOnCashAndCashEquivalentsDiscontinuedOperations",
                "Id" : "4c8c160d-3418-4485-af6f-f77f4c314a59"
            } ],
            "Id" : "99cea5bd-1fee-4ccd-bc18-1d9cbd045bd7"
        }, {
            "Name" : "fac:GrossProfit",
            "Label" : "Gross Profit",
            "To" : [ {
                "Name" : "us-gaap:GrossProfit",
                "Id" : "632bc06e-34d2-4ed9-b9cb-c04667c51079"
            } ],
            "Id" : "1b2165c5-9d51-4d3a-aa89-83bcb2b7d342"
        }, {
            "Name" : "fac:EquityAttributableToNoncontrollingInterest",
            "Label" : "Equity Attributable to Noncontrolling Interest",
            "To" : [ {
                "Name" : "us-gaap:MinorityInterest",
                "Id" : "22c9ec20-42b4-4546-9a7f-1dd835d9d7af"
            }, {
                "Name" : "us-gaap:PartnersCapitalAttributableToNoncontrollingInterest",
                "Id" : "f327ef02-45a2-4e8f-82b5-5027d67ff22b"
            }, {
                "Name" : "us-gaap:MinorityInterestInLimitedPartnerships",
                "Id" : "19df2274-d288-4310-b091-7df23534ef90"
            }, {
                "Name" : "us-gaap:MinorityInterestInOperatingPartnerships",
                "Id" : "703e568c-ce77-40b2-bc06-3b2fe947c4cc"
            }, {
                "Name" : "us-gaap:MinorityInterestInPreferredUnitHolders",
                "Id" : "ebe44195-4153-493a-9982-c1f00ac27512"
            }, {
                "Name" : "us-gaap:MinorityInterestInJointVentures",
                "Id" : "b1da4617-01f6-4da3-a40f-2d44397a2cf9"
            }, {
                "Name" : "us-gaap:OtherMinorityInterests",
                "Id" : "7fcf84da-f1ca-4cc0-ba44-945831aee050"
            }, {
                "Name" : "us-gaap:NonredeemableNoncontrollingInterest",
                "Id" : "10199204-e6df-492b-a25c-160d1f4d17f3"
            }, {
                "Name" : "us-gaap:NoncontrollingInterestInVariableInterestEntity",
                "Id" : "77293bf4-3640-4210-ab73-f5436ff46dc4"
            } ],
            "Id" : "1636709f-e87c-4a40-897f-d5986c9c356a"
        }, {
            "Name" : "fac:CostsAndExpenses",
            "Label" : "Costs and Expenses",
            "To" : [ {
                "Name" : "us-gaap:CostsAndExpenses",
                "Id" : "69657de5-aed4-4cb4-9ed0-d5db9bbdaa9c"
            }, {
                "Name" : "us-gaap:BenefitsLossesAndExpenses",
                "Id" : "016ee4fd-1ced-4c0b-9ea0-dd9b2b096f92"
            } ],
            "Id" : "597781a3-83f9-4e99-82da-9972bbb7b22d"
        }, {
            "Name" : "fac:CurrentLiabilities",
            "Label" : "Current Liabilities",
            "To" : [ {
                "Name" : "us-gaap:LiabilitiesCurrent",
                "Id" : "1595b29a-6b6f-4cfc-8de2-adab5c8456d4"
            } ],
            "Id" : "1e727def-6aa1-4831-854b-056b7ac7fae7"
        }, {
            "Name" : "fac:NetCashFlowFromOperatingActivities",
            "Label" : "Net Cash Flow from Operating Activities",
            "To" : [ {
                "Name" : "us-gaap:NetCashProvidedByUsedInOperatingActivities",
                "Id" : "fdcef487-dc84-49e4-bc6b-65a47a338704"
            } ],
            "Id" : "8363034f-85c3-43d6-b79a-458ef80dbb33"
        }, {
            "Name" : "fac:IncomeLossFromDiscontinuedOperationsNetOfTax",
            "Label" : "Income (Loss) from Discontinued Operations, Net of Tax",
            "To" : [ {
                "Name" : "us-gaap:IncomeLossFromDiscontinuedOperationsNetOfTax",
                "Id" : "181316cc-b5f9-44c7-9c99-89f9122fdb64"
            }, {
                "Name" : "us-gaap:DiscontinuedOperationGainLossOnDisposalOfDiscontinuedOperationNetOfTax",
                "Id" : "0d532ea3-6f82-4843-aa2b-db331d1dee6e"
            }, {
                "Name" : "us-gaap:IncomeLossFromDiscontinuedOperationsNetOfTaxAttributableToReportingEntity",
                "Id" : "05445a31-648b-4d17-adee-aa3f8adbea79"
            } ],
            "Id" : "9abcb2f2-e290-45d4-8bd8-d3806b52e403"
        }, {
            "Name" : "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax",
            "Label" : "Extraordinary Items of Income (Expense), Net of Tax",
            "To" : [ {
                "Name" : "us-gaap:ExtraordinaryItemNetOfTax",
                "Id" : "deedfae1-c498-46f0-b685-aa23dd5421fb"
            } ],
            "Id" : "ee671db2-27af-4a5a-8457-64725c1e3050"
        }, {
            "Name" : "fac:OperatingIncomeLoss",
            "Label" : "Operating Income (Loss)",
            "To" : [ {
                "Name" : "us-gaap:OperatingIncomeLoss",
                "Id" : "7fbc4329-1e0f-492a-9cf6-d8dcd155c8a2"
            } ],
            "Id" : "246e80e2-4fa6-4fe8-b58a-e5f0867de76d"
        }, {
            "Name" : "fac:NetCashFlowFromOperatingActivitiesDiscontinued",
            "Label" : "Net Cash Flow from Operating Activities, Discontinued",
            "To" : [ {
                "Name" : "us-gaap:CashProvidedByUsedInOperatingActivitiesDiscontinuedOperations",
                "Id" : "a0f59d64-87c9-416e-a118-57151704c731"
            } ],
            "Id" : "4a4d2947-511d-46c8-9d53-2c8cab3755a3"
        }, {
            "Name" : "fac:OtherComprehensiveIncomeLoss",
            "Label" : "Other Comprehensive Income (Loss)",
            "To" : [ {
                "Name" : "us-gaap:OtherComprehensiveIncomeLossNetOfTax",
                "Id" : "31c04c0d-cb55-4f1e-8144-590de1f4cd57"
            } ],
            "Id" : "d451751d-53eb-4486-9df0-019fe91b58d8"
        }, {
            "Name" : "fac:NetCashFlowFromInvestingActivitiesContinuing",
            "Label" : "Net Cash Flow from Investing Activities, Continuing",
            "To" : [ {
                "Name" : "us-gaap:NetCashProvidedByUsedInInvestingActivitiesContinuingOperations",
                "Id" : "815599b0-f3ab-4d48-9bb0-99413bb93208"
            } ],
            "Id" : "c0ce069d-b6c2-41db-9f92-bdce9a862c49"
        }, {
            "Name" : "fac:BalanceSheetDate",
            "Label" : "Balance Sheet Date",
            "To" : [ {
                "Name" : "dei:DocumentPeriodEndDate",
                "Id" : "fc76f9b2-4f42-4f4f-818a-824924b45db2"
            } ],
            "Id" : "df7711f4-da56-4905-a5a7-e6f302f928d2"
        }, {
            "Name" : "fac:LiabilitiesAndEquity",
            "Label" : "Liabilities and Equity",
            "To" : [ {
                "Name" : "us-gaap:LiabilitiesAndStockholdersEquity",
                "Id" : "9395f54e-c718-4cb0-ae32-292f90828132"
            }, {
                "Name" : "us-gaap:LiabilitiesAndPartnersCapital",
                "Id" : "9218d081-a9ba-4408-bee4-cc8b3ca579fe"
            } ],
            "Id" : "9c69663a-83da-443f-b655-a97ef548a4af"
        }, {
            "Name" : "fac:Equity",
            "Label" : "Equity",
            "To" : [ {
                "Name" : "us-gaap:StockholdersEquityIncludingPortionAttributableToNoncontrollingInterest",
                "Id" : "ca33c20d-690f-4614-ac2b-525f1b336eff"
            }, {
                "Name" : "us-gaap:StockholdersEquity",
                "Id" : "bf0635dc-e8c0-428f-b44e-78cec721179e"
            }, {
                "Name" : "us-gaap:PartnersCapitalIncludingPortionAttributableToNoncontrollingInterest",
                "Id" : "ead36051-7319-46cf-9520-80cbc6806318"
            }, {
                "Name" : "us-gaap:PartnersCapital",
                "Id" : "86d10a99-c26a-49a1-b978-3f8cb08afc4b"
            }, {
                "Name" : "us-gaap:CommonStockholdersEquity",
                "Id" : "2c4624e3-9840-4305-9c09-9ecffe10760a"
            }, {
                "Name" : "us-gaap:MembersEquity",
                "Id" : "cee8e0b9-bd28-4c0b-ad4c-dd5ee2f5daa0"
            }, {
                "Name" : "us-gaap:AssetsNet",
                "Id" : "f20bbcf1-31a7-4b23-87a9-9f232582b8cb"
            } ],
            "Id" : "e8f74834-bdb0-48cf-9663-28a92e1f1127"
        }, {
            "Name" : "fac:DocumentType",
            "Label" : "Document Type",
            "To" : [ {
                "Name" : "dei:DocumentType",
                "Id" : "db93a09a-7e44-47fa-a857-f22d6f2305d7"
            } ],
            "Id" : "8f72ed83-0ae2-4191-aaf7-caaa09d54de6"
        }, {
            "Name" : "fac:IncomeLossFromEquityMethodInvestments",
            "Label" : "Income (Loss) from Equity Method Investments",
            "To" : [ {
                "Name" : "us-gaap:IncomeLossFromEquityMethodInvestments",
                "Id" : "c2fae18d-a1c6-45d1-9aec-d0f844ba78e7"
            } ],
            "Id" : "9856be7e-52a8-403f-b686-d1ef542a947c"
        }, {
            "Name" : "fac:ComprehensiveIncomeLoss",
            "Label" : "Comprehensive Income (Loss)",
            "To" : [ {
                "Name" : "us-gaap:ComprehensiveIncomeNetOfTaxIncludingPortionAttributableToNoncontrollingInterest",
                "Id" : "01baa298-9848-41fc-ac2f-9df9dc7228e2"
            }, {
                "Name" : "us-gaap:ComprehensiveIncomeNetOfTax",
                "Id" : "077db573-fa7e-4cb3-aa9e-aa9cf04fb8eb"
            } ],
            "Id" : "d5ec6aee-4064-4fec-8b38-0dc9c0e35999"
        }, {
            "Name" : "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
            "Label" : "Comprehensive Income (Loss) Attributable to Noncontrolling Interest",
            "To" : [ {
                "Name" : "us-gaap:ComprehensiveIncomeNetOfTaxAttributableToNoncontrollingInterest",
                "Id" : "4a3f299a-8e79-451d-b408-1728a472d98e"
            } ],
            "Id" : "035819d1-0c4b-48fb-8faa-ccc088f0224d"
        }, {
            "Name" : "fac:CurrentAssets",
            "Label" : "Current Assets",
            "To" : [ {
                "Name" : "us-gaap:AssetsCurrent",
                "Id" : "fd39bfed-2bb6-49b9-9074-328311517a80"
            } ],
            "Id" : "1f6d48e4-1d47-4d5b-8517-29b7764b9c9a"
        }, {
            "Name" : "fac:NetCashFlowFromOperatingActivitiesContinuing",
            "Label" : "Net Cash Flow from Operating Activities, Continuing",
            "To" : [ {
                "Name" : "us-gaap:NetCashProvidedByUsedInOperatingActivitiesContinuingOperations",
                "Id" : "48c92ff0-fe98-4dd5-b0d5-4e16b1902222"
            } ],
            "Id" : "8c1990e3-92ee-495a-8f1b-16fafd601b7b"
        }, {
            "Name" : "fac:NetCashFlowFromFinancingActivities",
            "Label" : "Net Cash Flow from Financing Activities",
            "To" : [ {
                "Name" : "us-gaap:NetCashProvidedByUsedInFinancingActivities",
                "Id" : "62605fc8-42c1-4113-86d7-e79199b91b7f"
            } ],
            "Id" : "46f4cf55-b374-4997-8485-b45a19923614"
        }, {
            "Name" : "fac:RedeemableNoncontrollingInterest",
            "Label" : "Redeemable Noncontrolling Interest",
            "To" : [ {
                "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityCarryingAmount",
                "Id" : "ff83bd5e-452e-469c-8e3c-dfdad75c7e0a"
            }, {
                "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityCommonCarryingAmount",
                "Id" : "ff86b9b1-6c49-44bc-9221-442ba6dda242"
            }, {
                "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityPreferredCarryingAmount",
                "Id" : "5414d30c-2f01-4d9a-b424-c6accd6abd86"
            }, {
                "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityOtherCarryingAmount",
                "Id" : "3d65c847-f0cd-434c-9b16-64836775d2af"
            } ],
            "Id" : "be981102-0b02-41d0-8868-6d3bf7d48553"
        }, {
            "Name" : "fac:TemporaryEquity",
            "Label" : "Temporary Equity",
            "To" : [ {
                "Name" : "us-gaap:TemporaryEquityCarryingAmountIncludingPortionAttributableToNoncontrollingInterests",
                "Id" : "099675a7-27f0-4ad1-bb08-cf778d02723b"
            }, {
                "Name" : "us-gaap:TemporaryEquityRedemptionValue",
                "Id" : "6914f034-7469-4765-a382-4fda5d5f4214"
            }, {
                "Name" : "us-gaap:RedeemablePreferredStockCarryingAmount",
                "Id" : "fb628cc2-a11c-45bd-b05d-0150adcaba70"
            }, {
                "Name" : "us-gaap:TemporaryEquityCarryingAmount",
                "Id" : "7038aaea-9d86-4cc7-9dd1-6004004bd394"
            }, {
                "Name" : "us-gaap:TemporaryEquityValueExcludingAdditionalPaidInCapital",
                "Id" : "03245243-7c9a-4040-aca5-cf801f0f1a0e"
            }, {
                "Name" : "us-gaap:RedeemableNoncontrollingInterestEquityFairValue",
                "Id" : "ba6a7e75-42d4-4984-96b5-6af80f4f68f3"
            }, {
                "Name" : "us-gaap:TemporaryEquityCarryingAmountAttributableToParent",
                "Id" : "88357649-2be2-4112-a366-95b12c76ed65"
            } ],
            "Id" : "0dca4bc2-e289-4c90-8c30-429be9f72ce2"
        }, {
            "Name" : "fac:CommonStockSharesAuthorized",
            "Label" : "Common Stock Shares (authorized)",
            "To" : [ {
                "Name" : "us-gaap:CommonStockSharesAuthorized",
                "Id" : "ae5d5874-0df0-41b9-ba80-c78d2e58ab2b"
            } ],
            "Id" : "e2da21d2-b7ae-4807-ad96-6582cc19db76"
        }, {
            "Name" : "fac:CommonStockSharesIssued",
            "Label" : "Common Stock Shares (issued)",
            "To" : [ {
                "Name" : "us-gaap:CommonStockSharesIssued",
                "Id" : "20822a8f-83a2-45f3-9dba-59f0a6ccdaa0"
            } ],
            "Id" : "ef88d680-aa23-48d8-9e0d-62061d9210a3"
        }, {
            "Name" : "fac:CommonStockSharesOutstanding",
            "Label" : "Common Stock Shares (outstanding)",
            "To" : [ {
                "Name" : "dei:EntityCommonStockSharesOutstanding",
                "Order" : 1,
                "Id" : "bc716d86-7bea-4b13-a55c-1389ab24123a"
            }, {
                "Name" : "us-gaap:CommonStockSharesOutstanding",
                "Order" : 2,
                "Id" : "f85a66ca-2189-4073-a186-888240f80d31"
            } ],
            "Id" : "e5643461-e88f-4efa-8e70-9eef40227da4"
        } ]
    } ],
    "Hypercubes" : {
        "xbrl28:ImpliedTable" : {
            "Name" : "xbrl28:ImpliedTable",
            "Label" : "Implied Table [Table]",
            "Aspects" : {
                "xbrl:Concept" : {
                    "Name" : "xbrl:Concept",
                    "Label" : "Concept [Axis]",
                    "Members" : [ {
                        "Name" : "fac:GrossProfitValidation",
                        "Label" : "[IS1] GrossProfit = Revenues - CostOfRevenue",
                        "Id" : "4cdfe4ec-79d3-4efa-8627-afba96c6f9e2"
                    }, {
                        "Name" : "fac:IncomeLossBeforeEquityMethodInvestmentsValidation",
                        "Label" : "[IS3] IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense",
                        "Id" : "70be6b2a-4cb8-4e4b-a028-65b9ebaed0de"
                    }, {
                        "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation",
                        "Label" : "[IS4] IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments",
                        "Id" : "802358c4-06ec-4645-8b0a-9787577b7b07"
                    }, {
                        "Name" : "fac:IncomeLossFromContinuingOperationsAfterTaxValidation",
                        "Label" : "[IS5] IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit",
                        "Id" : "74d36e9e-5b54-4eee-ae7c-9456f01e5e85"
                    }, {
                        "Name" : "fac:NetIncomeLossValidation",
                        "Label" : "[IS6] NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax",
                        "Id" : "4f055410-a48d-4f14-b268-29313fde2bbf"
                    }, {
                        "Name" : "fac:NetIncomeLossValidation2",
                        "Label" : "[IS7] NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest",
                        "Id" : "345be103-d8b4-4012-a883-a43d17f98297"
                    }, {
                        "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation",
                        "Label" : "[IS8] NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments",
                        "Id" : "140992a8-e4ad-4106-9581-d32ef9c9399b"
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLossValidation",
                        "Label" : "[IS9] ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
                        "Id" : "1e77d0e1-60ec-45f8-9c23-585ca7f1f2a9"
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLossValidation2",
                        "Label" : "[IS10] ComprehensiveIncomeLoss = NetIncomeLoss + OtherComprehensiveIncomeLoss",
                        "Id" : "4bdc4a50-9710-471f-83c1-fa32a9072a17"
                    }, {
                        "Name" : "fac:OperatingIncomeLossValidation",
                        "Label" : "[IS2] OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses",
                        "Id" : "bbb85a84-b2e2-422f-8881-0209d31fa90e"
                    }, {
                        "Name" : "fac:OperatingIncomeLossValidation2",
                        "Label" : "[IS11] OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses",
                        "Id" : "e25d8fef-a8d3-4022-9d8f-c2cc8cb1e76f"
                    }, {
                        "Name" : "fac:Validations",
                        "Label" : "Fact Validation Rule Results [Hierarchy]",
                        "Id" : "ad8855c6-f9c9-44f0-8c46-45fad10723d1"
                    }, {
                        "Name" : "fac:LiabilitiesAndEquityValidation",
                        "Label" : "[BS5] LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity",
                        "Id" : "8166efbc-138a-4b63-b218-5567b78e1d8e"
                    }, {
                        "Name" : "fac:LiabilitiesValidation",
                        "Label" : "[BS4] Liabilities = CurrentLiabilities + NoncurrentLiabilities",
                        "Id" : "5ff73b3e-b2be-47f7-b13e-9b23a0ce9987"
                    }, {
                        "Name" : "fac:AssetsValidation2",
                        "Label" : "[BS3] Assets = CurrentAssets + NoncurrentAssets",
                        "Id" : "87b4d286-f2b8-4378-916c-43c8c5365ba7"
                    }, {
                        "Name" : "fac:AssetsValidation",
                        "Label" : "[BS2] Assets = LiabilitiesAndEquity",
                        "Id" : "65b3d9c2-1d7c-482e-8dec-e16047ae1688"
                    }, {
                        "Name" : "fac:EquityValidation",
                        "Label" : "[BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest",
                        "Id" : "061c9348-ad8b-4106-a876-c068e588558d"
                    }, {
                        "Name" : "fac:NetCashFlowValidation",
                        "Label" : "[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]",
                        "Id" : "da3d3450-39b8-4c7e-b516-e90ca6272f0d"
                    }, {
                        "Name" : "fac:NetCashFlowContinuingValidation",
                        "Label" : "[CF2] NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing",
                        "Id" : "b335787f-d6b9-483a-832f-dc9649d848b0"
                    }, {
                        "Name" : "fac:NetCashFlowDiscontinuedValidation",
                        "Label" : "[CF3] NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued",
                        "Id" : "ceecd7ff-f05d-4e08-b73c-6ff6f74e7653"
                    }, {
                        "Name" : "fac:NetCashFlowFromOperatingActivitiesValidation",
                        "Label" : "[CF4] NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued",
                        "Id" : "b0658562-013b-43b8-abe3-8ed86c9301ff"
                    }, {
                        "Name" : "fac:NetCashFlowFromInvestingActivitiesValidation",
                        "Label" : "[CF5] NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued",
                        "Id" : "452ae50d-3f60-4346-93dd-e01abb41c1d7"
                    }, {
                        "Name" : "fac:NetCashFlowFromFinancingActivitiesValidation",
                        "Label" : "[CF6] NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued",
                        "Id" : "d4d25b0d-6a77-45d6-8752-794ad284a639"
                    }, {
                        "Name" : "fac:FundamentalAccountingConceptsLineItems",
                        "Label" : "Fundamental Accounting Concepts [Line Items]",
                        "Id" : "81894708-289a-49be-8711-be973aa4353f"
                    }, {
                        "Name" : "fac:FundamentalAccountingConceptsHierarchy",
                        "Label" : "Fundamental Accounting Concepts [Hierarchy]",
                        "Id" : "84ee5f5d-c9e2-4f41-977b-d84dd5a15cec"
                    }, {
                        "Name" : "fac:GeneralInformationHierarchy",
                        "Label" : "General Information [Hierarchy]",
                        "Id" : "27a6960e-9aa7-47b8-8377-bca7adde2a32"
                    }, {
                        "Name" : "fac:EntityRegistrantName",
                        "Label" : "Entity Registrant Name",
                        "Id" : "b3afdc5f-28ec-4cfd-bb2e-531ed434f25e"
                    }, {
                        "Name" : "fac:EntityCentralIndexKey",
                        "Label" : "Central Index Key (CIK)",
                        "Id" : "6fb350cc-8f17-4166-90dc-418f8b8213e6"
                    }, {
                        "Name" : "fac:EntityFilerCategory",
                        "Label" : "Entity Filer Category",
                        "Id" : "8298388f-e4c5-440f-93ed-1a03be62bb04"
                    }, {
                        "Name" : "fac:TradingSymbol",
                        "Label" : "Trading Symbol",
                        "Id" : "97cb8762-a68a-47a8-a646-bad16d84f31b"
                    }, {
                        "Name" : "fac:FiscalYearEnd",
                        "Label" : "Fiscal Year End",
                        "Id" : "048850ca-cefd-4096-8717-68ca9e241359"
                    }, {
                        "Name" : "fac:FiscalYear",
                        "Label" : "Fiscal Year",
                        "Id" : "49492fa2-f3dd-435a-9e9b-6d414c951f77"
                    }, {
                        "Name" : "fac:FiscalPeriod",
                        "Label" : "Fiscal Period",
                        "Id" : "46acee9e-5678-4ba9-9d05-67d5c44a82fe"
                    }, {
                        "Name" : "fac:DocumentType",
                        "Label" : "Document Type",
                        "Id" : "19f359d0-678d-41b9-bbf5-b50cf3c0fb1b"
                    }, {
                        "Name" : "fac:BalanceSheetDate",
                        "Label" : "Balance Sheet Date",
                        "Id" : "70345973-37a1-4a92-9a38-773faa152e66"
                    }, {
                        "Name" : "fac:IncomeStatementStartPeriodYearToDate",
                        "Label" : "Income Statement Start of Period",
                        "Id" : "34ee6d22-a1eb-4469-b78d-753a3736f9a5"
                    }, {
                        "Name" : "fac:BalanceSheetFormat",
                        "Label" : "Balance Sheet Format",
                        "Id" : "757e675d-5842-4bd2-abbb-6a68043f5570"
                    }, {
                        "Name" : "fac:IncomeStatementFormat",
                        "Label" : "Income Statement Format",
                        "Id" : "d431eba4-a174-4d84-93cc-1e48a275850c"
                    }, {
                        "Name" : "fac:NatureOfOperations",
                        "Label" : "Nature of Operations",
                        "Id" : "dca105ec-e1fb-4bfc-b62d-5b22a287b759"
                    }, {
                        "Name" : "fac:BalanceSheetHierarchy",
                        "Label" : "Balance Sheet [Hierarchy]",
                        "Id" : "28550f2f-4423-4b73-bd26-dab78fad2428"
                    }, {
                        "Name" : "fac:CurrentAssets",
                        "Label" : "Current Assets",
                        "Id" : "3e9f93f8-b832-4b44-a92f-2f095570ac6f"
                    }, {
                        "Name" : "fac:NoncurrentAssets",
                        "Label" : "Noncurrent Assets",
                        "Id" : "ec8ccec8-e6f1-4934-bbcd-3aa974703e7b"
                    }, {
                        "Name" : "fac:Assets",
                        "Label" : "Assets",
                        "Id" : "11a16fe5-cd2b-460b-9b05-de887687656e"
                    }, {
                        "Name" : "fac:NoncurrentLiabilities",
                        "Label" : "Noncurrent Liabilities",
                        "Id" : "9d314acb-c1f8-43f2-8db8-633f7782f2a2"
                    }, {
                        "Name" : "fac:CurrentLiabilities",
                        "Label" : "Current Liabilities",
                        "Id" : "d3200c54-9868-435e-9152-3ae243f92b75"
                    }, {
                        "Name" : "fac:Liabilities",
                        "Label" : "Liabilities",
                        "Id" : "c5250fff-d0ab-4870-9fa3-edb5026afa8d"
                    }, {
                        "Name" : "fac:CommitmentsAndContingencies",
                        "Label" : "Commitments and Contingencies",
                        "Id" : "5504dff7-cb1e-433e-8082-eefc14fdceaf"
                    }, {
                        "Name" : "fac:TemporaryEquity",
                        "Label" : "Temporary Equity",
                        "Id" : "b538e1ac-be4d-451d-ac44-18b86a08cb8f"
                    }, {
                        "Name" : "fac:EquityAttributableToParent",
                        "Label" : "Equity Attributable to Parent",
                        "Id" : "12212ce4-0990-4744-b17d-26232d52ac40"
                    }, {
                        "Name" : "fac:EquityAttributableToNoncontrollingInterest",
                        "Label" : "Equity Attributable to Noncontrolling Interest",
                        "Id" : "de849883-6d34-46f4-b7d5-51985a0779cf"
                    }, {
                        "Name" : "fac:RedeemableNoncontrollingInterest",
                        "Label" : "Redeemable Noncontrolling Interest",
                        "Id" : "584c604b-0b0d-4e53-bfe4-f0bf544a91d3"
                    }, {
                        "Name" : "fac:Equity",
                        "Label" : "Equity",
                        "Id" : "e34294bf-49b7-45b1-afc0-677acff4c89d"
                    }, {
                        "Name" : "fac:LiabilitiesAndEquity",
                        "Label" : "Liabilities and Equity",
                        "Id" : "2c11d651-e503-4bf9-b0b8-49533cdfd507"
                    }, {
                        "Name" : "fac:IncomeStatementHierarchy",
                        "Label" : "Income Statement [Hierarchy]",
                        "Id" : "4de1e9dc-e829-4cf7-b71d-38617d79536b"
                    }, {
                        "Name" : "fac:Revenues",
                        "Label" : "Revenues",
                        "Id" : "116937e5-569c-4f9b-90fa-db4164a5c031"
                    }, {
                        "Name" : "fac:CostOfRevenue",
                        "Label" : "Cost of Revenues",
                        "Id" : "5d5a40c4-be40-41f1-a5d0-8512cbc7d898"
                    }, {
                        "Name" : "fac:GrossProfit",
                        "Label" : "Gross Profit",
                        "Id" : "c7c336f1-72ee-484b-b350-545be8de72a5"
                    }, {
                        "Name" : "fac:OperatingExpenses",
                        "Label" : "Operating Expenses",
                        "Id" : "c4343933-3f3f-4dc1-8efa-29c4a27a5883"
                    }, {
                        "Name" : "fac:CostsAndExpenses",
                        "Label" : "Costs and Expenses",
                        "Id" : "33d15801-cc93-438c-9a5c-502e44c1d9fc"
                    }, {
                        "Name" : "fac:OtherOperatingIncomeExpenses",
                        "Label" : "Other Operating Income (Expenses)",
                        "Id" : "25e962f9-2f52-4a63-a2ba-e041eac80e4b"
                    }, {
                        "Name" : "fac:ResearchAndDevelopment",
                        "Label" : "Research and Development",
                        "Id" : "b224b30c-e2fc-4a84-9824-65d6b20c47bb"
                    }, {
                        "Name" : "fac:OperatingIncomeLoss",
                        "Label" : "Operating Income (Loss)",
                        "Id" : "9609a9fd-caad-4f1b-ac7b-c296743181b3"
                    }, {
                        "Name" : "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense",
                        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense",
                        "Id" : "1f48fcba-0ba3-4c4d-bd42-80b953345505"
                    }, {
                        "Name" : "fac:NonoperatingIncomeLoss",
                        "Label" : "Nonoperating Income (Loss)",
                        "Id" : "64a70694-541f-4aa0-a230-f9e45e57eed1"
                    }, {
                        "Name" : "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments",
                        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments",
                        "Id" : "8aacccb7-504e-42f4-95e1-7e31659bebe9"
                    }, {
                        "Name" : "fac:InterestAndDebtExpense",
                        "Label" : "Interest and Debt Expense",
                        "Id" : "29a10e02-d034-4adc-9fa7-589fa9afa72b"
                    }, {
                        "Name" : "fac:IncomeLossBeforeEquityMethodInvestments",
                        "Label" : "Income (Loss) Before Equity Method Investments",
                        "Id" : "45d01230-69ab-4ca2-92a2-e57bceba3605"
                    }, {
                        "Name" : "fac:IncomeLossFromEquityMethodInvestments",
                        "Label" : "Income (Loss) from Equity Method Investments",
                        "Id" : "1a3eff68-7bb1-47c0-a7fd-d60f6ae8322b"
                    }, {
                        "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTax",
                        "Label" : "Income (Loss) from Continuing Operations Before Tax",
                        "Id" : "073848fa-8c7c-4f64-9805-777ba9a594d3"
                    }, {
                        "Name" : "fac:IncomeTaxExpenseBenefit",
                        "Label" : "Income Tax Expense (Benefit)",
                        "Id" : "fbfa55f0-42c2-4ae2-8a26-fdba5b45eaad"
                    }, {
                        "Name" : "fac:IncomeLossFromContinuingOperationsAfterTax",
                        "Label" : "Income (Loss) from Continuing Operations After Tax",
                        "Id" : "a363bd5e-30f5-4f25-b890-231041a6a84f"
                    }, {
                        "Name" : "fac:IncomeLossFromDiscontinuedOperationsNetOfTax",
                        "Label" : "Income (Loss) from Discontinued Operations, Net of Tax",
                        "Id" : "dfc890a1-001a-4712-8651-f58c56543bf9"
                    }, {
                        "Name" : "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax",
                        "Label" : "Extraordinary Items of Income (Expense), Net of Tax",
                        "Id" : "a34089f3-d96e-4ca4-96bc-a50520500c4e"
                    }, {
                        "Name" : "fac:NetIncomeLoss",
                        "Label" : "Net Income (Loss)",
                        "Id" : "35b6d19d-6758-4291-b706-2d7c4db6050a"
                    }, {
                        "Name" : "fac:NetIncomeLossAttributableToParent",
                        "Label" : "Net Income Attributable to Parent",
                        "Id" : "ff020c1d-7a95-4e34-b5b9-b94dfd573634"
                    }, {
                        "Name" : "fac:NetIncomeLossAttributableToNoncontrollingInterest",
                        "Label" : "Net Income Attributable to Noncontrolling Interest",
                        "Id" : "ee32fbc4-9e3c-4f57-b248-21478027256e"
                    }, {
                        "Name" : "fac:PreferredStockDividendsAndOtherAdjustments",
                        "Label" : "Preferred Stock Dividends and Other Adjustments",
                        "Id" : "a3e13046-53e3-4b6b-9fd0-20161de747a4"
                    }, {
                        "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasic",
                        "Label" : "Net Income (Loss) Available to Common Stockholders, Basic",
                        "Id" : "6ba29561-91c4-497e-992f-3fef3ccdd085"
                    }, {
                        "Name" : "fac:StatementComprehensiveIncomeHierarchy",
                        "Label" : "Statement of Comprehensive Income [Hierarchy]",
                        "Id" : "1182ce3e-8220-4406-a6c9-28c8d4f590e4"
                    }, {
                        "Name" : "fac:OtherComprehensiveIncomeLoss",
                        "Label" : "Other Comprehensive Income (Loss)",
                        "Id" : "09d8f2ad-4c19-4a47-b899-3344b2d6bfa1"
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLoss",
                        "Label" : "Comprehensive Income (Loss)",
                        "Id" : "c1baea34-4e7c-4940-910b-ab09091610c5"
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLossAttributableToParent",
                        "Label" : "Comprehensive Income (Loss) Attributable to Parent",
                        "Id" : "47d98ec6-59ab-47fe-a8ca-a05f58b4218a"
                    }, {
                        "Name" : "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
                        "Label" : "Comprehensive Income (Loss) Attributable to Noncontrolling Interest",
                        "Id" : "1418a3aa-4750-46e4-9fc2-100d335f7726"
                    }, {
                        "Name" : "fac:CashFlowStatementHierarchy",
                        "Label" : "Cash Flow Statement [Hierarchy]",
                        "Id" : "9dd06754-6c7c-485a-b580-d298220d2cda"
                    }, {
                        "Name" : "fac:NetCashFlowFromOperatingActivitiesContinuing",
                        "Label" : "Net Cash Flow from Operating Activities, Continuing",
                        "Id" : "eb1d0229-2996-4f8c-b40b-28ff49428fde"
                    }, {
                        "Name" : "fac:NetCashFlowFromOperatingActivitiesDiscontinued",
                        "Label" : "Net Cash Flow from Operating Activities, Discontinued",
                        "Id" : "69702889-6c52-4d8d-9d17-e946cc0ba6f2"
                    }, {
                        "Name" : "fac:NetCashFlowFromOperatingActivities",
                        "Label" : "Net Cash Flow from Operating Activities",
                        "Id" : "09f87d7d-0464-4ecb-9907-c339c9a942c1"
                    }, {
                        "Name" : "fac:NetCashFlowFromInvestingActivitiesContinuing",
                        "Label" : "Net Cash Flow from Investing Activities, Continuing",
                        "Id" : "f3f07489-e8e2-46c5-b50d-51aa77372955"
                    }, {
                        "Name" : "fac:NetCashFlowFromInvestingActivitiesDiscontinued",
                        "Label" : "Net Cash Flow from Investing Activities, Discontinued",
                        "Id" : "a9bb5aff-4242-4341-8838-36f17026a10a"
                    }, {
                        "Name" : "fac:NetCashFlowFromInvestingActivities",
                        "Label" : "Net Cash Flow from Investing Activities",
                        "Id" : "a3a29bed-b986-422d-a423-02e39caa3fdc"
                    }, {
                        "Name" : "fac:NetCashFlowFromFinancingActivitiesContinuing",
                        "Label" : "Net Cash Flow from Financing Activities, Continuing",
                        "Id" : "4b734136-eb65-4417-a238-e1a6db5eccbf"
                    }, {
                        "Name" : "fac:NetCashFlowFromFinancingActivitiesDiscontinued",
                        "Label" : "Net Cash Flow from Financing Activities, Discontinued",
                        "Id" : "4f5e25df-8ec5-48a0-a348-a764a4d350a0"
                    }, {
                        "Name" : "fac:NetCashFlowFromFinancingActivities",
                        "Label" : "Net Cash Flow from Financing Activities",
                        "Id" : "8bf33499-0467-4df7-b365-9616ec64cc21"
                    }, {
                        "Name" : "fac:ExchangeGainsLosses",
                        "Label" : "Exchange Gains (Losses)",
                        "Id" : "3179f5ee-08a9-4e7e-8eee-658c579c6bad"
                    }, {
                        "Name" : "fac:NetCashFlow",
                        "Label" : "Net Cash Flow",
                        "Id" : "9d34da8b-f0fe-4276-af97-371d77803136"
                    }, {
                        "Name" : "fac:NetCashFlowContinuing",
                        "Label" : "Net Cash Flow, Continuing",
                        "Id" : "a28f3692-4fd7-4540-8047-29339c054d36"
                    }, {
                        "Name" : "fac:NetCashFlowDiscontinued",
                        "Label" : "Net Cash Flow, Discontinued",
                        "Id" : "b21e9b88-3aff-420f-81c2-962cbc5addde"
                    }, {
                        "Name" : "fac:KeyRatiosHierarchy",
                        "Label" : "Key Ratios [Hierarchy]",
                        "Id" : "c8f815ee-ba5e-4361-a957-2d6db1849d59"
                    }, {
                        "Name" : "fac:ReturnOnEquity",
                        "Label" : "Return on Equity (ROE)",
                        "Id" : "a9094ac4-9a65-4381-beaa-e844e545d6a0"
                    }, {
                        "Name" : "fac:ReturnOnAssets",
                        "Label" : "Return on Assets (ROA)",
                        "Id" : "ae1ded2a-91f7-4dde-8fa9-ef1acb9dfbd8"
                    }, {
                        "Name" : "fac:ReturnOnSales",
                        "Label" : "Return on Sales (ROS)",
                        "Id" : "5dbe422c-9ab0-4de6-b1ee-bde87cb56526"
                    }, {
                        "Name" : "fac:SustainableGrowthRate",
                        "Label" : "Sustainable Growth Rate (SGR)",
                        "Id" : "23095b5b-2908-4a99-ba92-31ad035ba90d"
                    }, {
                        "Name" : "fac:CommonStockSharesAuthorized",
                        "Label" : "Common Stock Shares (authorized)",
                        "Id" : "cae8fe21-aa22-4704-b6bc-6344879b3487"
                    }, {
                        "Name" : "fac:CommonStockSharesIssued",
                        "Label" : "Common Stock Shares (issued)",
                        "Id" : "434875ef-2999-462e-9c48-a69cf85f24cb"
                    }, {
                        "Name" : "fac:CommonStockSharesOutstanding",
                        "Label" : "Common Stock Shares (outstanding)",
                        "Id" : "48efefc7-e7ac-4ddc-a914-73d6e9ec6e39"
                    } ],
                    "Id" : "fdb26c35-d8f4-4005-a5e5-7692bcec5265"
                },
                "xbrl:Period" : {
                    "Name" : "xbrl:Period",
                    "Label" : "Period [Axis]",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "Id" : "10fcc78c-6ee3-42a2-9923-2c31887c148a"
                },
                "xbrl:Entity" : {
                    "Name" : "xbrl:Entity",
                    "Label" : "Reporting Entity [Axis]",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "DomainRestriction" : {
                        "Name" : "xbrl:EntityDomain",
                        "Label" : "Reporting Entity [Domain]",
                        "Enumeration" : [ "http://www.sec.gov/CIK 0000004962", "http://www.sec.gov/CIK 0000018230", "http://www.sec.gov/CIK 0000034088", "http://www.sec.gov/CIK 0000012927", "http://www.sec.gov/CIK 0000021344", "http://www.sec.gov/CIK 0000019617", "http://www.sec.gov/CIK 0000030554", "http://www.sec.gov/CIK 0000040545", "http://www.sec.gov/CIK 0000050863", "http://www.sec.gov/CIK 0000066740", "http://www.sec.gov/CIK 0000080424", "http://www.sec.gov/CIK 0000063908", "http://www.sec.gov/CIK 0000078003", "http://www.sec.gov/CIK 0000051143", "http://www.sec.gov/CIK 0000101829", "http://www.sec.gov/CIK 0000086312", "http://www.sec.gov/CIK 0000093410", "http://www.sec.gov/CIK 0000104169", "http://www.sec.gov/CIK 0000310158", "http://www.sec.gov/CIK 0000200406", "http://www.sec.gov/CIK 0000354950", "http://www.sec.gov/CIK 0000731766", "http://www.sec.gov/CIK 0000732712", "http://www.sec.gov/CIK 0000320187", "http://www.sec.gov/CIK 0000732717", "http://www.sec.gov/CIK 0000789019", "http://www.sec.gov/CIK 0000858877", "http://www.sec.gov/CIK 0000886982", "http://www.sec.gov/CIK 0001001039", "http://www.sec.gov/CIK 0001403161" ],
                        "Id" : "dc5a237e-8151-49bd-8a92-57110a34f7ce"
                    },
                    "Id" : "1d08b5f6-a061-40b3-a090-826f41e5d71a"
                },
                "dei:LegalEntityAxis" : {
                    "Name" : "dei:LegalEntityAxis",
                    "Label" : "Legal Entity [Axis]",
                    "Default" : "sec:DefaultLegalEntity",
                    "Members" : [ {
                        "Name" : "dei:LegalEntityAxisDomain",
                        "Label" : "Legal Entity [Domain]",
                        "Members" : [ {
                            "Name" : "sec:DefaultLegalEntity",
                            "Label" : "Default Legal Entity",
                            "Id" : "0ec96526-b85b-415c-b450-beb9253bc3d8"
                        } ],
                        "Id" : "5ed16bb6-a4e3-4913-8140-576d5caaf702"
                    } ],
                    "Id" : "d6597dde-812c-451a-9994-9c281afcdff2"
                },
                "xbrl:Unit" : {
                    "Name" : "xbrl:Unit",
                    "Label" : "Unit [Axis]",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "Default" : "xbrl28:NoUnit",
                    "Id" : "e650daa0-ea76-4d26-aadb-47b145ec631f"
                },
                "sec:Accepted" : {
                    "Name" : "sec:Accepted",
                    "Label" : "Acceptance Date [Axis]",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "Id" : "73ff06cc-313f-4156-a968-693b176b14a6"
                },
                "xbrl28:Archive" : {
                    "Name" : "xbrl28:Archive",
                    "Label" : "Archive [Axis]",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "Id" : "35d27330-79d2-4f9a-8fcd-9c9208d7a379"
                },
                "sec:FiscalYear" : {
                    "Name" : "sec:FiscalYear",
                    "Label" : "Fiscal Year [Axis]",
                    "Kind" : "TypedDimension",
                    "Type" : "integer",
                    "DomainRestriction" : {
                        "Name" : "sec:FiscalYearDomain",
                        "Label" : "Fiscal Year [Domain]",
                        "Enumeration" : [ 2013 ],
                        "Id" : "cba45aa2-1fb0-4b5b-96a1-7acf06ad9c80"
                    },
                    "Id" : "521558f5-cf7e-4b4d-a84d-5bd9be9c8afd"
                },
                "sec:FiscalPeriod" : {
                    "Name" : "sec:FiscalPeriod",
                    "Label" : "Fiscal Period [Axis]",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "DomainRestriction" : {
                        "Name" : "sec:FiscalPeriodDomain",
                        "Label" : "Fiscal Period [Domain]",
                        "Enumeration" : [ "FY" ],
                        "Id" : "7147b1d1-e34e-49ce-aa3d-e469ae206771"
                    },
                    "Id" : "6926a773-9d62-45e7-9fc9-42167f980745"
                },
                "sec:FiscalPeriodType" : {
                    "Name" : "sec:FiscalPeriodType",
                    "Label" : "Fiscal Period Type [Axis]",
                    "Kind" : "TypedDimension",
                    "Type" : "string",
                    "DomainRestriction" : {
                        "Name" : "sec:FiscalPeriodTypeDomain",
                        "Label" : "Fiscal Period Type [Domain]",
                        "Enumeration" : [ "instant", "YTD" ],
                        "Id" : "4526e9e6-4d69-4adc-adeb-42447eb91467"
                    },
                    "Id" : "8ddca885-bde6-43e6-b6e3-7f645a955a05"
                }
            },
            "Id" : "2d53e188-7097-4975-b527-d5b582a91949"
        }
    },
    "DefinitionModels" : [ {
        "ModelKind" : "DefinitionModel",
        "Labels" : [ "Fundamental Accounting Concepts" ],
        "Parameters" : {

        },
        "Breakdowns" : {
            "x" : [ {
                "BreakdownLabels" : [ "Reporting Entity Breakdown" ],
                "BreakdownTrees" : [ {
                    "Kind" : "Rule",
                    "Abstract" : true,
                    "Labels" : [ "Reporting Entity [Axis]" ],
                    "Children" : [ {
                        "Kind" : "Aspect",
                        "Aspect" : "xbrl:Entity"
                    } ]
                } ]
            }, {
                "BreakdownLabels" : [ "Fiscal Year Breakdown" ],
                "BreakdownTrees" : [ {
                    "Kind" : "Rule",
                    "Abstract" : true,
                    "Labels" : [ "Fiscal Year [Axis]" ],
                    "Children" : [ {
                        "Kind" : "Aspect",
                        "Aspect" : "sec:FiscalYear"
                    } ]
                } ]
            }, {
                "BreakdownLabels" : [ "Fiscal Period Breakdown" ],
                "BreakdownTrees" : [ {
                    "Kind" : "Rule",
                    "Abstract" : true,
                    "Labels" : [ "Fiscal Period [Axis]" ],
                    "Children" : [ {
                        "Kind" : "Aspect",
                        "Aspect" : "sec:FiscalPeriod"
                    } ]
                } ]
            } ],
            "y" : [ {
                "BreakdownLabels" : [ "Breakdown on concepts" ],
                "BreakdownTrees" : [ {
                    "Kind" : "ConceptRelationship",
                    "LinkName" : "link:presentationLink",
                    "LinkRole" : "http://xbrl.io/basic-financial-information",
                    "ArcName" : "link:presentationArc",
                    "ArcRole" : "http://www.xbrl.org/2003/arcrole/parent-child",
                    "RelationshipSource" : "fac:FundamentalAccountingConceptsLineItems",
                    "FormulaAxis" : "descendant",
                    "Generations" : 0
                } ]
            } ]
        },
        "TableFilters" : {

        }
    } ],
    "Rules" : [ {
        "Id" : "BS2",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:AssetsValidation" ],
        "DependsOn" : [ "fac:Assets", "fac:LiabilitiesAndEquity" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:AssetsValidation\", \"fac:Assets\", \"fac:LiabilitiesAndEquity\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $AssetsValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:AssetsValidation\"]\nlet $warnings := ($warnings, if(count($AssetsValidation) gt 1)\n                             then if(count(distinct-values($AssetsValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept AssetsValidation.\"\n                                  else \"Cell collision with consistent values for concept AssetsValidation.\"\n                             else ())\nlet $AssetsValidation as object? := $AssetsValidation[1]\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $warnings := ($warnings, if(count($Assets) gt 1)\n                             then if(count(distinct-values($Assets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Assets.\"\n                                  else \"Cell collision with consistent values for concept Assets.\"\n                             else ())\nlet $Assets as object? := $Assets[1]\nlet $LiabilitiesAndEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquity\"]\nlet $warnings := ($warnings, if(count($LiabilitiesAndEquity) gt 1)\n                             then if(count(distinct-values($LiabilitiesAndEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept LiabilitiesAndEquity.\"\n                                  else \"Cell collision with consistent values for concept LiabilitiesAndEquity.\"\n                             else ())\nlet $LiabilitiesAndEquity as object? := $LiabilitiesAndEquity[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($AssetsValidation) return $AssetsValidation\n  case (exists($Assets) and true)\n  return\n    let $computed-value := rules:decimal-value($Assets) eq rules:decimal-value($LiabilitiesAndEquity)\n    let $audit-trail-message as string* := \n         rules:fact-trail($Assets, \"Assets\") || \" = \" || rules:fact-trail($LiabilitiesAndEquity, \"LiabilitiesAndEquity\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($AssetsValidation, $Assets, $LiabilitiesAndEquity)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[BS2] Assets = LiabilitiesAndEquity\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:AssetsValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $Assets,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:Assets" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets = LiabilitiesAndEquity"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "BS3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:AssetsValidation2" ],
        "DependsOn" : [ "fac:Assets", "fac:CurrentAssets", "fac:NoncurrentAssets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:AssetsValidation2\", \"fac:Assets\", \"fac:CurrentAssets\", \"fac:NoncurrentAssets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $AssetsValidation2 as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:AssetsValidation2\"]\nlet $warnings := ($warnings, if(count($AssetsValidation2) gt 1)\n                             then if(count(distinct-values($AssetsValidation2.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept AssetsValidation2.\"\n                                  else \"Cell collision with consistent values for concept AssetsValidation2.\"\n                             else ())\nlet $AssetsValidation2 as object? := $AssetsValidation2[1]\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $warnings := ($warnings, if(count($Assets) gt 1)\n                             then if(count(distinct-values($Assets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Assets.\"\n                                  else \"Cell collision with consistent values for concept Assets.\"\n                             else ())\nlet $Assets as object? := $Assets[1]\nlet $CurrentAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentAssets\"]\nlet $warnings := ($warnings, if(count($CurrentAssets) gt 1)\n                             then if(count(distinct-values($CurrentAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CurrentAssets.\"\n                                  else \"Cell collision with consistent values for concept CurrentAssets.\"\n                             else ())\nlet $CurrentAssets as object? := $CurrentAssets[1]\nlet $NoncurrentAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentAssets\"]\nlet $warnings := ($warnings, if(count($NoncurrentAssets) gt 1)\n                             then if(count(distinct-values($NoncurrentAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NoncurrentAssets.\"\n                                  else \"Cell collision with consistent values for concept NoncurrentAssets.\"\n                             else ())\nlet $NoncurrentAssets as object? := $NoncurrentAssets[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($AssetsValidation2) return $AssetsValidation2\n  case (exists($Assets) and true)\n  return\n    let $computed-value := rules:decimal-value($Assets) eq rules:decimal-value($CurrentAssets) + rules:decimal-value($NoncurrentAssets)\n    let $audit-trail-message as string* := \n         rules:fact-trail($Assets, \"Assets\") || \" = \" || rules:fact-trail($CurrentAssets, \"CurrentAssets\") || \" + \" || rules:fact-trail($NoncurrentAssets, \"NoncurrentAssets\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($AssetsValidation2, $Assets, $CurrentAssets, $NoncurrentAssets)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[BS3] Assets = CurrentAssets + NoncurrentAssets\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:AssetsValidation2\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $Assets,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:Assets" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets = CurrentAssets + NoncurrentAssets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "bs_BalanceSheetFormat",
        "Type" : "xbrl28:formula",
        "Label" : "Balance Sheet Format imputation",
        "Formula" : "for $facts in facts:facts-for-internal(( \"fac:BalanceSheetFormat\", \"fac:DocumentType\", \"fac:CurrentAssets\", \"fac:NoncurrentAssets\", \"fac:NoncurrentLiabilities\", \"fac:CurrentLiabilities\"), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) let $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1] group by $canonical-filter-string := facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", $facts:PERIOD, $facts:UNIT, \"Balance\")), $aligned-period let $BalanceSheetFormat as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:BalanceSheetFormat\"] let $DocumentType as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:DocumentType\"] let $CurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentAssets\"] let $NoncurrentAssets as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentAssets\"] let $NoncurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentLiabilities\"] let $CurrentLiabilities as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentLiabilities\"] return switch (true) case exists($BalanceSheetFormat) return $BalanceSheetFormat case(exists($DocumentType)) return let $computed-value := if (rules:decimal-value($CurrentAssets) eq 0 and rules:decimal-value($NoncurrentAssets) eq 0 and rules:decimal-value($NoncurrentLiabilities) eq 0 and rules:decimal-value($CurrentLiabilities) eq 0) then \"Unclassified\" else \"Classified\" let $audit-trail-message := rules:fact-trail({ \"Aspects\" : { \"xbrl:Concept\" : \"fac:BalanceSheetFormat\" }, Value: $computed-value , Type: \"NonNumericValue\" }) || \" = \" || $computed-value || \" (because \" || rules:fact-trail($CurrentAssets, \"fac:CurrentAssets\") || \", \" || rules:fact-trail($NoncurrentAssets, \"fac:NoncurrentAssets\") || \", \" || rules:fact-trail($NoncurrentLiabilities, \"fac:NoncurrentLiabilities\") || \", \" || rules:fact-trail($CurrentLiabilities, \"fac:CurrentLiabilities\") || \")\" let $source-facts := ( $CurrentAssets, $NoncurrentAssets, $NoncurrentLiabilities, $CurrentLiabilities) return copy $newfact := rules:create-computed-fact( ($DocumentType, $source-facts)[1], \"fac:BalanceSheetFormat\", $computed-value, $rule, $audit-trail-message, $source-facts, $options) modify ( replace value of json $newfact(\"Type\") with \"NonNumericValue\" ) return $newfact default return ()",
        "ComputableConcepts" : [ "fac:BalanceSheetFormat" ],
        "DependsOn" : [ "fac:DocumentType", "fac:CurrentAssets", "fac:NoncurrentAssets", "fac:NoncurrentLiabilities", "fac:CurrentLiabilities" ]
    }, {
        "Id" : "gi_CommonStockSharesOutstanding",
        "Type" : "xbrl28:formula",
        "Label" : "CommonStockSharesOutstanding imputation",
        "DependsOn" : [ "fac:Assets" ],
        "Formula" : "(: workaround for bug: https://github.com/28msec/xbrl-infosetgenerator/issues/7 :)\r\nlet $aligned-filter-no-fiscal as object := \r\n    copy $new := $aligned-filter \r\n    modify (\r\n\tif($new.Aspects.\"sec:FiscalPeriodType\") then delete json $new.Aspects.\"sec:FiscalPeriodType\" else (),\r\n    if($new.Aspects.\"sec:FiscalPeriod\") then delete json $new.Aspects.\"sec:FiscalPeriod\" else (),\r\n    if($new.Aspects.\"sec:FiscalYear\") then delete json $new.Aspects.\"sec:FiscalYear\" else ()\r\n  )\r\n  return $new\r\nlet $AllEntityCommonStockSharesOutstanding as object* := \r\n\tfacts:facts-for-internal((\r\n      \"dei:EntityCommonStockSharesOutstanding\"\r\n    ), $hypercube, $aligned-filter-no-fiscal, $concept-maps, $rules, $cache, $options)\r\nfor $facts in (facts:facts-for-internal((\r\n      \"fac:CommonStockSharesOutstanding\", \"fac:Assets\"\r\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\r\n  )\r\nlet $aligned-period := ( facts:duration-for-fact($facts).End, facts:instant-for-fact($facts), \"forever\")[1]\r\ngroup by $canonical-filter-string :=\r\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\r\n  , $aligned-period\r\nlet $archive as string := distinct-values($facts.$facts:ASPECTS.$facts:ARCHIVE)\r\nlet $warnings as string* := ()\r\nlet $CommonStockSharesOutstanding as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CommonStockSharesOutstanding\"]\r\nlet $EntityCommonStockSharesOutstanding as object* := $AllEntityCommonStockSharesOutstanding[$$.$facts:ASPECTS.$facts:ARCHIVE eq $archive]\r\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\r\nlet $warnings := ($warnings, if(count($Assets) gt 1)\r\n                             then if(count(distinct-values($Assets.Value)) gt 1)\r\n                                  then \"Cell collision with conflicting values for concept Assets.\"\r\n                                  else \"Cell collision with consistent values for concept Assets.\"\r\n                             else (),\r\n                             if(count($CommonStockSharesOutstanding) gt 1)\r\n                             then if(count(distinct-values($CommonStockSharesOutstanding.Value)) gt 1)\r\n                                  then \"Cell collision with conflicting values for concept CommonStockSharesOutstanding.\"\r\n                                  else \"Cell collision with consistent values for concept CommonStockSharesOutstanding.\"\r\n                             else (),\r\n\t\t\t\t\t\t\t if(count($EntityCommonStockSharesOutstanding) gt 1)\r\n                             then if(count(distinct-values($EntityCommonStockSharesOutstanding.Value)) gt 1)\r\n                                  then \"Cell collision with conflicting values for concept EntityCommonStockSharesOutstanding.\"\r\n                                  else \"Cell collision with consistent values for concept EntityCommonStockSharesOutstanding.\"\r\n                             else ())\r\nlet $CommonStockSharesOutstanding as object? := $CommonStockSharesOutstanding[1]\r\nlet $EntityCommonStockSharesOutstanding as object? := $EntityCommonStockSharesOutstanding[1]\r\nlet $Assets as object? := $Assets[1]\r\nreturn\r\n  switch (true)\r\n  case exists($CommonStockSharesOutstanding) return $CommonStockSharesOutstanding\r\n  case (exists($EntityCommonStockSharesOutstanding) and exists($Assets))\r\n  return\r\n    let $computed-value := rules:decimal-value($EntityCommonStockSharesOutstanding)\r\n    let $audit-trail-message as string* := \r\n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : \"xbrli:shares\", \"xbrl:Concept\" : \"fac:CommonStockSharesOutstanding\" }, Value: $computed-value }) || \" = \" || \r\n         rules:fact-trail($EntityCommonStockSharesOutstanding, \"EntityCommonStockSharesOutstanding\") || \" [\" || (facts:duration-for-fact($EntityCommonStockSharesOutstanding).End, facts:instant-for-fact($EntityCommonStockSharesOutstanding)) || \"]\"\r\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\r\n    let $source-facts as object* := ($EntityCommonStockSharesOutstanding)\r\n    return\r\n\t\tcopy $newfact :=\r\n\t\t  rules:create-computed-fact(\r\n\t\t\t$Assets,\r\n\t\t\t\"fac:CommonStockSharesOutstanding\",\r\n\t\t\t$computed-value,\r\n\t\t\t$rule,\r\n\t\t\t$audit-trail-message,\r\n\t\t\t$source-facts,\r\n\t\t\t$options)\r\n\t\tmodify (\r\n\t\t\tif($newfact(\"Unit\")) \r\n\t\t\tthen replace value of json $newfact(\"Unit\") with \"xbrli:shares\"\r\n\t\t\telse insert json { \"Unit\": \"xbrli:shares\" } into $newfact,\r\n\t\t\tif($newfact.$facts:ASPECTS.$facts:UNIT) \r\n\t\t\tthen replace value of json $newfact.$facts:ASPECTS.$facts:UNIT with \"xbrli:shares\"\r\n\t\t\telse insert json { $facts:UNIT: \"xbrli:shares\" } into $newfact.$facts:ASPECTS\r\n\t\t  )\r\n\t\treturn $newfact\r\n  default return ()",
        "ComputableConcepts" : [ "fac:CommonStockSharesOutstanding" ]
    }, {
        "Id" : "a3a832ba-ff2e-471f-899f-115eb415f8b2",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:ComprehensiveIncomeLoss" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:ComprehensiveIncomeLossAttributableToParent", "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest", "fac:OtherComprehensiveIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ComprehensiveIncomeLoss\", \"fac:NetIncomeLoss\", \"fac:ComprehensiveIncomeLossAttributableToParent\", \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\", \"fac:OtherComprehensiveIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $ComprehensiveIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLoss) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLoss.\"\n                             else ())\nlet $ComprehensiveIncomeLoss as object? := $ComprehensiveIncomeLoss[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $ComprehensiveIncomeLossAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToParent\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLossAttributableToParent) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLossAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLossAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLossAttributableToParent.\"\n                             else ())\nlet $ComprehensiveIncomeLossAttributableToParent as object? := $ComprehensiveIncomeLossAttributableToParent[1]\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLossAttributableToNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLossAttributableToNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLossAttributableToNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLossAttributableToNoncontrollingInterest.\"\n                             else ())\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object? := $ComprehensiveIncomeLossAttributableToNoncontrollingInterest[1]\nlet $OtherComprehensiveIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherComprehensiveIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OtherComprehensiveIncomeLoss) gt 1)\n                             then if(count(distinct-values($OtherComprehensiveIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OtherComprehensiveIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OtherComprehensiveIncomeLoss.\"\n                             else ())\nlet $OtherComprehensiveIncomeLoss as object? := $OtherComprehensiveIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ComprehensiveIncomeLoss) return $ComprehensiveIncomeLoss\n  case (exists($NetIncomeLoss) and (not((not(exists($NetIncomeLoss)))) and not((not(exists($ComprehensiveIncomeLossAttributableToParent)))) and (rules:decimal-value($NetIncomeLoss) - rules:decimal-value($ComprehensiveIncomeLossAttributableToParent) eq 0) and (rules:decimal-value($ComprehensiveIncomeLossAttributableToNoncontrollingInterest) eq 0) and (rules:decimal-value($OtherComprehensiveIncomeLoss) eq 0)))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ComprehensiveIncomeLoss\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($ComprehensiveIncomeLoss, $NetIncomeLoss, $ComprehensiveIncomeLossAttributableToParent, $ComprehensiveIncomeLossAttributableToNoncontrollingInterest, $OtherComprehensiveIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Comprehensive Income (Loss)\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:ComprehensiveIncomeLoss\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetIncomeLoss)),\n           not(isblank(ComprehensiveIncomeLossAttributableToParent)),\n           (NetIncomeLoss-ComprehensiveIncomeLossAttributableToParent=0),\n           (ComprehensiveIncomeLossAttributableToNoncontrollingInterest=0),\n           (OtherComprehensiveIncomeLoss=0))",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "85c0c5be-dfdf-4da7-ae99-c006e87eba15",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:ComprehensiveIncomeLossAttributableToParent" ],
        "DependsOn" : [ "fac:ComprehensiveIncomeLoss", "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest", "fac:IncomeLossBeforeEquityMethodInvestments", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ComprehensiveIncomeLossAttributableToParent\", \"fac:ComprehensiveIncomeLoss\", \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\", \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $ComprehensiveIncomeLossAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToParent\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLossAttributableToParent) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLossAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLossAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLossAttributableToParent.\"\n                             else ())\nlet $ComprehensiveIncomeLossAttributableToParent as object? := $ComprehensiveIncomeLossAttributableToParent[1]\nlet $ComprehensiveIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLoss) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLoss.\"\n                             else ())\nlet $ComprehensiveIncomeLoss as object? := $ComprehensiveIncomeLoss[1]\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLossAttributableToNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLossAttributableToNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLossAttributableToNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLossAttributableToNoncontrollingInterest.\"\n                             else ())\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object? := $ComprehensiveIncomeLossAttributableToNoncontrollingInterest[1]\nlet $IncomeLossBeforeEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossBeforeEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossBeforeEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $IncomeLossBeforeEquityMethodInvestments[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ComprehensiveIncomeLossAttributableToParent) return $ComprehensiveIncomeLossAttributableToParent\n  case (exists($ComprehensiveIncomeLoss) and (not((not(exists($ComprehensiveIncomeLoss)))) and not(exists($ComprehensiveIncomeLossAttributableToNoncontrollingInterest))))\n  return\n    let $computed-value := rules:decimal-value($ComprehensiveIncomeLoss)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ComprehensiveIncomeLossAttributableToParent\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($ComprehensiveIncomeLoss, \"ComprehensiveIncomeLoss\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($ComprehensiveIncomeLossAttributableToParent, $ComprehensiveIncomeLoss, $ComprehensiveIncomeLossAttributableToNoncontrollingInterest, $IncomeLossBeforeEquityMethodInvestments, $NetIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Comprehensive Income (Loss) Attributable to Parent\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:ComprehensiveIncomeLossAttributableToParent\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($ComprehensiveIncomeLoss) and (not(exists($ComprehensiveIncomeLoss)) and not(exists($ComprehensiveIncomeLossAttributableToNoncontrollingInterest)) and not(exists($IncomeLossBeforeEquityMethodInvestments)) and not((not(exists($NetIncomeLoss))))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ComprehensiveIncomeLossAttributableToParent\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($ComprehensiveIncomeLossAttributableToParent, $ComprehensiveIncomeLoss, $ComprehensiveIncomeLossAttributableToNoncontrollingInterest, $IncomeLossBeforeEquityMethodInvestments, $NetIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Comprehensive Income (Loss) Attributable to Parent\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:ComprehensiveIncomeLossAttributableToParent\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(ComprehensiveIncomeLoss)), isblank(ComprehensiveIncomeLossAttributableToNoncontrollingInterest))",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "ComprehensiveIncomeLoss"
        }, {
            "PrereqSrc" : "and(isblank(ComprehensiveIncomeLoss), isblank(ComprehensiveIncomeLossAttributableToNoncontrollingInterest), \n     isblank(IncomeLossBeforeEquityMethodInvestments),not(isblank(NetIncomeLoss)) )",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS9",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:ComprehensiveIncomeLossValidation" ],
        "DependsOn" : [ "fac:ComprehensiveIncomeLoss", "fac:ComprehensiveIncomeLossAttributableToParent", "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ComprehensiveIncomeLossValidation\", \"fac:ComprehensiveIncomeLoss\", \"fac:ComprehensiveIncomeLossAttributableToParent\", \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $ComprehensiveIncomeLossValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossValidation\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLossValidation) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLossValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLossValidation.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLossValidation.\"\n                             else ())\nlet $ComprehensiveIncomeLossValidation as object? := $ComprehensiveIncomeLossValidation[1]\nlet $ComprehensiveIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLoss) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLoss.\"\n                             else ())\nlet $ComprehensiveIncomeLoss as object? := $ComprehensiveIncomeLoss[1]\nlet $ComprehensiveIncomeLossAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToParent\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLossAttributableToParent) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLossAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLossAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLossAttributableToParent.\"\n                             else ())\nlet $ComprehensiveIncomeLossAttributableToParent as object? := $ComprehensiveIncomeLossAttributableToParent[1]\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLossAttributableToNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLossAttributableToNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLossAttributableToNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLossAttributableToNoncontrollingInterest.\"\n                             else ())\nlet $ComprehensiveIncomeLossAttributableToNoncontrollingInterest as object? := $ComprehensiveIncomeLossAttributableToNoncontrollingInterest[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ComprehensiveIncomeLossValidation) return $ComprehensiveIncomeLossValidation\n  case (exists($ComprehensiveIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($ComprehensiveIncomeLoss) eq rules:decimal-value($ComprehensiveIncomeLossAttributableToParent) + rules:decimal-value($ComprehensiveIncomeLossAttributableToNoncontrollingInterest)\n    let $audit-trail-message as string* := \n         rules:fact-trail($ComprehensiveIncomeLoss, \"ComprehensiveIncomeLoss\") || \" = \" || rules:fact-trail($ComprehensiveIncomeLossAttributableToParent, \"ComprehensiveIncomeLossAttributableToParent\") || \" + \" || rules:fact-trail($ComprehensiveIncomeLossAttributableToNoncontrollingInterest, \"ComprehensiveIncomeLossAttributableToNoncontrollingInterest\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($ComprehensiveIncomeLossValidation, $ComprehensiveIncomeLoss, $ComprehensiveIncomeLossAttributableToParent, $ComprehensiveIncomeLossAttributableToNoncontrollingInterest)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS9] ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:ComprehensiveIncomeLossValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $ComprehensiveIncomeLoss,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:ComprehensiveIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS10",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:ComprehensiveIncomeLossValidation2" ],
        "DependsOn" : [ "fac:ComprehensiveIncomeLoss", "fac:NetIncomeLoss", "fac:OtherComprehensiveIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ComprehensiveIncomeLossValidation2\", \"fac:ComprehensiveIncomeLoss\", \"fac:NetIncomeLoss\", \"fac:OtherComprehensiveIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $ComprehensiveIncomeLossValidation2 as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLossValidation2\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLossValidation2) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLossValidation2.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLossValidation2.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLossValidation2.\"\n                             else ())\nlet $ComprehensiveIncomeLossValidation2 as object? := $ComprehensiveIncomeLossValidation2[1]\nlet $ComprehensiveIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLoss) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLoss.\"\n                             else ())\nlet $ComprehensiveIncomeLoss as object? := $ComprehensiveIncomeLoss[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $OtherComprehensiveIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherComprehensiveIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OtherComprehensiveIncomeLoss) gt 1)\n                             then if(count(distinct-values($OtherComprehensiveIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OtherComprehensiveIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OtherComprehensiveIncomeLoss.\"\n                             else ())\nlet $OtherComprehensiveIncomeLoss as object? := $OtherComprehensiveIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ComprehensiveIncomeLossValidation2) return $ComprehensiveIncomeLossValidation2\n  case (exists($ComprehensiveIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($ComprehensiveIncomeLoss) eq rules:decimal-value($NetIncomeLoss) + rules:decimal-value($OtherComprehensiveIncomeLoss)\n    let $audit-trail-message as string* := \n         rules:fact-trail($ComprehensiveIncomeLoss, \"ComprehensiveIncomeLoss\") || \" = \" || rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" + \" || rules:fact-trail($OtherComprehensiveIncomeLoss, \"OtherComprehensiveIncomeLoss\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($ComprehensiveIncomeLossValidation2, $ComprehensiveIncomeLoss, $NetIncomeLoss, $OtherComprehensiveIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS10] ComprehensiveIncomeLoss = NetIncomeLoss + OtherComprehensiveIncomeLoss\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:ComprehensiveIncomeLossValidation2\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $ComprehensiveIncomeLoss,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:ComprehensiveIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "ComprehensiveIncomeLoss= NetIncomeLoss + OtherComprehensiveIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "5b6807a6-c57a-4cb5-8d1e-b6ce56162741",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:CostOfRevenue" ],
        "DependsOn" : [ "fac:GrossProfit", "fac:Revenues", "fac:CostOfRevenue", "fac:CostsAndExpenses", "fac:OperatingIncomeLoss", "fac:OperatingExpenses", "fac:OtherOperatingIncomeExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:CostOfRevenue\", \"fac:GrossProfit\", \"fac:Revenues\", \"fac:CostsAndExpenses\", \"fac:OperatingIncomeLoss\", \"fac:OperatingExpenses\", \"fac:OtherOperatingIncomeExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $CostOfRevenue as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $warnings := ($warnings, if(count($CostOfRevenue) gt 1)\n                             then if(count(distinct-values($CostOfRevenue.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostOfRevenue.\"\n                                  else \"Cell collision with consistent values for concept CostOfRevenue.\"\n                             else ())\nlet $CostOfRevenue as object? := $CostOfRevenue[1]\nlet $GrossProfit as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $warnings := ($warnings, if(count($GrossProfit) gt 1)\n                             then if(count(distinct-values($GrossProfit.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept GrossProfit.\"\n                                  else \"Cell collision with consistent values for concept GrossProfit.\"\n                             else ())\nlet $GrossProfit as object? := $GrossProfit[1]\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\n                             then if(count(distinct-values($Revenues.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Revenues.\"\n                                  else \"Cell collision with consistent values for concept Revenues.\"\n                             else ())\nlet $Revenues as object? := $Revenues[1]\nlet $CostsAndExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"]\nlet $warnings := ($warnings, if(count($CostsAndExpenses) gt 1)\n                             then if(count(distinct-values($CostsAndExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostsAndExpenses.\"\n                                  else \"Cell collision with consistent values for concept CostsAndExpenses.\"\n                             else ())\nlet $CostsAndExpenses as object? := $CostsAndExpenses[1]\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $OperatingExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $warnings := ($warnings, if(count($OperatingExpenses) gt 1)\n                             then if(count(distinct-values($OperatingExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingExpenses.\"\n                                  else \"Cell collision with consistent values for concept OperatingExpenses.\"\n                             else ())\nlet $OperatingExpenses as object? := $OperatingExpenses[1]\nlet $OtherOperatingIncomeExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $warnings := ($warnings, if(count($OtherOperatingIncomeExpenses) gt 1)\n                             then if(count(distinct-values($OtherOperatingIncomeExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OtherOperatingIncomeExpenses.\"\n                                  else \"Cell collision with consistent values for concept OtherOperatingIncomeExpenses.\"\n                             else ())\nlet $OtherOperatingIncomeExpenses as object? := $OtherOperatingIncomeExpenses[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($CostOfRevenue) return $CostOfRevenue\n  case (exists($Revenues) and not((not(exists($GrossProfit)))))\n  return\n    let $computed-value := rules:decimal-value($Revenues) - rules:decimal-value($GrossProfit)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CostOfRevenue\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($GrossProfit, \"GrossProfit\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($CostOfRevenue, $GrossProfit, $Revenues, $CostsAndExpenses, $OperatingIncomeLoss, $OperatingExpenses, $OtherOperatingIncomeExpenses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Cost of Revenues\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Revenues,\n          \"fac:CostOfRevenue\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($CostsAndExpenses) and (not((not(exists($CostOfRevenue)))) and not((not(exists($Revenues)))) and not(exists($GrossProfit)) and (rules:decimal-value($Revenues) - rules:decimal-value($CostsAndExpenses) eq rules:decimal-value($OperatingIncomeLoss)) and not(exists($OperatingExpenses)) and not(exists($OtherOperatingIncomeExpenses))))\n  return\n    let $computed-value := rules:decimal-value($CostsAndExpenses) - rules:decimal-value($OperatingExpenses)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CostOfRevenue\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CostsAndExpenses, \"CostsAndExpenses\") || \" - \" || rules:fact-trail($OperatingExpenses, \"OperatingExpenses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($CostOfRevenue, $GrossProfit, $Revenues, $CostsAndExpenses, $OperatingIncomeLoss, $OperatingExpenses, $OtherOperatingIncomeExpenses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Cost of Revenues\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $CostsAndExpenses,\n          \"fac:CostOfRevenue\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(GrossProfit))",
            "SourceFact" : [ "Revenues" ],
            "BodySrc" : "Revenues-GrossProfit"
        }, {
            "PrereqSrc" : "and(not(isblank(CostOfRevenue)) , not(isblank(Revenues)), isblank(GrossProfit) , (Revenues - CostsAndExpenses = OperatingIncomeLoss), isblank(OperatingExpenses) , isblank(OtherOperatingIncomeExpenses))",
            "SourceFact" : [ "CostsAndExpenses" ],
            "BodySrc" : "CostsAndExpenses-OperatingExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "58996a6a-1c4a-4b92-9aa0-7b29bd4ff514",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:CostsAndExpenses" ],
        "DependsOn" : [ "fac:OperatingExpenses", "fac:CostOfRevenue", "fac:GrossProfit", "fac:Revenues", "fac:OperatingIncomeLoss", "fac:OtherOperatingIncomeExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:CostsAndExpenses\", \"fac:OperatingExpenses\", \"fac:CostOfRevenue\", \"fac:GrossProfit\", \"fac:Revenues\", \"fac:OperatingIncomeLoss\", \"fac:OtherOperatingIncomeExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $CostsAndExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"]\nlet $warnings := ($warnings, if(count($CostsAndExpenses) gt 1)\n                             then if(count(distinct-values($CostsAndExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostsAndExpenses.\"\n                                  else \"Cell collision with consistent values for concept CostsAndExpenses.\"\n                             else ())\nlet $CostsAndExpenses as object? := $CostsAndExpenses[1]\nlet $OperatingExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $warnings := ($warnings, if(count($OperatingExpenses) gt 1)\n                             then if(count(distinct-values($OperatingExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingExpenses.\"\n                                  else \"Cell collision with consistent values for concept OperatingExpenses.\"\n                             else ())\nlet $OperatingExpenses as object? := $OperatingExpenses[1]\nlet $CostOfRevenue as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $warnings := ($warnings, if(count($CostOfRevenue) gt 1)\n                             then if(count(distinct-values($CostOfRevenue.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostOfRevenue.\"\n                                  else \"Cell collision with consistent values for concept CostOfRevenue.\"\n                             else ())\nlet $CostOfRevenue as object? := $CostOfRevenue[1]\nlet $GrossProfit as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $warnings := ($warnings, if(count($GrossProfit) gt 1)\n                             then if(count(distinct-values($GrossProfit.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept GrossProfit.\"\n                                  else \"Cell collision with consistent values for concept GrossProfit.\"\n                             else ())\nlet $GrossProfit as object? := $GrossProfit[1]\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\n                             then if(count(distinct-values($Revenues.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Revenues.\"\n                                  else \"Cell collision with consistent values for concept Revenues.\"\n                             else ())\nlet $Revenues as object? := $Revenues[1]\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $OtherOperatingIncomeExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $warnings := ($warnings, if(count($OtherOperatingIncomeExpenses) gt 1)\n                             then if(count(distinct-values($OtherOperatingIncomeExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OtherOperatingIncomeExpenses.\"\n                                  else \"Cell collision with consistent values for concept OtherOperatingIncomeExpenses.\"\n                             else ())\nlet $OtherOperatingIncomeExpenses as object? := $OtherOperatingIncomeExpenses[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($CostsAndExpenses) return $CostsAndExpenses\n  case (exists($CostOfRevenue) and not((not(exists($OperatingExpenses)))))\n  return\n    let $computed-value := rules:decimal-value($CostOfRevenue) + rules:decimal-value($OperatingExpenses)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CostsAndExpenses\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CostOfRevenue, \"CostOfRevenue\") || \" + \" || rules:fact-trail($OperatingExpenses, \"OperatingExpenses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($CostsAndExpenses, $OperatingExpenses, $CostOfRevenue, $GrossProfit, $Revenues, $OperatingIncomeLoss, $OtherOperatingIncomeExpenses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Costs and Expenses\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $CostOfRevenue,\n          \"fac:CostsAndExpenses\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($Revenues) and (not(exists($GrossProfit)) and not((not(exists($Revenues)))) and not((not(exists($OperatingIncomeLoss)))) and not((not(exists($OtherOperatingIncomeExpenses))))))\n  return\n    let $computed-value := rules:decimal-value($Revenues) - rules:decimal-value($OperatingIncomeLoss) - rules:decimal-value($OtherOperatingIncomeExpenses)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CostsAndExpenses\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" - \" || rules:fact-trail($OtherOperatingIncomeExpenses, \"OtherOperatingIncomeExpenses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($CostsAndExpenses, $OperatingExpenses, $CostOfRevenue, $GrossProfit, $Revenues, $OperatingIncomeLoss, $OtherOperatingIncomeExpenses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Costs and Expenses\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Revenues,\n          \"fac:CostsAndExpenses\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(OperatingExpenses))",
            "SourceFact" : [ "CostOfRevenue" ],
            "BodySrc" : "CostOfRevenue+OperatingExpenses"
        }, {
            "PrereqSrc" : "and(isblank(GrossProfit), not(isblank(Revenues)), not(isblank(OperatingIncomeLoss)),not(isblank(OtherOperatingIncomeExpenses)))",
            "SourceFact" : [ "Revenues" ],
            "BodySrc" : "Revenues-OperatingIncomeLoss-OtherOperatingIncomeExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "af746544-e3f6-412e-9046-4e744cf11335",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:CurrentAssets" ],
        "DependsOn" : [ "fac:NoncurrentAssets", "fac:Assets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:CurrentAssets\", \"fac:NoncurrentAssets\", \"fac:Assets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $CurrentAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentAssets\"]\nlet $warnings := ($warnings, if(count($CurrentAssets) gt 1)\n                             then if(count(distinct-values($CurrentAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CurrentAssets.\"\n                                  else \"Cell collision with consistent values for concept CurrentAssets.\"\n                             else ())\nlet $CurrentAssets as object? := $CurrentAssets[1]\nlet $NoncurrentAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentAssets\"]\nlet $warnings := ($warnings, if(count($NoncurrentAssets) gt 1)\n                             then if(count(distinct-values($NoncurrentAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NoncurrentAssets.\"\n                                  else \"Cell collision with consistent values for concept NoncurrentAssets.\"\n                             else ())\nlet $NoncurrentAssets as object? := $NoncurrentAssets[1]\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $warnings := ($warnings, if(count($Assets) gt 1)\n                             then if(count(distinct-values($Assets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Assets.\"\n                                  else \"Cell collision with consistent values for concept Assets.\"\n                             else ())\nlet $Assets as object? := $Assets[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($CurrentAssets) return $CurrentAssets\n  case (exists($Assets) and not((not(exists($NoncurrentAssets)))))\n  return\n    let $computed-value := rules:decimal-value($Assets) - rules:decimal-value($NoncurrentAssets)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:CurrentAssets\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Assets, \"Assets\") || \" - \" || rules:fact-trail($NoncurrentAssets, \"NoncurrentAssets\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($CurrentAssets, $NoncurrentAssets, $Assets)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Current Assets\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:CurrentAssets\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NoncurrentAssets))",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets-NoncurrentAssets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "7ddf85aa-799a-4c2d-b4fe-7b67f0554f9e",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:Equity" ],
        "DependsOn" : [ "fac:EquityAttributableToNoncontrollingInterest", "fac:EquityAttributableToParent" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:Equity\", \"fac:EquityAttributableToNoncontrollingInterest\", \"fac:EquityAttributableToParent\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $Equity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $warnings := ($warnings, if(count($Equity) gt 1)\n                             then if(count(distinct-values($Equity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Equity.\"\n                                  else \"Cell collision with consistent values for concept Equity.\"\n                             else ())\nlet $Equity as object? := $Equity[1]\nlet $EquityAttributableToNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($EquityAttributableToNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($EquityAttributableToNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept EquityAttributableToNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept EquityAttributableToNoncontrollingInterest.\"\n                             else ())\nlet $EquityAttributableToNoncontrollingInterest as object? := $EquityAttributableToNoncontrollingInterest[1]\nlet $EquityAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToParent\"]\nlet $warnings := ($warnings, if(count($EquityAttributableToParent) gt 1)\n                             then if(count(distinct-values($EquityAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept EquityAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept EquityAttributableToParent.\"\n                             else ())\nlet $EquityAttributableToParent as object? := $EquityAttributableToParent[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($Equity) return $Equity\n  case (exists($EquityAttributableToNoncontrollingInterest) and (not((not(exists($EquityAttributableToNoncontrollingInterest)))) and not((not(exists($EquityAttributableToParent))))))\n  return\n    let $computed-value := rules:decimal-value($EquityAttributableToNoncontrollingInterest) + rules:decimal-value($EquityAttributableToParent)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:Equity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($EquityAttributableToNoncontrollingInterest, \"EquityAttributableToNoncontrollingInterest\") || \" + \" || rules:fact-trail($EquityAttributableToParent, \"EquityAttributableToParent\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($Equity, $EquityAttributableToNoncontrollingInterest, $EquityAttributableToParent)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Equity\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $EquityAttributableToNoncontrollingInterest,\n          \"fac:Equity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(EquityAttributableToNoncontrollingInterest)),not(isblank(EquityAttributableToParent)))",
            "SourceFact" : [ "EquityAttributableToNoncontrollingInterest" ],
            "BodySrc" : "EquityAttributableToNoncontrollingInterest+EquityAttributableToParent"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "fc424348-7135-4b1c-8cc4-cf398183d1e0",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:EquityAttributableToParent" ],
        "DependsOn" : [ "fac:Equity", "fac:EquityAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:EquityAttributableToParent\", \"fac:Equity\", \"fac:EquityAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $EquityAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToParent\"]\nlet $warnings := ($warnings, if(count($EquityAttributableToParent) gt 1)\n                             then if(count(distinct-values($EquityAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept EquityAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept EquityAttributableToParent.\"\n                             else ())\nlet $EquityAttributableToParent as object? := $EquityAttributableToParent[1]\nlet $Equity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $warnings := ($warnings, if(count($Equity) gt 1)\n                             then if(count(distinct-values($Equity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Equity.\"\n                                  else \"Cell collision with consistent values for concept Equity.\"\n                             else ())\nlet $Equity as object? := $Equity[1]\nlet $EquityAttributableToNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($EquityAttributableToNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($EquityAttributableToNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept EquityAttributableToNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept EquityAttributableToNoncontrollingInterest.\"\n                             else ())\nlet $EquityAttributableToNoncontrollingInterest as object? := $EquityAttributableToNoncontrollingInterest[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($EquityAttributableToParent) return $EquityAttributableToParent\n  case (exists($Equity) and true)\n  return\n    let $computed-value := rules:decimal-value($Equity) - rules:decimal-value($EquityAttributableToNoncontrollingInterest)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:EquityAttributableToParent\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Equity, \"Equity\") || \" - \" || rules:fact-trail($EquityAttributableToNoncontrollingInterest, \"EquityAttributableToNoncontrollingInterest\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($EquityAttributableToParent, $Equity, $EquityAttributableToNoncontrollingInterest)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Equity Attributable to Parent\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Equity,\n          \"fac:EquityAttributableToParent\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "Equity" ],
            "BodySrc" : "Equity - EquityAttributableToNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "BS1",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:EquityValidation" ],
        "DependsOn" : [ "fac:Equity", "fac:EquityAttributableToParent", "fac:EquityAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:EquityValidation\", \"fac:Equity\", \"fac:EquityAttributableToParent\", \"fac:EquityAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $EquityValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityValidation\"]\nlet $warnings := ($warnings, if(count($EquityValidation) gt 1)\n                             then if(count(distinct-values($EquityValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept EquityValidation.\"\n                                  else \"Cell collision with consistent values for concept EquityValidation.\"\n                             else ())\nlet $EquityValidation as object? := $EquityValidation[1]\nlet $Equity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $warnings := ($warnings, if(count($Equity) gt 1)\n                             then if(count(distinct-values($Equity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Equity.\"\n                                  else \"Cell collision with consistent values for concept Equity.\"\n                             else ())\nlet $Equity as object? := $Equity[1]\nlet $EquityAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToParent\"]\nlet $warnings := ($warnings, if(count($EquityAttributableToParent) gt 1)\n                             then if(count(distinct-values($EquityAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept EquityAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept EquityAttributableToParent.\"\n                             else ())\nlet $EquityAttributableToParent as object? := $EquityAttributableToParent[1]\nlet $EquityAttributableToNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:EquityAttributableToNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($EquityAttributableToNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($EquityAttributableToNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept EquityAttributableToNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept EquityAttributableToNoncontrollingInterest.\"\n                             else ())\nlet $EquityAttributableToNoncontrollingInterest as object? := $EquityAttributableToNoncontrollingInterest[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($EquityValidation) return $EquityValidation\n  case (exists($Equity) and not((not(exists($Equity)))))\n  return\n    let $computed-value := rules:decimal-value($Equity) eq rules:decimal-value($EquityAttributableToParent) + rules:decimal-value($EquityAttributableToNoncontrollingInterest)\n    let $audit-trail-message as string* := \n         rules:fact-trail($Equity, \"Equity\") || \" = \" || rules:fact-trail($EquityAttributableToParent, \"EquityAttributableToParent\") || \" + \" || rules:fact-trail($EquityAttributableToNoncontrollingInterest, \"EquityAttributableToNoncontrollingInterest\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($EquityValidation, $Equity, $EquityAttributableToParent, $EquityAttributableToNoncontrollingInterest)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Equity,\n          \"fac:EquityValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $Equity,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:Equity" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(Equity))",
            "SourceFact" : [ "Equity" ],
            "BodySrc" : "Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "752e7bc0-858b-4c36-9e82-fb560298e98e",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:GrossProfit" ],
        "DependsOn" : [ "fac:Revenues", "fac:CostOfRevenue" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:GrossProfit\", \"fac:Revenues\", \"fac:CostOfRevenue\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $GrossProfit as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $warnings := ($warnings, if(count($GrossProfit) gt 1)\n                             then if(count(distinct-values($GrossProfit.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept GrossProfit.\"\n                                  else \"Cell collision with consistent values for concept GrossProfit.\"\n                             else ())\nlet $GrossProfit as object? := $GrossProfit[1]\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\n                             then if(count(distinct-values($Revenues.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Revenues.\"\n                                  else \"Cell collision with consistent values for concept Revenues.\"\n                             else ())\nlet $Revenues as object? := $Revenues[1]\nlet $CostOfRevenue as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $warnings := ($warnings, if(count($CostOfRevenue) gt 1)\n                             then if(count(distinct-values($CostOfRevenue.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostOfRevenue.\"\n                                  else \"Cell collision with consistent values for concept CostOfRevenue.\"\n                             else ())\nlet $CostOfRevenue as object? := $CostOfRevenue[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($GrossProfit) return $GrossProfit\n  case (exists($Revenues) and (not((not(exists($Revenues)))) and not((not(exists($CostOfRevenue))))))\n  return\n    let $computed-value := rules:decimal-value($Revenues) - rules:decimal-value($CostOfRevenue)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:GrossProfit\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($GrossProfit, $Revenues, $CostOfRevenue)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Gross Profit\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Revenues,\n          \"fac:GrossProfit\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(Revenues)),not(isblank(CostOfRevenue)))",
            "SourceFact" : [ "Revenues" ],
            "BodySrc" : "Revenues-CostOfRevenue"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS1",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:GrossProfitValidation" ],
        "DependsOn" : [ "fac:GrossProfit", "fac:Revenues", "fac:CostOfRevenue" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:GrossProfitValidation\", \"fac:GrossProfit\", \"fac:Revenues\", \"fac:CostOfRevenue\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $GrossProfitValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfitValidation\"]\nlet $warnings := ($warnings, if(count($GrossProfitValidation) gt 1)\n                             then if(count(distinct-values($GrossProfitValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept GrossProfitValidation.\"\n                                  else \"Cell collision with consistent values for concept GrossProfitValidation.\"\n                             else ())\nlet $GrossProfitValidation as object? := $GrossProfitValidation[1]\nlet $GrossProfit as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $warnings := ($warnings, if(count($GrossProfit) gt 1)\n                             then if(count(distinct-values($GrossProfit.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept GrossProfit.\"\n                                  else \"Cell collision with consistent values for concept GrossProfit.\"\n                             else ())\nlet $GrossProfit as object? := $GrossProfit[1]\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\n                             then if(count(distinct-values($Revenues.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Revenues.\"\n                                  else \"Cell collision with consistent values for concept Revenues.\"\n                             else ())\nlet $Revenues as object? := $Revenues[1]\nlet $CostOfRevenue as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $warnings := ($warnings, if(count($CostOfRevenue) gt 1)\n                             then if(count(distinct-values($CostOfRevenue.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostOfRevenue.\"\n                                  else \"Cell collision with consistent values for concept CostOfRevenue.\"\n                             else ())\nlet $CostOfRevenue as object? := $CostOfRevenue[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($GrossProfitValidation) return $GrossProfitValidation\n  case (exists($GrossProfit) and not((not(exists($GrossProfit)))))\n  return\n    let $computed-value := rules:decimal-value($GrossProfit) eq rules:decimal-value($Revenues) - rules:decimal-value($CostOfRevenue)\n    let $audit-trail-message as string* := \n         rules:fact-trail($GrossProfit, \"GrossProfit\") || \" = \" || rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($GrossProfitValidation, $GrossProfit, $Revenues, $CostOfRevenue)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS1] GrossProfit = Revenues - CostOfRevenue\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $GrossProfit,\n          \"fac:GrossProfitValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $GrossProfit,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:GrossProfit" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(GrossProfit))",
            "SourceFact" : [ "GrossProfit" ],
            "BodySrc" : "GrossProfit = Revenues - CostOfRevenue"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "0cf36e1f-fa8d-4007-b083-008c9a2bd589",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:IncomeLossBeforeEquityMethodInvestments" ],
        "DependsOn" : [ "fac:IncomeLossFromContinuingOperationsBeforeTax", "fac:IncomeLossFromEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:IncomeLossFromEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $IncomeLossBeforeEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossBeforeEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossBeforeEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $IncomeLossBeforeEquityMethodInvestments[1]\nlet $IncomeLossFromContinuingOperationsBeforeTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsBeforeTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsBeforeTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $IncomeLossFromContinuingOperationsBeforeTax[1]\nlet $IncomeLossFromEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossFromEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossFromEquityMethodInvestments as object? := $IncomeLossFromEquityMethodInvestments[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossBeforeEquityMethodInvestments) return $IncomeLossBeforeEquityMethodInvestments\n  case (exists($IncomeLossFromContinuingOperationsBeforeTax) and not((not(exists($IncomeLossFromContinuingOperationsBeforeTax)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromContinuingOperationsBeforeTax) - rules:decimal-value($IncomeLossFromEquityMethodInvestments)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:IncomeLossBeforeEquityMethodInvestments\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossFromContinuingOperationsBeforeTax, \"IncomeLossFromContinuingOperationsBeforeTax\") || \" - \" || rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($IncomeLossBeforeEquityMethodInvestments, $IncomeLossFromContinuingOperationsBeforeTax, $IncomeLossFromEquityMethodInvestments)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Income (Loss) Before Equity Method Investments\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $IncomeLossFromContinuingOperationsBeforeTax,\n          \"fac:IncomeLossBeforeEquityMethodInvestments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(IncomeLossFromContinuingOperationsBeforeTax))",
            "SourceFact" : [ "IncomeLossFromContinuingOperationsBeforeTax" ],
            "BodySrc" : "IncomeLossFromContinuingOperationsBeforeTax-IncomeLossFromEquityMethodInvestments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:IncomeLossBeforeEquityMethodInvestmentsValidation" ],
        "DependsOn" : [ "fac:IncomeLossBeforeEquityMethodInvestments", "fac:OperatingIncomeLoss", "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\", \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:OperatingIncomeLoss\", \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $IncomeLossBeforeEquityMethodInvestmentsValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\"]\nlet $warnings := ($warnings, if(count($IncomeLossBeforeEquityMethodInvestmentsValidation) gt 1)\n                             then if(count(distinct-values($IncomeLossBeforeEquityMethodInvestmentsValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossBeforeEquityMethodInvestmentsValidation.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossBeforeEquityMethodInvestmentsValidation.\"\n                             else ())\nlet $IncomeLossBeforeEquityMethodInvestmentsValidation as object? := $IncomeLossBeforeEquityMethodInvestmentsValidation[1]\nlet $IncomeLossBeforeEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossBeforeEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossBeforeEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $IncomeLossBeforeEquityMethodInvestments[1]\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $NonoperatingIncomeLossPlusInterestAndDebtExpense as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\"]\nlet $warnings := ($warnings, if(count($NonoperatingIncomeLossPlusInterestAndDebtExpense) gt 1)\n                             then if(count(distinct-values($NonoperatingIncomeLossPlusInterestAndDebtExpense.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NonoperatingIncomeLossPlusInterestAndDebtExpense.\"\n                                  else \"Cell collision with consistent values for concept NonoperatingIncomeLossPlusInterestAndDebtExpense.\"\n                             else ())\nlet $NonoperatingIncomeLossPlusInterestAndDebtExpense as object? := $NonoperatingIncomeLossPlusInterestAndDebtExpense[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossBeforeEquityMethodInvestmentsValidation) return $IncomeLossBeforeEquityMethodInvestmentsValidation\n  case (exists($IncomeLossBeforeEquityMethodInvestments) and not((not(exists($IncomeLossBeforeEquityMethodInvestments)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossBeforeEquityMethodInvestments) eq rules:decimal-value($OperatingIncomeLoss) + rules:decimal-value($NonoperatingIncomeLossPlusInterestAndDebtExpense)\n    let $audit-trail-message as string* := \n         rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\") || \" = \" || rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" + \" || rules:fact-trail($NonoperatingIncomeLossPlusInterestAndDebtExpense, \"NonoperatingIncomeLossPlusInterestAndDebtExpense\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($IncomeLossBeforeEquityMethodInvestmentsValidation, $IncomeLossBeforeEquityMethodInvestments, $OperatingIncomeLoss, $NonoperatingIncomeLossPlusInterestAndDebtExpense)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS3] IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $IncomeLossBeforeEquityMethodInvestments,\n          \"fac:IncomeLossBeforeEquityMethodInvestmentsValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $IncomeLossBeforeEquityMethodInvestments,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:IncomeLossBeforeEquityMethodInvestments" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(IncomeLossBeforeEquityMethodInvestments))",
            "SourceFact" : [ "IncomeLossBeforeEquityMethodInvestments" ],
            "BodySrc" : "IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "7cf0211d-caad-47bd-81e1-cacd6e288ecc",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:IncomeLossFromContinuingOperationsAfterTax" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:IncomeLossFromDiscontinuedOperationsNetOfTax", "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossFromContinuingOperationsAfterTax\", \"fac:NetIncomeLoss\", \"fac:IncomeLossFromDiscontinuedOperationsNetOfTax\", \"fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $IncomeLossFromContinuingOperationsAfterTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsAfterTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsAfterTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsAfterTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsAfterTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsAfterTax.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsAfterTax as object? := $IncomeLossFromContinuingOperationsAfterTax[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $IncomeLossFromDiscontinuedOperationsNetOfTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromDiscontinuedOperationsNetOfTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromDiscontinuedOperationsNetOfTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromDiscontinuedOperationsNetOfTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromDiscontinuedOperationsNetOfTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromDiscontinuedOperationsNetOfTax.\"\n                             else ())\nlet $IncomeLossFromDiscontinuedOperationsNetOfTax as object? := $IncomeLossFromDiscontinuedOperationsNetOfTax[1]\nlet $ExtraordinaryItemsOfIncomeExpenseNetOfTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax\"]\nlet $warnings := ($warnings, if(count($ExtraordinaryItemsOfIncomeExpenseNetOfTax) gt 1)\n                             then if(count(distinct-values($ExtraordinaryItemsOfIncomeExpenseNetOfTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ExtraordinaryItemsOfIncomeExpenseNetOfTax.\"\n                                  else \"Cell collision with consistent values for concept ExtraordinaryItemsOfIncomeExpenseNetOfTax.\"\n                             else ())\nlet $ExtraordinaryItemsOfIncomeExpenseNetOfTax as object? := $ExtraordinaryItemsOfIncomeExpenseNetOfTax[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossFromContinuingOperationsAfterTax) return $IncomeLossFromContinuingOperationsAfterTax\n  case (exists($NetIncomeLoss) and not((not(exists($NetIncomeLoss)))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) - rules:decimal-value($IncomeLossFromDiscontinuedOperationsNetOfTax) - rules:decimal-value($ExtraordinaryItemsOfIncomeExpenseNetOfTax)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:IncomeLossFromContinuingOperationsAfterTax\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" - \" || rules:fact-trail($IncomeLossFromDiscontinuedOperationsNetOfTax, \"IncomeLossFromDiscontinuedOperationsNetOfTax\") || \" - \" || rules:fact-trail($ExtraordinaryItemsOfIncomeExpenseNetOfTax, \"ExtraordinaryItemsOfIncomeExpenseNetOfTax\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($IncomeLossFromContinuingOperationsAfterTax, $NetIncomeLoss, $IncomeLossFromDiscontinuedOperationsNetOfTax, $ExtraordinaryItemsOfIncomeExpenseNetOfTax)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Income (Loss) from Continuing Operations After Tax\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:IncomeLossFromContinuingOperationsAfterTax\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetIncomeLoss))",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss-IncomeLossFromDiscontinuedOperationsNetOfTax-ExtraordinaryItemsOfIncomeExpenseNetOfTax"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS5",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:IncomeLossFromContinuingOperationsAfterTaxValidation" ],
        "DependsOn" : [ "fac:IncomeLossFromContinuingOperationsAfterTax", "fac:IncomeLossFromContinuingOperationsBeforeTax", "fac:IncomeTaxExpenseBenefit" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\", \"fac:IncomeLossFromContinuingOperationsAfterTax\", \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:IncomeTaxExpenseBenefit\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $IncomeLossFromContinuingOperationsAfterTaxValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsAfterTaxValidation) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsAfterTaxValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsAfterTaxValidation.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsAfterTaxValidation.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsAfterTaxValidation as object? := $IncomeLossFromContinuingOperationsAfterTaxValidation[1]\nlet $IncomeLossFromContinuingOperationsAfterTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsAfterTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsAfterTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsAfterTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsAfterTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsAfterTax.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsAfterTax as object? := $IncomeLossFromContinuingOperationsAfterTax[1]\nlet $IncomeLossFromContinuingOperationsBeforeTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsBeforeTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsBeforeTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $IncomeLossFromContinuingOperationsBeforeTax[1]\nlet $IncomeTaxExpenseBenefit as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeTaxExpenseBenefit\"]\nlet $warnings := ($warnings, if(count($IncomeTaxExpenseBenefit) gt 1)\n                             then if(count(distinct-values($IncomeTaxExpenseBenefit.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeTaxExpenseBenefit.\"\n                                  else \"Cell collision with consistent values for concept IncomeTaxExpenseBenefit.\"\n                             else ())\nlet $IncomeTaxExpenseBenefit as object? := $IncomeTaxExpenseBenefit[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossFromContinuingOperationsAfterTaxValidation) return $IncomeLossFromContinuingOperationsAfterTaxValidation\n  case (exists($IncomeLossFromContinuingOperationsAfterTax) and true)\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromContinuingOperationsAfterTax) eq rules:decimal-value($IncomeLossFromContinuingOperationsBeforeTax) - rules:decimal-value($IncomeTaxExpenseBenefit)\n    let $audit-trail-message as string* := \n         rules:fact-trail($IncomeLossFromContinuingOperationsAfterTax, \"IncomeLossFromContinuingOperationsAfterTax\") || \" = \" || rules:fact-trail($IncomeLossFromContinuingOperationsBeforeTax, \"IncomeLossFromContinuingOperationsBeforeTax\") || \" - \" || rules:fact-trail($IncomeTaxExpenseBenefit, \"IncomeTaxExpenseBenefit\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($IncomeLossFromContinuingOperationsAfterTaxValidation, $IncomeLossFromContinuingOperationsAfterTax, $IncomeLossFromContinuingOperationsBeforeTax, $IncomeTaxExpenseBenefit)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS5] IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $IncomeLossFromContinuingOperationsAfterTax,\n          \"fac:IncomeLossFromContinuingOperationsAfterTaxValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $IncomeLossFromContinuingOperationsAfterTax,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:IncomeLossFromContinuingOperationsAfterTax" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "IncomeLossFromContinuingOperationsAfterTax" ],
            "BodySrc" : "IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "f1a8f202-897e-4978-98f3-c81279f7c767",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:IncomeLossFromContinuingOperationsBeforeTax" ],
        "DependsOn" : [ "fac:IncomeLossFromEquityMethodInvestments", "fac:IncomeLossBeforeEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:IncomeLossFromEquityMethodInvestments\", \"fac:IncomeLossBeforeEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $IncomeLossFromContinuingOperationsBeforeTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsBeforeTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsBeforeTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $IncomeLossFromContinuingOperationsBeforeTax[1]\nlet $IncomeLossFromEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossFromEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossFromEquityMethodInvestments as object? := $IncomeLossFromEquityMethodInvestments[1]\nlet $IncomeLossBeforeEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossBeforeEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossBeforeEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $IncomeLossBeforeEquityMethodInvestments[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossFromContinuingOperationsBeforeTax) return $IncomeLossFromContinuingOperationsBeforeTax\n  case (exists($IncomeLossFromEquityMethodInvestments) and (not((not(exists($IncomeLossFromEquityMethodInvestments)))) and not((not(exists($IncomeLossBeforeEquityMethodInvestments))))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromEquityMethodInvestments) + rules:decimal-value($IncomeLossBeforeEquityMethodInvestments)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:IncomeLossFromContinuingOperationsBeforeTax\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\") || \" + \" || rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($IncomeLossFromContinuingOperationsBeforeTax, $IncomeLossFromEquityMethodInvestments, $IncomeLossBeforeEquityMethodInvestments)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Income (Loss) from Continuing Operations Before Tax\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $IncomeLossFromEquityMethodInvestments,\n          \"fac:IncomeLossFromContinuingOperationsBeforeTax\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(IncomeLossFromEquityMethodInvestments)), not(isblank(IncomeLossBeforeEquityMethodInvestments)))",
            "SourceFact" : [ "IncomeLossFromEquityMethodInvestments" ],
            "BodySrc" : "IncomeLossFromEquityMethodInvestments+IncomeLossBeforeEquityMethodInvestments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS4",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation" ],
        "DependsOn" : [ "fac:IncomeLossFromContinuingOperationsBeforeTax", "fac:IncomeLossBeforeEquityMethodInvestments", "fac:IncomeLossFromEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\", \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:IncomeLossFromEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $IncomeLossFromContinuingOperationsBeforeTaxValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsBeforeTaxValidation) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsBeforeTaxValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsBeforeTaxValidation.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsBeforeTaxValidation.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsBeforeTaxValidation as object? := $IncomeLossFromContinuingOperationsBeforeTaxValidation[1]\nlet $IncomeLossFromContinuingOperationsBeforeTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsBeforeTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsBeforeTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $IncomeLossFromContinuingOperationsBeforeTax[1]\nlet $IncomeLossBeforeEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossBeforeEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossBeforeEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $IncomeLossBeforeEquityMethodInvestments[1]\nlet $IncomeLossFromEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossFromEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossFromEquityMethodInvestments as object? := $IncomeLossFromEquityMethodInvestments[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($IncomeLossFromContinuingOperationsBeforeTaxValidation) return $IncomeLossFromContinuingOperationsBeforeTaxValidation\n  case (exists($IncomeLossFromContinuingOperationsBeforeTax) and not((not(exists($IncomeLossFromContinuingOperationsBeforeTax)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromContinuingOperationsBeforeTax) eq rules:decimal-value($IncomeLossBeforeEquityMethodInvestments) + rules:decimal-value($IncomeLossFromEquityMethodInvestments)\n    let $audit-trail-message as string* := \n         rules:fact-trail($IncomeLossFromContinuingOperationsBeforeTax, \"IncomeLossFromContinuingOperationsBeforeTax\") || \" = \" || rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\") || \" + \" || rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($IncomeLossFromContinuingOperationsBeforeTaxValidation, $IncomeLossFromContinuingOperationsBeforeTax, $IncomeLossBeforeEquityMethodInvestments, $IncomeLossFromEquityMethodInvestments)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS4] IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $IncomeLossFromContinuingOperationsBeforeTax,\n          \"fac:IncomeLossFromContinuingOperationsBeforeTaxValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $IncomeLossFromContinuingOperationsBeforeTax,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:IncomeLossFromContinuingOperationsBeforeTax" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(IncomeLossFromContinuingOperationsBeforeTax))",
            "SourceFact" : [ "IncomeLossFromContinuingOperationsBeforeTax" ],
            "BodySrc" : "IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "is_IncomeStatementFormat",
        "Type" : "xbrl28:formula",
        "Label" : "Income Statement Format imputation",
        "Formula" : "for $facts in facts:facts-for-internal(( \"fac:IncomeStatementFormat\", \"fac:GrossProfit\", \"fac:CostOfRevenue\", \"fac:Revenues\"), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) group by $canonical-filter-string := if(empty($facts)) then \"\" else facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\")) let $IncomeStatementFormat as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeStatementFormat\"] let $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"] let $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"] let $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"] return switch(true) case exists($IncomeStatementFormat) return $IncomeStatementFormat case exists($Revenues) return let $computed-value := if (rules:decimal-value($GrossProfit) eq 0 and rules:decimal-value($CostOfRevenue) eq 0) then \"Single-step\" else \"Multi-step\" let $audit-trail-message := rules:fact-trail({ \"Aspects\" : { \"xbrl:Concept\" : \"fac:IncomeStatementFormat\" }, Value: $computed-value , Type: \"NonNumericValue\"}) || \" = \" || $computed-value || \" (because \" || rules:fact-trail($GrossProfit, \"GrossProfit\") || \", \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\") || \")\" let $source-facts := ( $GrossProfit, $CostOfRevenue) return copy $newfact := rules:create-computed-fact( ($source-facts, $Revenues)[1], \"fac:IncomeStatementFormat\", $computed-value, $rule, $audit-trail-message, $source-facts, $options) modify ( replace value of json $newfact(\"Type\") with \"NonNumericValue\" ) return $newfact default return ()",
        "ComputableConcepts" : [ "fac:IncomeStatementFormat" ],
        "DependsOn" : [ "fac:GrossProfit", "fac:CostOfRevenue" ]
    }, {
        "Id" : "gi_IncomeStatementStartPeriod",
        "Type" : "xbrl28:formula",
        "Label" : "Income Statement Start Period imputation",
        "Formula" : "for $facts in facts:facts-for-internal(( \"fac:CostOfRevenue\", \"fac:GrossProfit\", \"fac:Revenues\", \"fac:CostsAndExpenses\", \"fac:OperatingIncomeLoss\", \"fac:OtherOperatingIncomeExpenses\", \"fac:OperatingExpenses\"), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) group by $canonical-filter-string := facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\")) let $CostOfRevenue as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"] let $GrossProfit as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"] let $Revenues as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"] let $CostsAndExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"] let $OperatingIncomeLoss as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"] let $OtherOperatingIncomeExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"] let $OperatingExpenses as object? := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"] return switch(true) case (exists($facts)) return let $source-fact := $facts[1] let $computed-value := facts:duration-for-fact($source-fact).Start let $audit-trail-message := rules:fact-trail({ \"Aspects\" : { \"xbrl:Concept\" : \"fac:IncomeStatementStartPeriodYearToDate\" }, Value: $computed-value, Type: \"NonNumericValue\" }) || \" = \" || \"facts:duration-for-fact(\" || rules:fact-trail($source-fact) || \").Start\" return copy $newfact := rules:create-computed-fact( $source-fact, \"fac:IncomeStatementStartPeriodYearToDate\", $computed-value, $rule, $audit-trail-message, $source-fact, $options) modify ( replace value of json $newfact(\"Type\") with \"NonNumericValue\" ) return $newfact default return ()",
        "ComputableConcepts" : [ "fac:IncomeStatementStartPeriodYearToDate" ],
        "DependsOn" : [ "fac:GrossProfit", "fac:Revenues", "fac:CostsAndExpenses", "fac:OperatingIncomeLoss", "fac:OtherOperatingIncomeExpenses", "fac:OperatingExpenses" ]
    }, {
        "Id" : "6853bb17-792a-4aa0-8a5e-db3f38675382",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:InterestAndDebtExpense" ],
        "DependsOn" : [ "fac:OperatingIncomeLoss", "fac:NonoperatingIncomeLoss", "fac:IncomeLossBeforeEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:InterestAndDebtExpense\", \"fac:OperatingIncomeLoss\", \"fac:NonoperatingIncomeLoss\", \"fac:IncomeLossBeforeEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $InterestAndDebtExpense as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:InterestAndDebtExpense\"]\nlet $warnings := ($warnings, if(count($InterestAndDebtExpense) gt 1)\n                             then if(count(distinct-values($InterestAndDebtExpense.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept InterestAndDebtExpense.\"\n                                  else \"Cell collision with consistent values for concept InterestAndDebtExpense.\"\n                             else ())\nlet $InterestAndDebtExpense as object? := $InterestAndDebtExpense[1]\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $NonoperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NonoperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($NonoperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NonoperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NonoperatingIncomeLoss.\"\n                             else ())\nlet $NonoperatingIncomeLoss as object? := $NonoperatingIncomeLoss[1]\nlet $IncomeLossBeforeEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossBeforeEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossBeforeEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $IncomeLossBeforeEquityMethodInvestments[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($InterestAndDebtExpense) return $InterestAndDebtExpense\n  case (exists($IncomeLossBeforeEquityMethodInvestments) and (not((not(exists($OperatingIncomeLoss)))) and not((not(exists($NonoperatingIncomeLoss)))) and not((not(exists($IncomeLossBeforeEquityMethodInvestments))))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossBeforeEquityMethodInvestments) - rules:decimal-value($OperatingIncomeLoss) - rules:decimal-value($NonoperatingIncomeLoss)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:InterestAndDebtExpense\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\") || \" - \" || rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" - \" || rules:fact-trail($NonoperatingIncomeLoss, \"NonoperatingIncomeLoss\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($InterestAndDebtExpense, $OperatingIncomeLoss, $NonoperatingIncomeLoss, $IncomeLossBeforeEquityMethodInvestments)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Interest and Debt Expense\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $IncomeLossBeforeEquityMethodInvestments,\n          \"fac:InterestAndDebtExpense\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(OperatingIncomeLoss)), not(isblank(NonoperatingIncomeLoss)), not(isblank(IncomeLossBeforeEquityMethodInvestments)))",
            "SourceFact" : [ "IncomeLossBeforeEquityMethodInvestments" ],
            "BodySrc" : "IncomeLossBeforeEquityMethodInvestments-OperatingIncomeLoss-NonoperatingIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "502dddba-aa21-4b3c-b124-437cf46a9ef5",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:Liabilities" ],
        "DependsOn" : [ "fac:Equity", "fac:LiabilitiesAndEquity", "fac:CommitmentsAndContingencies", "fac:TemporaryEquity", "fac:CurrentLiabilities", "fac:NoncurrentLiabilities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:Liabilities\", \"fac:Equity\", \"fac:LiabilitiesAndEquity\", \"fac:CommitmentsAndContingencies\", \"fac:TemporaryEquity\", \"fac:CurrentLiabilities\", \"fac:NoncurrentLiabilities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $Liabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Liabilities\"]\nlet $warnings := ($warnings, if(count($Liabilities) gt 1)\n                             then if(count(distinct-values($Liabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Liabilities.\"\n                                  else \"Cell collision with consistent values for concept Liabilities.\"\n                             else ())\nlet $Liabilities as object? := $Liabilities[1]\nlet $Equity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $warnings := ($warnings, if(count($Equity) gt 1)\n                             then if(count(distinct-values($Equity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Equity.\"\n                                  else \"Cell collision with consistent values for concept Equity.\"\n                             else ())\nlet $Equity as object? := $Equity[1]\nlet $LiabilitiesAndEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquity\"]\nlet $warnings := ($warnings, if(count($LiabilitiesAndEquity) gt 1)\n                             then if(count(distinct-values($LiabilitiesAndEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept LiabilitiesAndEquity.\"\n                                  else \"Cell collision with consistent values for concept LiabilitiesAndEquity.\"\n                             else ())\nlet $LiabilitiesAndEquity as object? := $LiabilitiesAndEquity[1]\nlet $CommitmentsAndContingencies as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CommitmentsAndContingencies\"]\nlet $warnings := ($warnings, if(count($CommitmentsAndContingencies) gt 1)\n                             then if(count(distinct-values($CommitmentsAndContingencies.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CommitmentsAndContingencies.\"\n                                  else \"Cell collision with consistent values for concept CommitmentsAndContingencies.\"\n                             else ())\nlet $CommitmentsAndContingencies as object? := $CommitmentsAndContingencies[1]\nlet $TemporaryEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:TemporaryEquity\"]\nlet $warnings := ($warnings, if(count($TemporaryEquity) gt 1)\n                             then if(count(distinct-values($TemporaryEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept TemporaryEquity.\"\n                                  else \"Cell collision with consistent values for concept TemporaryEquity.\"\n                             else ())\nlet $TemporaryEquity as object? := $TemporaryEquity[1]\nlet $CurrentLiabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentLiabilities\"]\nlet $warnings := ($warnings, if(count($CurrentLiabilities) gt 1)\n                             then if(count(distinct-values($CurrentLiabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CurrentLiabilities.\"\n                                  else \"Cell collision with consistent values for concept CurrentLiabilities.\"\n                             else ())\nlet $CurrentLiabilities as object? := $CurrentLiabilities[1]\nlet $NoncurrentLiabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentLiabilities\"]\nlet $warnings := ($warnings, if(count($NoncurrentLiabilities) gt 1)\n                             then if(count(distinct-values($NoncurrentLiabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NoncurrentLiabilities.\"\n                                  else \"Cell collision with consistent values for concept NoncurrentLiabilities.\"\n                             else ())\nlet $NoncurrentLiabilities as object? := $NoncurrentLiabilities[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($Liabilities) return $Liabilities\n  case (exists($Equity) and not((not(exists($Equity)))))\n  return\n    let $computed-value := rules:decimal-value($LiabilitiesAndEquity) - (rules:decimal-value($CommitmentsAndContingencies) + rules:decimal-value($TemporaryEquity) + rules:decimal-value($Equity))\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:Liabilities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($LiabilitiesAndEquity, \"LiabilitiesAndEquity\") || \" - \" || \" ( \" || rules:fact-trail($CommitmentsAndContingencies, \"CommitmentsAndContingencies\") || \" + \" || rules:fact-trail($TemporaryEquity, \"TemporaryEquity\") || \" + \" || rules:fact-trail($Equity, \"Equity\") || \" )\"\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($Liabilities, $Equity, $LiabilitiesAndEquity, $CommitmentsAndContingencies, $TemporaryEquity, $CurrentLiabilities, $NoncurrentLiabilities)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Liabilities\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Equity,\n          \"fac:Liabilities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($CurrentLiabilities) and (not((not(exists($CurrentLiabilities)))) and not((not(exists($NoncurrentLiabilities))))))\n  return\n    let $computed-value := rules:decimal-value($CurrentLiabilities) + rules:decimal-value($NoncurrentLiabilities)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:Liabilities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CurrentLiabilities, \"CurrentLiabilities\") || \" + \" || rules:fact-trail($NoncurrentLiabilities, \"NoncurrentLiabilities\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($Liabilities, $Equity, $LiabilitiesAndEquity, $CommitmentsAndContingencies, $TemporaryEquity, $CurrentLiabilities, $NoncurrentLiabilities)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Liabilities\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $CurrentLiabilities,\n          \"fac:Liabilities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(Equity))",
            "SourceFact" : [ "Equity" ],
            "BodySrc" : "LiabilitiesAndEquity- (CommitmentsAndContingencies+TemporaryEquity+Equity)"
        }, {
            "PrereqSrc" : "and(not(isblank(CurrentLiabilities)),not(isblank(NoncurrentLiabilities)))",
            "SourceFact" : [ "CurrentLiabilities" ],
            "BodySrc" : "CurrentLiabilities+NoncurrentLiabilities"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "7133041c-146b-4605-9382-d21659dbb020",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:LiabilitiesAndEquity" ],
        "DependsOn" : [ "fac:Assets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:LiabilitiesAndEquity\", \"fac:Assets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $LiabilitiesAndEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquity\"]\nlet $warnings := ($warnings, if(count($LiabilitiesAndEquity) gt 1)\n                             then if(count(distinct-values($LiabilitiesAndEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept LiabilitiesAndEquity.\"\n                                  else \"Cell collision with consistent values for concept LiabilitiesAndEquity.\"\n                             else ())\nlet $LiabilitiesAndEquity as object? := $LiabilitiesAndEquity[1]\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $warnings := ($warnings, if(count($Assets) gt 1)\n                             then if(count(distinct-values($Assets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Assets.\"\n                                  else \"Cell collision with consistent values for concept Assets.\"\n                             else ())\nlet $Assets as object? := $Assets[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($LiabilitiesAndEquity) return $LiabilitiesAndEquity\n  case (exists($Assets) and not((not(exists($Assets)))))\n  return\n    let $computed-value := rules:decimal-value($Assets)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:LiabilitiesAndEquity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Assets, \"Assets\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($LiabilitiesAndEquity, $Assets)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Liabilities and Equity\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:LiabilitiesAndEquity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(Assets))",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "BS5",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:LiabilitiesAndEquityValidation" ],
        "DependsOn" : [ "fac:LiabilitiesAndEquity", "fac:Liabilities", "fac:CommitmentsAndContingencies", "fac:TemporaryEquity", "fac:Equity" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:LiabilitiesAndEquityValidation\", \"fac:LiabilitiesAndEquity\", \"fac:Liabilities\", \"fac:CommitmentsAndContingencies\", \"fac:TemporaryEquity\", \"fac:Equity\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $LiabilitiesAndEquityValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquityValidation\"]\nlet $warnings := ($warnings, if(count($LiabilitiesAndEquityValidation) gt 1)\n                             then if(count(distinct-values($LiabilitiesAndEquityValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept LiabilitiesAndEquityValidation.\"\n                                  else \"Cell collision with consistent values for concept LiabilitiesAndEquityValidation.\"\n                             else ())\nlet $LiabilitiesAndEquityValidation as object? := $LiabilitiesAndEquityValidation[1]\nlet $LiabilitiesAndEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesAndEquity\"]\nlet $warnings := ($warnings, if(count($LiabilitiesAndEquity) gt 1)\n                             then if(count(distinct-values($LiabilitiesAndEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept LiabilitiesAndEquity.\"\n                                  else \"Cell collision with consistent values for concept LiabilitiesAndEquity.\"\n                             else ())\nlet $LiabilitiesAndEquity as object? := $LiabilitiesAndEquity[1]\nlet $Liabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Liabilities\"]\nlet $warnings := ($warnings, if(count($Liabilities) gt 1)\n                             then if(count(distinct-values($Liabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Liabilities.\"\n                                  else \"Cell collision with consistent values for concept Liabilities.\"\n                             else ())\nlet $Liabilities as object? := $Liabilities[1]\nlet $CommitmentsAndContingencies as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CommitmentsAndContingencies\"]\nlet $warnings := ($warnings, if(count($CommitmentsAndContingencies) gt 1)\n                             then if(count(distinct-values($CommitmentsAndContingencies.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CommitmentsAndContingencies.\"\n                                  else \"Cell collision with consistent values for concept CommitmentsAndContingencies.\"\n                             else ())\nlet $CommitmentsAndContingencies as object? := $CommitmentsAndContingencies[1]\nlet $TemporaryEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:TemporaryEquity\"]\nlet $warnings := ($warnings, if(count($TemporaryEquity) gt 1)\n                             then if(count(distinct-values($TemporaryEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept TemporaryEquity.\"\n                                  else \"Cell collision with consistent values for concept TemporaryEquity.\"\n                             else ())\nlet $TemporaryEquity as object? := $TemporaryEquity[1]\nlet $Equity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $warnings := ($warnings, if(count($Equity) gt 1)\n                             then if(count(distinct-values($Equity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Equity.\"\n                                  else \"Cell collision with consistent values for concept Equity.\"\n                             else ())\nlet $Equity as object? := $Equity[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($LiabilitiesAndEquityValidation) return $LiabilitiesAndEquityValidation\n  case (exists($LiabilitiesAndEquity) and not((not(exists($LiabilitiesAndEquity)))))\n  return\n    let $computed-value := rules:decimal-value($LiabilitiesAndEquity) eq rules:decimal-value($Liabilities) + rules:decimal-value($CommitmentsAndContingencies) + rules:decimal-value($TemporaryEquity) + rules:decimal-value($Equity)\n    let $audit-trail-message as string* := \n         rules:fact-trail($LiabilitiesAndEquity, \"LiabilitiesAndEquity\") || \" = \" || rules:fact-trail($Liabilities, \"Liabilities\") || \" + \" || rules:fact-trail($CommitmentsAndContingencies, \"CommitmentsAndContingencies\") || \" + \" || rules:fact-trail($TemporaryEquity, \"TemporaryEquity\") || \" + \" || rules:fact-trail($Equity, \"Equity\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($LiabilitiesAndEquityValidation, $LiabilitiesAndEquity, $Liabilities, $CommitmentsAndContingencies, $TemporaryEquity, $Equity)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[BS5] LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $LiabilitiesAndEquity,\n          \"fac:LiabilitiesAndEquityValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $LiabilitiesAndEquity,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:LiabilitiesAndEquity" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(LiabilitiesAndEquity))",
            "SourceFact" : [ "LiabilitiesAndEquity" ],
            "BodySrc" : "LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "BS4",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:LiabilitiesValidation" ],
        "DependsOn" : [ "fac:Liabilities", "fac:CurrentLiabilities", "fac:NoncurrentLiabilities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:LiabilitiesValidation\", \"fac:Liabilities\", \"fac:CurrentLiabilities\", \"fac:NoncurrentLiabilities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $LiabilitiesValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:LiabilitiesValidation\"]\nlet $warnings := ($warnings, if(count($LiabilitiesValidation) gt 1)\n                             then if(count(distinct-values($LiabilitiesValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept LiabilitiesValidation.\"\n                                  else \"Cell collision with consistent values for concept LiabilitiesValidation.\"\n                             else ())\nlet $LiabilitiesValidation as object? := $LiabilitiesValidation[1]\nlet $Liabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Liabilities\"]\nlet $warnings := ($warnings, if(count($Liabilities) gt 1)\n                             then if(count(distinct-values($Liabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Liabilities.\"\n                                  else \"Cell collision with consistent values for concept Liabilities.\"\n                             else ())\nlet $Liabilities as object? := $Liabilities[1]\nlet $CurrentLiabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentLiabilities\"]\nlet $warnings := ($warnings, if(count($CurrentLiabilities) gt 1)\n                             then if(count(distinct-values($CurrentLiabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CurrentLiabilities.\"\n                                  else \"Cell collision with consistent values for concept CurrentLiabilities.\"\n                             else ())\nlet $CurrentLiabilities as object? := $CurrentLiabilities[1]\nlet $NoncurrentLiabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentLiabilities\"]\nlet $warnings := ($warnings, if(count($NoncurrentLiabilities) gt 1)\n                             then if(count(distinct-values($NoncurrentLiabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NoncurrentLiabilities.\"\n                                  else \"Cell collision with consistent values for concept NoncurrentLiabilities.\"\n                             else ())\nlet $NoncurrentLiabilities as object? := $NoncurrentLiabilities[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($LiabilitiesValidation) return $LiabilitiesValidation\n  case (exists($Liabilities) and not((not(exists($Liabilities)))))\n  return\n    let $computed-value := rules:decimal-value($Liabilities) eq rules:decimal-value($CurrentLiabilities) + rules:decimal-value($NoncurrentLiabilities)\n    let $audit-trail-message as string* := \n         rules:fact-trail($Liabilities, \"Liabilities\") || \" = \" || rules:fact-trail($CurrentLiabilities, \"CurrentLiabilities\") || \" + \" || rules:fact-trail($NoncurrentLiabilities, \"NoncurrentLiabilities\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($LiabilitiesValidation, $Liabilities, $CurrentLiabilities, $NoncurrentLiabilities)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[BS4] Liabilities = CurrentLiabilities + NoncurrentLiabilities\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Liabilities,\n          \"fac:LiabilitiesValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $Liabilities,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:Liabilities" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(Liabilities))",
            "SourceFact" : [ "Liabilities" ],
            "BodySrc" : "Liabilities = CurrentLiabilities + NoncurrentLiabilities"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "290f2141-89a1-4854-89f0-5511ffd1558b",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlow" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivities", "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromFinancingActivities", "fac:ExchangeGainsLosses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlow\", \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromFinancingActivities\", \"fac:ExchangeGainsLosses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlow as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlow\"]\nlet $warnings := ($warnings, if(count($NetCashFlow) gt 1)\n                             then if(count(distinct-values($NetCashFlow.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlow.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlow.\"\n                             else ())\nlet $NetCashFlow as object? := $NetCashFlow[1]\nlet $NetCashFlowFromOperatingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivities.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivities as object? := $NetCashFlowFromOperatingActivities[1]\nlet $NetCashFlowFromInvestingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivities.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivities as object? := $NetCashFlowFromInvestingActivities[1]\nlet $NetCashFlowFromFinancingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivities.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivities as object? := $NetCashFlowFromFinancingActivities[1]\nlet $ExchangeGainsLosses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ExchangeGainsLosses\"]\nlet $warnings := ($warnings, if(count($ExchangeGainsLosses) gt 1)\n                             then if(count(distinct-values($ExchangeGainsLosses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ExchangeGainsLosses.\"\n                                  else \"Cell collision with consistent values for concept ExchangeGainsLosses.\"\n                             else ())\nlet $ExchangeGainsLosses as object? := $ExchangeGainsLosses[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlow) return $NetCashFlow\n  case (exists($NetCashFlowFromOperatingActivities) and (not((not(exists($NetCashFlowFromOperatingActivities)))) and not((not(exists($NetCashFlowFromInvestingActivities)))) and not((not(exists($NetCashFlowFromFinancingActivities)))) and not((not(exists($ExchangeGainsLosses))))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities) + rules:decimal-value($ExchangeGainsLosses)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlow\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" + \" || rules:fact-trail($ExchangeGainsLosses, \"ExchangeGainsLosses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlow, $NetCashFlowFromOperatingActivities, $NetCashFlowFromInvestingActivities, $NetCashFlowFromFinancingActivities, $ExchangeGainsLosses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivities,\n          \"fac:NetCashFlow\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromOperatingActivities)), not(isblank(NetCashFlowFromInvestingActivities)), \n     not(isblank(NetCashFlowFromFinancingActivities)), not(isblank(ExchangeGainsLosses)))",
            "SourceFact" : [ "NetCashFlowFromOperatingActivities" ],
            "BodySrc" : "NetCashFlowFromOperatingActivities+NetCashFlowFromInvestingActivities+NetCashFlowFromFinancingActivities+ExchangeGainsLosses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "d7c2ba1a-141f-4035-877b-e4c149478da8",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowContinuing" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromFinancingActivitiesContinuing" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowContinuing\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivitiesContinuing\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowContinuing.\"\n                             else ())\nlet $NetCashFlowContinuing as object? := $NetCashFlowContinuing[1]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $NetCashFlowFromOperatingActivitiesContinuing[1]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $NetCashFlowFromInvestingActivitiesContinuing[1]\nlet $NetCashFlowFromFinancingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $NetCashFlowFromFinancingActivitiesContinuing[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowContinuing) return $NetCashFlowContinuing\n  case (exists($NetCashFlowFromOperatingActivitiesContinuing) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromFinancingActivitiesContinuing)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowContinuing\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesContinuing, \"NetCashFlowFromOperatingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesContinuing, \"NetCashFlowFromInvestingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesContinuing, \"NetCashFlowFromFinancingActivitiesContinuing\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowContinuing, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromFinancingActivitiesContinuing)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow, Continuing\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivitiesContinuing,\n          \"fac:NetCashFlowContinuing\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowFromOperatingActivitiesContinuing" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesContinuing+NetCashFlowFromInvestingActivitiesContinuing+NetCashFlowFromFinancingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF2",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetCashFlowContinuingValidation" ],
        "DependsOn" : [ "fac:NetCashFlowContinuing", "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromFinancingActivitiesContinuing" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowContinuingValidation\", \"fac:NetCashFlowContinuing\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivitiesContinuing\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowContinuingValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowContinuingValidation\"]\nlet $warnings := ($warnings, if(count($NetCashFlowContinuingValidation) gt 1)\n                             then if(count(distinct-values($NetCashFlowContinuingValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowContinuingValidation.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowContinuingValidation.\"\n                             else ())\nlet $NetCashFlowContinuingValidation as object? := $NetCashFlowContinuingValidation[1]\nlet $NetCashFlowContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowContinuing.\"\n                             else ())\nlet $NetCashFlowContinuing as object? := $NetCashFlowContinuing[1]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $NetCashFlowFromOperatingActivitiesContinuing[1]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $NetCashFlowFromInvestingActivitiesContinuing[1]\nlet $NetCashFlowFromFinancingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $NetCashFlowFromFinancingActivitiesContinuing[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowContinuingValidation) return $NetCashFlowContinuingValidation\n  case (exists($NetCashFlowContinuing) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowContinuing) eq rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromFinancingActivitiesContinuing)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetCashFlowContinuing, \"NetCashFlowContinuing\") || \" = \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesContinuing, \"NetCashFlowFromOperatingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesContinuing, \"NetCashFlowFromInvestingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesContinuing, \"NetCashFlowFromFinancingActivitiesContinuing\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowContinuingValidation, $NetCashFlowContinuing, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromFinancingActivitiesContinuing)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[CF2] NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowContinuing,\n          \"fac:NetCashFlowContinuingValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowContinuing,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowContinuing" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowContinuing" ],
            "BodySrc" : "NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "260e6e0f-e6f4-48d2-8361-75cbfe04fe75",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowDiscontinued" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivitiesDiscontinued", "fac:NetCashFlowFromInvestingActivitiesDiscontinued", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowDiscontinued\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowDiscontinued.\"\n                             else ())\nlet $NetCashFlowDiscontinued as object? := $NetCashFlowDiscontinued[1]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $NetCashFlowFromOperatingActivitiesDiscontinued[1]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $NetCashFlowFromInvestingActivitiesDiscontinued[1]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $NetCashFlowFromFinancingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowDiscontinued) return $NetCashFlowDiscontinued\n  case (exists($NetCashFlowFromOperatingActivitiesDiscontinued) and (not((not(exists($NetCashFlowFromOperatingActivitiesDiscontinued))))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowDiscontinued, $NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow, Discontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivitiesDiscontinued,\n          \"fac:NetCashFlowDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($NetCashFlowFromInvestingActivitiesDiscontinued) and (not((not(exists($NetCashFlowFromOperatingActivitiesDiscontinued))))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowDiscontinued, $NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow, Discontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivitiesDiscontinued,\n          \"fac:NetCashFlowDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($NetCashFlowFromFinancingActivitiesDiscontinued) and (not((not(exists($NetCashFlowFromFinancingActivitiesDiscontinued))))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowDiscontinued, $NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow, Discontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivitiesDiscontinued,\n          \"fac:NetCashFlowDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromOperatingActivitiesDiscontinued)))",
            "SourceFact" : [ "NetCashFlowFromOperatingActivitiesDiscontinued" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesDiscontinued+NetCashFlowFromInvestingActivitiesDiscontinued+NetCashFlowFromFinancingActivitiesDiscontinued"
        }, {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromOperatingActivitiesDiscontinued)))",
            "SourceFact" : [ "NetCashFlowFromInvestingActivitiesDiscontinued" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesDiscontinued+NetCashFlowFromInvestingActivitiesDiscontinued+NetCashFlowFromFinancingActivitiesDiscontinued"
        }, {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromFinancingActivitiesDiscontinued)))",
            "SourceFact" : [ "NetCashFlowFromFinancingActivitiesDiscontinued" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesDiscontinued+NetCashFlowFromInvestingActivitiesDiscontinued+NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetCashFlowDiscontinuedValidation" ],
        "DependsOn" : [ "fac:NetCashFlowDiscontinued", "fac:NetCashFlowFromOperatingActivitiesDiscontinued", "fac:NetCashFlowFromInvestingActivitiesDiscontinued", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowDiscontinuedValidation\", \"fac:NetCashFlowDiscontinued\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowDiscontinuedValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowDiscontinuedValidation\"]\nlet $warnings := ($warnings, if(count($NetCashFlowDiscontinuedValidation) gt 1)\n                             then if(count(distinct-values($NetCashFlowDiscontinuedValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowDiscontinuedValidation.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowDiscontinuedValidation.\"\n                             else ())\nlet $NetCashFlowDiscontinuedValidation as object? := $NetCashFlowDiscontinuedValidation[1]\nlet $NetCashFlowDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowDiscontinued.\"\n                             else ())\nlet $NetCashFlowDiscontinued as object? := $NetCashFlowDiscontinued[1]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $NetCashFlowFromOperatingActivitiesDiscontinued[1]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $NetCashFlowFromInvestingActivitiesDiscontinued[1]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $NetCashFlowFromFinancingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowDiscontinuedValidation) return $NetCashFlowDiscontinuedValidation\n  case (exists($NetCashFlowDiscontinued) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowDiscontinued) eq rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetCashFlowDiscontinued, \"NetCashFlowDiscontinued\") || \" = \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowDiscontinuedValidation, $NetCashFlowDiscontinued, $NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[CF3] NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowDiscontinued,\n          \"fac:NetCashFlowDiscontinuedValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowDiscontinued,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowDiscontinued" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowDiscontinued" ],
            "BodySrc" : "NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "f85598dc-58af-45c0-a2c5-94bf4b1bd277",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromFinancingActivities" ],
        "DependsOn" : [ "fac:NetCashFlowFromFinancingActivitiesContinuing", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromFinancingActivities\", \"fac:NetCashFlowFromFinancingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromFinancingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivities.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivities as object? := $NetCashFlowFromFinancingActivities[1]\nlet $NetCashFlowFromFinancingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $NetCashFlowFromFinancingActivitiesContinuing[1]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $NetCashFlowFromFinancingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromFinancingActivities) return $NetCashFlowFromFinancingActivities\n  case (exists($NetCashFlowFromFinancingActivitiesContinuing) and (not((not(exists($NetCashFlowFromFinancingActivitiesContinuing)))) and rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued) eq 0))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromFinancingActivitiesContinuing)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromFinancingActivities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromFinancingActivitiesContinuing, \"NetCashFlowFromFinancingActivitiesContinuing\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromFinancingActivities, $NetCashFlowFromFinancingActivitiesContinuing, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Financing Activities\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivitiesContinuing,\n          \"fac:NetCashFlowFromFinancingActivities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromFinancingActivitiesContinuing)),NetCashFlowFromFinancingActivitiesDiscontinued=0)",
            "SourceFact" : [ "NetCashFlowFromFinancingActivitiesContinuing" ],
            "BodySrc" : "NetCashFlowFromFinancingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "74a3bfc8-8ac4-483a-9325-a27fcb1342d6",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromFinancingActivitiesContinuing" ],
        "DependsOn" : [ "fac:NetCashFlowFromFinancingActivities", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromFinancingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivities\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromFinancingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $NetCashFlowFromFinancingActivitiesContinuing[1]\nlet $NetCashFlowFromFinancingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivities.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivities as object? := $NetCashFlowFromFinancingActivities[1]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $NetCashFlowFromFinancingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromFinancingActivitiesContinuing) return $NetCashFlowFromFinancingActivitiesContinuing\n  case (exists($NetCashFlowFromFinancingActivities) and not((not(exists($NetCashFlowFromFinancingActivities)))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromFinancingActivities) - rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromFinancingActivitiesContinuing\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" - \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromFinancingActivitiesContinuing, $NetCashFlowFromFinancingActivities, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Financing Activities, Continuing\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivities,\n          \"fac:NetCashFlowFromFinancingActivitiesContinuing\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetCashFlowFromFinancingActivities))",
            "SourceFact" : [ "NetCashFlowFromFinancingActivities" ],
            "BodySrc" : "NetCashFlowFromFinancingActivities-NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "d9bd6917-a92a-497b-a8f1-4d8d6098fcec",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromFinancingActivities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromFinancingActivities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $NetCashFlowFromFinancingActivitiesDiscontinued[1]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $NetCashFlowFromInvestingActivitiesContinuing[1]\nlet $NetCashFlowFromInvestingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivities.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivities as object? := $NetCashFlowFromInvestingActivities[1]\nlet $NetCashFlowFromFinancingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivities.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivities as object? := $NetCashFlowFromFinancingActivities[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromFinancingActivitiesDiscontinued) return $NetCashFlowFromFinancingActivitiesDiscontinued\n  case (exists($NetCashFlowFromFinancingActivities) and rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) eq rules:decimal-value($NetCashFlowFromInvestingActivities))\n  return\n    let $computed-value := 0\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         \"0\"\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromFinancingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivities, $NetCashFlowFromFinancingActivities)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Financing Activities, Discontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivities,\n          \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "NetCashFlowFromInvestingActivitiesContinuing= NetCashFlowFromInvestingActivities",
            "SourceFact" : [ "NetCashFlowFromFinancingActivities" ],
            "BodySrc" : "0"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF6",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetCashFlowFromFinancingActivitiesValidation" ],
        "DependsOn" : [ "fac:NetCashFlowFromFinancingActivities", "fac:NetCashFlowFromFinancingActivitiesContinuing", "fac:NetCashFlowFromFinancingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromFinancingActivitiesValidation\", \"fac:NetCashFlowFromFinancingActivities\", \"fac:NetCashFlowFromFinancingActivitiesContinuing\", \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromFinancingActivitiesValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesValidation\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesValidation) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesValidation.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesValidation.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesValidation as object? := $NetCashFlowFromFinancingActivitiesValidation[1]\nlet $NetCashFlowFromFinancingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivities.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivities as object? := $NetCashFlowFromFinancingActivities[1]\nlet $NetCashFlowFromFinancingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesContinuing as object? := $NetCashFlowFromFinancingActivitiesContinuing[1]\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivitiesDiscontinued as object? := $NetCashFlowFromFinancingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromFinancingActivitiesValidation) return $NetCashFlowFromFinancingActivitiesValidation\n  case (exists($NetCashFlowFromFinancingActivities) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromFinancingActivities) eq rules:decimal-value($NetCashFlowFromFinancingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" = \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesContinuing, \"NetCashFlowFromFinancingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivitiesDiscontinued, \"NetCashFlowFromFinancingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromFinancingActivitiesValidation, $NetCashFlowFromFinancingActivities, $NetCashFlowFromFinancingActivitiesContinuing, $NetCashFlowFromFinancingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[CF6] NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromFinancingActivities,\n          \"fac:NetCashFlowFromFinancingActivitiesValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowFromFinancingActivities,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowFromFinancingActivities" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowFromFinancingActivities" ],
            "BodySrc" : "NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "f9e2b8b9-1798-42b9-85a8-0848faa00c33",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromInvestingActivities" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromInvestingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivities.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivities as object? := $NetCashFlowFromInvestingActivities[1]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $NetCashFlowFromInvestingActivitiesContinuing[1]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $NetCashFlowFromInvestingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromInvestingActivities) return $NetCashFlowFromInvestingActivities\n  case (exists($NetCashFlowFromInvestingActivitiesContinuing) and (not((not(exists($NetCashFlowFromInvestingActivitiesContinuing)))) and rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued) eq 0))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromInvestingActivities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromInvestingActivitiesContinuing, \"NetCashFlowFromInvestingActivitiesContinuing\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromInvestingActivities, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Investing Activities\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivitiesContinuing,\n          \"fac:NetCashFlowFromInvestingActivities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromInvestingActivitiesContinuing)),\n          NetCashFlowFromInvestingActivitiesDiscontinued=0)",
            "SourceFact" : [ "NetCashFlowFromInvestingActivitiesContinuing" ],
            "BodySrc" : "NetCashFlowFromInvestingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "bc4dacb2-95d1-45e7-8594-2ad4e7f9f8d9",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromInvestingActivitiesContinuing" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromInvestingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromInvestingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $NetCashFlowFromInvestingActivitiesContinuing[1]\nlet $NetCashFlowFromInvestingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivities.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivities as object? := $NetCashFlowFromInvestingActivities[1]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $NetCashFlowFromInvestingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromInvestingActivitiesContinuing) return $NetCashFlowFromInvestingActivitiesContinuing\n  case (exists($NetCashFlowFromInvestingActivities) and not((not(exists($NetCashFlowFromInvestingActivities)))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromInvestingActivities) - rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromInvestingActivitiesContinuing\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" - \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivities, $NetCashFlowFromInvestingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Investing Activities, Continuing\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivities,\n          \"fac:NetCashFlowFromInvestingActivitiesContinuing\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetCashFlowFromInvestingActivities))",
            "SourceFact" : [ "NetCashFlowFromInvestingActivities" ],
            "BodySrc" : "NetCashFlowFromInvestingActivities-NetCashFlowFromInvestingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "394a9eab-557e-4cd0-9f1d-cb45d5b6e6ae",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromInvestingActivitiesDiscontinued" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $NetCashFlowFromInvestingActivitiesDiscontinued[1]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $NetCashFlowFromInvestingActivitiesContinuing[1]\nlet $NetCashFlowFromInvestingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivities.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivities as object? := $NetCashFlowFromInvestingActivities[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromInvestingActivitiesDiscontinued) return $NetCashFlowFromInvestingActivitiesDiscontinued\n  case (exists($NetCashFlowFromInvestingActivities) and rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) eq rules:decimal-value($NetCashFlowFromInvestingActivities))\n  return\n    let $computed-value := 0\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         \"0\"\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromInvestingActivitiesDiscontinued, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivities)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Investing Activities, Discontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivities,\n          \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "NetCashFlowFromInvestingActivitiesContinuing= NetCashFlowFromInvestingActivities",
            "SourceFact" : [ "NetCashFlowFromInvestingActivities" ],
            "BodySrc" : "0"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF5",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetCashFlowFromInvestingActivitiesValidation" ],
        "DependsOn" : [ "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromInvestingActivitiesContinuing", "fac:NetCashFlowFromInvestingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromInvestingActivitiesValidation\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromInvestingActivitiesContinuing\", \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromInvestingActivitiesValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesValidation\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesValidation) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesValidation.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesValidation.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesValidation as object? := $NetCashFlowFromInvestingActivitiesValidation[1]\nlet $NetCashFlowFromInvestingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivities.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivities as object? := $NetCashFlowFromInvestingActivities[1]\nlet $NetCashFlowFromInvestingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesContinuing as object? := $NetCashFlowFromInvestingActivitiesContinuing[1]\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivitiesDiscontinued as object? := $NetCashFlowFromInvestingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromInvestingActivitiesValidation) return $NetCashFlowFromInvestingActivitiesValidation\n  case (exists($NetCashFlowFromInvestingActivities) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromInvestingActivities) eq rules:decimal-value($NetCashFlowFromInvestingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromInvestingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" = \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesContinuing, \"NetCashFlowFromInvestingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivitiesDiscontinued, \"NetCashFlowFromInvestingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromInvestingActivitiesValidation, $NetCashFlowFromInvestingActivities, $NetCashFlowFromInvestingActivitiesContinuing, $NetCashFlowFromInvestingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[CF5] NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromInvestingActivities,\n          \"fac:NetCashFlowFromInvestingActivitiesValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowFromInvestingActivities,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowFromInvestingActivities" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowFromInvestingActivities" ],
            "BodySrc" : "NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "c4cc5336-76fa-430b-8f60-c14a507bbaaa",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromOperatingActivities" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromOperatingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivities.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivities as object? := $NetCashFlowFromOperatingActivities[1]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $NetCashFlowFromOperatingActivitiesContinuing[1]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $NetCashFlowFromOperatingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromOperatingActivities) return $NetCashFlowFromOperatingActivities\n  case (exists($NetCashFlowFromOperatingActivitiesContinuing) and (not((not(exists($NetCashFlowFromOperatingActivitiesContinuing)))) and rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued) eq 0))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromOperatingActivities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivitiesContinuing, \"NetCashFlowFromOperatingActivitiesContinuing\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromOperatingActivities, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromOperatingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Operating Activities\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivitiesContinuing,\n          \"fac:NetCashFlowFromOperatingActivities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlowFromOperatingActivitiesContinuing)), NetCashFlowFromOperatingActivitiesDiscontinued=0)",
            "SourceFact" : [ "NetCashFlowFromOperatingActivitiesContinuing" ],
            "BodySrc" : "NetCashFlowFromOperatingActivitiesContinuing"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [ "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ]
    }, {
        "Id" : "50a01bf0-30ab-4d46-8418-066173dd2e67",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromOperatingActivitiesContinuing" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivities", "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromOperatingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $NetCashFlowFromOperatingActivitiesContinuing[1]\nlet $NetCashFlowFromOperatingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivities.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivities as object? := $NetCashFlowFromOperatingActivities[1]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $NetCashFlowFromOperatingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromOperatingActivitiesContinuing) return $NetCashFlowFromOperatingActivitiesContinuing\n  case (exists($NetCashFlowFromOperatingActivities) and not((not(exists($NetCashFlowFromOperatingActivities)))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivities) - rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromOperatingActivitiesContinuing\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" - \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromOperatingActivities, $NetCashFlowFromOperatingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Operating Activities, Continuing\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivities,\n          \"fac:NetCashFlowFromOperatingActivitiesContinuing\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetCashFlowFromOperatingActivities))",
            "SourceFact" : [ "NetCashFlowFromOperatingActivities" ],
            "BodySrc" : "NetCashFlowFromOperatingActivities-NetCashFlowFromOperatingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [ "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ]
    }, {
        "Id" : "e7f1c48e-4b36-429c-90cc-48634d543ab9",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromOperatingActivities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromOperatingActivities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $NetCashFlowFromOperatingActivitiesDiscontinued[1]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $NetCashFlowFromOperatingActivitiesContinuing[1]\nlet $NetCashFlowFromOperatingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivities.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivities as object? := $NetCashFlowFromOperatingActivities[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromOperatingActivitiesDiscontinued) return $NetCashFlowFromOperatingActivitiesDiscontinued\n  case (exists($NetCashFlowFromOperatingActivities) and rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing) eq rules:decimal-value($NetCashFlowFromOperatingActivities))\n  return\n    let $computed-value := 0\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\" }, Value: $computed-value }) || \" = \" || \n         \"0\"\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromOperatingActivitiesDiscontinued, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromOperatingActivities)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Cash Flow from Operating Activities, Discontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivities,\n          \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "NetCashFlowFromOperatingActivitiesContinuing=NetCashFlowFromOperatingActivities",
            "SourceFact" : [ "NetCashFlowFromOperatingActivities" ],
            "BodySrc" : "0"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF4",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetCashFlowFromOperatingActivitiesValidation" ],
        "DependsOn" : [ "fac:NetCashFlowFromOperatingActivities", "fac:NetCashFlowFromOperatingActivitiesContinuing", "fac:NetCashFlowFromOperatingActivitiesDiscontinued" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowFromOperatingActivitiesValidation\", \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromOperatingActivitiesContinuing\", \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowFromOperatingActivitiesValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesValidation\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesValidation) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesValidation.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesValidation.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesValidation as object? := $NetCashFlowFromOperatingActivitiesValidation[1]\nlet $NetCashFlowFromOperatingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivities.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivities as object? := $NetCashFlowFromOperatingActivities[1]\nlet $NetCashFlowFromOperatingActivitiesContinuing as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesContinuing\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesContinuing) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesContinuing.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesContinuing.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesContinuing as object? := $NetCashFlowFromOperatingActivitiesContinuing[1]\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivitiesDiscontinued\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivitiesDiscontinued) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivitiesDiscontinued.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivitiesDiscontinued.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivitiesDiscontinued as object? := $NetCashFlowFromOperatingActivitiesDiscontinued[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowFromOperatingActivitiesValidation) return $NetCashFlowFromOperatingActivitiesValidation\n  case (exists($NetCashFlowFromOperatingActivities) and true)\n  return\n    let $computed-value := rules:decimal-value($NetCashFlowFromOperatingActivities) eq rules:decimal-value($NetCashFlowFromOperatingActivitiesContinuing) + rules:decimal-value($NetCashFlowFromOperatingActivitiesDiscontinued)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" = \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesContinuing, \"NetCashFlowFromOperatingActivitiesContinuing\") || \" + \" || rules:fact-trail($NetCashFlowFromOperatingActivitiesDiscontinued, \"NetCashFlowFromOperatingActivitiesDiscontinued\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowFromOperatingActivitiesValidation, $NetCashFlowFromOperatingActivities, $NetCashFlowFromOperatingActivitiesContinuing, $NetCashFlowFromOperatingActivitiesDiscontinued)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[CF4] NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlowFromOperatingActivities,\n          \"fac:NetCashFlowFromOperatingActivitiesValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlowFromOperatingActivities,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlowFromOperatingActivities" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetCashFlowFromOperatingActivities" ],
            "BodySrc" : "NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "CF1",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetCashFlowValidation" ],
        "DependsOn" : [ "fac:NetCashFlow", "fac:NetCashFlowFromOperatingActivities", "fac:NetCashFlowFromInvestingActivities", "fac:NetCashFlowFromFinancingActivities", "fac:ExchangeGainsLosses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetCashFlowValidation\", \"fac:NetCashFlow\", \"fac:NetCashFlowFromOperatingActivities\", \"fac:NetCashFlowFromInvestingActivities\", \"fac:NetCashFlowFromFinancingActivities\", \"fac:ExchangeGainsLosses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetCashFlowValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowValidation\"]\nlet $warnings := ($warnings, if(count($NetCashFlowValidation) gt 1)\n                             then if(count(distinct-values($NetCashFlowValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowValidation.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowValidation.\"\n                             else ())\nlet $NetCashFlowValidation as object? := $NetCashFlowValidation[1]\nlet $NetCashFlow as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlow\"]\nlet $warnings := ($warnings, if(count($NetCashFlow) gt 1)\n                             then if(count(distinct-values($NetCashFlow.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlow.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlow.\"\n                             else ())\nlet $NetCashFlow as object? := $NetCashFlow[1]\nlet $NetCashFlowFromOperatingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromOperatingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromOperatingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromOperatingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromOperatingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromOperatingActivities.\"\n                             else ())\nlet $NetCashFlowFromOperatingActivities as object? := $NetCashFlowFromOperatingActivities[1]\nlet $NetCashFlowFromInvestingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromInvestingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromInvestingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromInvestingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromInvestingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromInvestingActivities.\"\n                             else ())\nlet $NetCashFlowFromInvestingActivities as object? := $NetCashFlowFromInvestingActivities[1]\nlet $NetCashFlowFromFinancingActivities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetCashFlowFromFinancingActivities\"]\nlet $warnings := ($warnings, if(count($NetCashFlowFromFinancingActivities) gt 1)\n                             then if(count(distinct-values($NetCashFlowFromFinancingActivities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetCashFlowFromFinancingActivities.\"\n                                  else \"Cell collision with consistent values for concept NetCashFlowFromFinancingActivities.\"\n                             else ())\nlet $NetCashFlowFromFinancingActivities as object? := $NetCashFlowFromFinancingActivities[1]\nlet $ExchangeGainsLosses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ExchangeGainsLosses\"]\nlet $warnings := ($warnings, if(count($ExchangeGainsLosses) gt 1)\n                             then if(count(distinct-values($ExchangeGainsLosses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ExchangeGainsLosses.\"\n                                  else \"Cell collision with consistent values for concept ExchangeGainsLosses.\"\n                             else ())\nlet $ExchangeGainsLosses as object? := $ExchangeGainsLosses[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetCashFlowValidation) return $NetCashFlowValidation\n  case (exists($NetCashFlow) and (not((not(exists($NetCashFlow)))) and rules:decimal-value($NetCashFlow) eq (rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities) + rules:decimal-value($ExchangeGainsLosses))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlow) eq rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities) + rules:decimal-value($ExchangeGainsLosses)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetCashFlow, \"NetCashFlow\") || \" = \" || rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" + \" || rules:fact-trail($ExchangeGainsLosses, \"ExchangeGainsLosses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowValidation, $NetCashFlow, $NetCashFlowFromOperatingActivities, $NetCashFlowFromInvestingActivities, $NetCashFlowFromFinancingActivities, $ExchangeGainsLosses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlow,\n          \"fac:NetCashFlowValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlow,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($NetCashFlow) and (not((not(exists($NetCashFlow)))) and rules:decimal-value($NetCashFlow) ne (rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities) + rules:decimal-value($ExchangeGainsLosses))))\n  return\n    let $computed-value := rules:decimal-value($NetCashFlow) eq (rules:decimal-value($NetCashFlowFromOperatingActivities) + rules:decimal-value($NetCashFlowFromInvestingActivities) + rules:decimal-value($NetCashFlowFromFinancingActivities)) - rules:decimal-value($ExchangeGainsLosses)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetCashFlow, \"NetCashFlow\") || \" = \" || \" ( \" || rules:fact-trail($NetCashFlowFromOperatingActivities, \"NetCashFlowFromOperatingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromInvestingActivities, \"NetCashFlowFromInvestingActivities\") || \" + \" || rules:fact-trail($NetCashFlowFromFinancingActivities, \"NetCashFlowFromFinancingActivities\") || \" )\" || \" - \" || rules:fact-trail($ExchangeGainsLosses, \"ExchangeGainsLosses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetCashFlowValidation, $NetCashFlow, $NetCashFlowFromOperatingActivities, $NetCashFlowFromInvestingActivities, $NetCashFlowFromFinancingActivities, $ExchangeGainsLosses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetCashFlow,\n          \"fac:NetCashFlowValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetCashFlow,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetCashFlow" ],
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetCashFlow)), NetCashFlow=(NetCashFlowFromOperatingActivities+NetCashFlowFromInvestingActivities+NetCashFlowFromFinancingActivities+ExchangeGainsLosses))",
            "SourceFact" : [ "NetCashFlow" ],
            "BodySrc" : "NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities+ExchangeGainsLosses"
        }, {
            "PrereqSrc" : "and(not(isblank(NetCashFlow)), NetCashFlow<>(NetCashFlowFromOperatingActivities+NetCashFlowFromInvestingActivities+NetCashFlowFromFinancingActivities+ExchangeGainsLosses))",
            "SourceFact" : [ "NetCashFlow" ],
            "BodySrc" : "NetCashFlow = (NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities) -ExchangeGainsLosses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "0e7003bf-f1ac-490c-81e1-764f093e678e",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetIncomeLossAttributableToParent" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:NetIncomeLossAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossAttributableToParent\", \"fac:NetIncomeLoss\", \"fac:NetIncomeLossAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetIncomeLossAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAttributableToParent) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAttributableToParent.\"\n                             else ())\nlet $NetIncomeLossAttributableToParent as object? := $NetIncomeLossAttributableToParent[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $NetIncomeLossAttributableToNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAttributableToNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAttributableToNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAttributableToNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAttributableToNoncontrollingInterest.\"\n                             else ())\nlet $NetIncomeLossAttributableToNoncontrollingInterest as object? := $NetIncomeLossAttributableToNoncontrollingInterest[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossAttributableToParent) return $NetIncomeLossAttributableToParent\n  case (exists($NetIncomeLoss) and (not((not(exists($NetIncomeLoss)))) and not(exists($NetIncomeLossAttributableToNoncontrollingInterest))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetIncomeLossAttributableToParent\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetIncomeLossAttributableToParent, $NetIncomeLoss, $NetIncomeLossAttributableToNoncontrollingInterest)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Income Attributable to Parent\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:NetIncomeLossAttributableToParent\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and (not(isblank(NetIncomeLoss)), isblank(NetIncomeLossAttributableToNoncontrollingInterest))",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "2c454b43-7933-41b8-ad05-a799dad6d4c0",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NetIncomeLossAvailableToCommonStockholdersBasic" ],
        "DependsOn" : [ "fac:NetIncomeLossAttributableToParent" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\", \"fac:NetIncomeLossAttributableToParent\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAvailableToCommonStockholdersBasic) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAvailableToCommonStockholdersBasic.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAvailableToCommonStockholdersBasic.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAvailableToCommonStockholdersBasic.\"\n                             else ())\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object? := $NetIncomeLossAvailableToCommonStockholdersBasic[1]\nlet $NetIncomeLossAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAttributableToParent) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAttributableToParent.\"\n                             else ())\nlet $NetIncomeLossAttributableToParent as object? := $NetIncomeLossAttributableToParent[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossAvailableToCommonStockholdersBasic) return $NetIncomeLossAvailableToCommonStockholdersBasic\n  case (exists($NetIncomeLossAttributableToParent) and not((not(exists($NetIncomeLossAttributableToParent)))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLossAttributableToParent)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLossAttributableToParent, \"NetIncomeLossAttributableToParent\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetIncomeLossAvailableToCommonStockholdersBasic, $NetIncomeLossAttributableToParent)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Net Income (Loss) Available to Common Stockholders, Basic\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLossAttributableToParent,\n          \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetIncomeLossAttributableToParent))",
            "SourceFact" : [ "NetIncomeLossAttributableToParent" ],
            "BodySrc" : "NetIncomeLossAttributableToParent"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS8",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation" ],
        "DependsOn" : [ "fac:NetIncomeLossAvailableToCommonStockholdersBasic", "fac:NetIncomeLossAttributableToParent", "fac:PreferredStockDividendsAndOtherAdjustments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\", \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\", \"fac:NetIncomeLossAttributableToParent\", \"fac:PreferredStockDividendsAndOtherAdjustments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetIncomeLossAvailableToCommonStockholdersBasicValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAvailableToCommonStockholdersBasicValidation) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAvailableToCommonStockholdersBasicValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAvailableToCommonStockholdersBasicValidation.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAvailableToCommonStockholdersBasicValidation.\"\n                             else ())\nlet $NetIncomeLossAvailableToCommonStockholdersBasicValidation as object? := $NetIncomeLossAvailableToCommonStockholdersBasicValidation[1]\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAvailableToCommonStockholdersBasic) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAvailableToCommonStockholdersBasic.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAvailableToCommonStockholdersBasic.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAvailableToCommonStockholdersBasic.\"\n                             else ())\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object? := $NetIncomeLossAvailableToCommonStockholdersBasic[1]\nlet $NetIncomeLossAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAttributableToParent) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAttributableToParent.\"\n                             else ())\nlet $NetIncomeLossAttributableToParent as object? := $NetIncomeLossAttributableToParent[1]\nlet $PreferredStockDividendsAndOtherAdjustments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:PreferredStockDividendsAndOtherAdjustments\"]\nlet $warnings := ($warnings, if(count($PreferredStockDividendsAndOtherAdjustments) gt 1)\n                             then if(count(distinct-values($PreferredStockDividendsAndOtherAdjustments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept PreferredStockDividendsAndOtherAdjustments.\"\n                                  else \"Cell collision with consistent values for concept PreferredStockDividendsAndOtherAdjustments.\"\n                             else ())\nlet $PreferredStockDividendsAndOtherAdjustments as object? := $PreferredStockDividendsAndOtherAdjustments[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossAvailableToCommonStockholdersBasicValidation) return $NetIncomeLossAvailableToCommonStockholdersBasicValidation\n  case (exists($NetIncomeLossAvailableToCommonStockholdersBasic) and true)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLossAvailableToCommonStockholdersBasic) eq rules:decimal-value($NetIncomeLossAttributableToParent) - rules:decimal-value($PreferredStockDividendsAndOtherAdjustments)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetIncomeLossAvailableToCommonStockholdersBasic, \"NetIncomeLossAvailableToCommonStockholdersBasic\") || \" = \" || rules:fact-trail($NetIncomeLossAttributableToParent, \"NetIncomeLossAttributableToParent\") || \" - \" || rules:fact-trail($PreferredStockDividendsAndOtherAdjustments, \"PreferredStockDividendsAndOtherAdjustments\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetIncomeLossAvailableToCommonStockholdersBasicValidation, $NetIncomeLossAvailableToCommonStockholdersBasic, $NetIncomeLossAttributableToParent, $PreferredStockDividendsAndOtherAdjustments)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS8] NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLossAvailableToCommonStockholdersBasic,\n          \"fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetIncomeLossAvailableToCommonStockholdersBasic,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetIncomeLossAvailableToCommonStockholdersBasic" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetIncomeLossAvailableToCommonStockholdersBasic" ],
            "BodySrc" : "NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS6",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetIncomeLossValidation" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:IncomeLossFromContinuingOperationsAfterTax", "fac:IncomeLossFromDiscontinuedOperationsNetOfTax", "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossValidation\", \"fac:NetIncomeLoss\", \"fac:IncomeLossFromContinuingOperationsAfterTax\", \"fac:IncomeLossFromDiscontinuedOperationsNetOfTax\", \"fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetIncomeLossValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossValidation\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossValidation) gt 1)\n                             then if(count(distinct-values($NetIncomeLossValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossValidation.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossValidation.\"\n                             else ())\nlet $NetIncomeLossValidation as object? := $NetIncomeLossValidation[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $IncomeLossFromContinuingOperationsAfterTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsAfterTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsAfterTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsAfterTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsAfterTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsAfterTax.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsAfterTax as object? := $IncomeLossFromContinuingOperationsAfterTax[1]\nlet $IncomeLossFromDiscontinuedOperationsNetOfTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromDiscontinuedOperationsNetOfTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromDiscontinuedOperationsNetOfTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromDiscontinuedOperationsNetOfTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromDiscontinuedOperationsNetOfTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromDiscontinuedOperationsNetOfTax.\"\n                             else ())\nlet $IncomeLossFromDiscontinuedOperationsNetOfTax as object? := $IncomeLossFromDiscontinuedOperationsNetOfTax[1]\nlet $ExtraordinaryItemsOfIncomeExpenseNetOfTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax\"]\nlet $warnings := ($warnings, if(count($ExtraordinaryItemsOfIncomeExpenseNetOfTax) gt 1)\n                             then if(count(distinct-values($ExtraordinaryItemsOfIncomeExpenseNetOfTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ExtraordinaryItemsOfIncomeExpenseNetOfTax.\"\n                                  else \"Cell collision with consistent values for concept ExtraordinaryItemsOfIncomeExpenseNetOfTax.\"\n                             else ())\nlet $ExtraordinaryItemsOfIncomeExpenseNetOfTax as object? := $ExtraordinaryItemsOfIncomeExpenseNetOfTax[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossValidation) return $NetIncomeLossValidation\n  case (exists($NetIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) eq rules:decimal-value($IncomeLossFromContinuingOperationsAfterTax) + rules:decimal-value($IncomeLossFromDiscontinuedOperationsNetOfTax) + rules:decimal-value($ExtraordinaryItemsOfIncomeExpenseNetOfTax)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" = \" || rules:fact-trail($IncomeLossFromContinuingOperationsAfterTax, \"IncomeLossFromContinuingOperationsAfterTax\") || \" + \" || rules:fact-trail($IncomeLossFromDiscontinuedOperationsNetOfTax, \"IncomeLossFromDiscontinuedOperationsNetOfTax\") || \" + \" || rules:fact-trail($ExtraordinaryItemsOfIncomeExpenseNetOfTax, \"ExtraordinaryItemsOfIncomeExpenseNetOfTax\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetIncomeLossValidation, $NetIncomeLoss, $IncomeLossFromContinuingOperationsAfterTax, $IncomeLossFromDiscontinuedOperationsNetOfTax, $ExtraordinaryItemsOfIncomeExpenseNetOfTax)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS6] NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:NetIncomeLossValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetIncomeLoss,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS7",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:NetIncomeLossValidation2" ],
        "DependsOn" : [ "fac:NetIncomeLoss", "fac:NetIncomeLossAttributableToParent", "fac:NetIncomeLossAttributableToNoncontrollingInterest" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NetIncomeLossValidation2\", \"fac:NetIncomeLoss\", \"fac:NetIncomeLossAttributableToParent\", \"fac:NetIncomeLossAttributableToNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NetIncomeLossValidation2 as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossValidation2\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossValidation2) gt 1)\n                             then if(count(distinct-values($NetIncomeLossValidation2.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossValidation2.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossValidation2.\"\n                             else ())\nlet $NetIncomeLossValidation2 as object? := $NetIncomeLossValidation2[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $NetIncomeLossAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAttributableToParent) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAttributableToParent.\"\n                             else ())\nlet $NetIncomeLossAttributableToParent as object? := $NetIncomeLossAttributableToParent[1]\nlet $NetIncomeLossAttributableToNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAttributableToNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAttributableToNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAttributableToNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAttributableToNoncontrollingInterest.\"\n                             else ())\nlet $NetIncomeLossAttributableToNoncontrollingInterest as object? := $NetIncomeLossAttributableToNoncontrollingInterest[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NetIncomeLossValidation2) return $NetIncomeLossValidation2\n  case (exists($NetIncomeLoss) and not((not(exists($NetIncomeLoss)))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) eq rules:decimal-value($NetIncomeLossAttributableToParent) + rules:decimal-value($NetIncomeLossAttributableToNoncontrollingInterest)\n    let $audit-trail-message as string* := \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" = \" || rules:fact-trail($NetIncomeLossAttributableToParent, \"NetIncomeLossAttributableToParent\") || \" + \" || rules:fact-trail($NetIncomeLossAttributableToNoncontrollingInterest, \"NetIncomeLossAttributableToNoncontrollingInterest\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NetIncomeLossValidation2, $NetIncomeLoss, $NetIncomeLossAttributableToParent, $NetIncomeLossAttributableToNoncontrollingInterest)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS7] NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:NetIncomeLossValidation2\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $NetIncomeLoss,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:NetIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(NetIncomeLoss))",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss=NetIncomeLossAttributableToParent+NetIncomeLossAttributableToNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "5d5eefb8-d022-44b7-8575-cadd6d377469",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NoncurrentAssets" ],
        "DependsOn" : [ "fac:CurrentAssets", "fac:Assets" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NoncurrentAssets\", \"fac:CurrentAssets\", \"fac:Assets\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NoncurrentAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentAssets\"]\nlet $warnings := ($warnings, if(count($NoncurrentAssets) gt 1)\n                             then if(count(distinct-values($NoncurrentAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NoncurrentAssets.\"\n                                  else \"Cell collision with consistent values for concept NoncurrentAssets.\"\n                             else ())\nlet $NoncurrentAssets as object? := $NoncurrentAssets[1]\nlet $CurrentAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentAssets\"]\nlet $warnings := ($warnings, if(count($CurrentAssets) gt 1)\n                             then if(count(distinct-values($CurrentAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CurrentAssets.\"\n                                  else \"Cell collision with consistent values for concept CurrentAssets.\"\n                             else ())\nlet $CurrentAssets as object? := $CurrentAssets[1]\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $warnings := ($warnings, if(count($Assets) gt 1)\n                             then if(count(distinct-values($Assets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Assets.\"\n                                  else \"Cell collision with consistent values for concept Assets.\"\n                             else ())\nlet $Assets as object? := $Assets[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NoncurrentAssets) return $NoncurrentAssets\n  case (exists($Assets) and not((not(exists($CurrentAssets)))))\n  return\n    let $computed-value := rules:decimal-value($Assets) - rules:decimal-value($CurrentAssets)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NoncurrentAssets\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Assets, \"Assets\") || \" - \" || rules:fact-trail($CurrentAssets, \"CurrentAssets\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NoncurrentAssets, $CurrentAssets, $Assets)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Noncurrent Assets\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Assets,\n          \"fac:NoncurrentAssets\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(CurrentAssets))",
            "SourceFact" : [ "Assets" ],
            "BodySrc" : "Assets-CurrentAssets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "4b62d33e-849c-4c4d-8132-844327376bfa",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NoncurrentLiabilities" ],
        "DependsOn" : [ "fac:CurrentLiabilities", "fac:Liabilities" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NoncurrentLiabilities\", \"fac:CurrentLiabilities\", \"fac:Liabilities\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NoncurrentLiabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NoncurrentLiabilities\"]\nlet $warnings := ($warnings, if(count($NoncurrentLiabilities) gt 1)\n                             then if(count(distinct-values($NoncurrentLiabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NoncurrentLiabilities.\"\n                                  else \"Cell collision with consistent values for concept NoncurrentLiabilities.\"\n                             else ())\nlet $NoncurrentLiabilities as object? := $NoncurrentLiabilities[1]\nlet $CurrentLiabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CurrentLiabilities\"]\nlet $warnings := ($warnings, if(count($CurrentLiabilities) gt 1)\n                             then if(count(distinct-values($CurrentLiabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CurrentLiabilities.\"\n                                  else \"Cell collision with consistent values for concept CurrentLiabilities.\"\n                             else ())\nlet $CurrentLiabilities as object? := $CurrentLiabilities[1]\nlet $Liabilities as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Liabilities\"]\nlet $warnings := ($warnings, if(count($Liabilities) gt 1)\n                             then if(count(distinct-values($Liabilities.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Liabilities.\"\n                                  else \"Cell collision with consistent values for concept Liabilities.\"\n                             else ())\nlet $Liabilities as object? := $Liabilities[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NoncurrentLiabilities) return $NoncurrentLiabilities\n  case (exists($CurrentLiabilities) and (not((not(exists($CurrentLiabilities)))) and not((not(exists($Liabilities))))))\n  return\n    let $computed-value := rules:decimal-value($Liabilities) - rules:decimal-value($CurrentLiabilities)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NoncurrentLiabilities\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($Liabilities, \"Liabilities\") || \" - \" || rules:fact-trail($CurrentLiabilities, \"CurrentLiabilities\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NoncurrentLiabilities, $CurrentLiabilities, $Liabilities)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Noncurrent Liabilities\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $CurrentLiabilities,\n          \"fac:NoncurrentLiabilities\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(CurrentLiabilities)),not(isblank(Liabilities)))",
            "SourceFact" : [ "CurrentLiabilities" ],
            "BodySrc" : "Liabilities-CurrentLiabilities"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "ee2117cd-9220-4ee2-a982-33f4074c1ebc",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense" ],
        "DependsOn" : [ "fac:NonoperatingIncomeLoss", "fac:InterestAndDebtExpense", "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments", "fac:IncomeLossFromEquityMethodInvestments" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\", \"fac:NonoperatingIncomeLoss\", \"fac:InterestAndDebtExpense\", \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\", \"fac:IncomeLossFromEquityMethodInvestments\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NonoperatingIncomeLossPlusInterestAndDebtExpense as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\"]\nlet $warnings := ($warnings, if(count($NonoperatingIncomeLossPlusInterestAndDebtExpense) gt 1)\n                             then if(count(distinct-values($NonoperatingIncomeLossPlusInterestAndDebtExpense.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NonoperatingIncomeLossPlusInterestAndDebtExpense.\"\n                                  else \"Cell collision with consistent values for concept NonoperatingIncomeLossPlusInterestAndDebtExpense.\"\n                             else ())\nlet $NonoperatingIncomeLossPlusInterestAndDebtExpense as object? := $NonoperatingIncomeLossPlusInterestAndDebtExpense[1]\nlet $NonoperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NonoperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($NonoperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NonoperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NonoperatingIncomeLoss.\"\n                             else ())\nlet $NonoperatingIncomeLoss as object? := $NonoperatingIncomeLoss[1]\nlet $InterestAndDebtExpense as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:InterestAndDebtExpense\"]\nlet $warnings := ($warnings, if(count($InterestAndDebtExpense) gt 1)\n                             then if(count(distinct-values($InterestAndDebtExpense.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept InterestAndDebtExpense.\"\n                                  else \"Cell collision with consistent values for concept InterestAndDebtExpense.\"\n                             else ())\nlet $InterestAndDebtExpense as object? := $InterestAndDebtExpense[1]\nlet $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments.\"\n                             else ())\nlet $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments as object? := $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments[1]\nlet $IncomeLossFromEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossFromEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossFromEquityMethodInvestments as object? := $IncomeLossFromEquityMethodInvestments[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NonoperatingIncomeLossPlusInterestAndDebtExpense) return $NonoperatingIncomeLossPlusInterestAndDebtExpense\n  case (exists($NonoperatingIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($NonoperatingIncomeLoss) - rules:decimal-value($InterestAndDebtExpense)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NonoperatingIncomeLoss, \"NonoperatingIncomeLoss\") || \" - \" || rules:fact-trail($InterestAndDebtExpense, \"InterestAndDebtExpense\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NonoperatingIncomeLossPlusInterestAndDebtExpense, $NonoperatingIncomeLoss, $InterestAndDebtExpense, $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, $IncomeLossFromEquityMethodInvestments)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Nonoperating Income (Loss) + Interest and Debt Expense\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NonoperatingIncomeLoss,\n          \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments) and not((not(exists($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments)))))\n  return\n    let $computed-value := rules:decimal-value($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments) - rules:decimal-value($IncomeLossFromEquityMethodInvestments)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, \"NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\") || \" - \" || rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NonoperatingIncomeLossPlusInterestAndDebtExpense, $NonoperatingIncomeLoss, $InterestAndDebtExpense, $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, $IncomeLossFromEquityMethodInvestments)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Nonoperating Income (Loss) + Interest and Debt Expense\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments,\n          \"fac:NonoperatingIncomeLossPlusInterestAndDebtExpense\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "True",
            "SourceFact" : [ "NonoperatingIncomeLoss" ],
            "BodySrc" : "NonoperatingIncomeLoss-InterestAndDebtExpense"
        }, {
            "PrereqSrc" : "not(isblank(NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments))",
            "SourceFact" : [ "NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments" ],
            "BodySrc" : "NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments -IncomeLossFromEquityMethodInvestments"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "6abca1d8-12f9-4b87-b410-9d5d9e9322a3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments" ],
        "DependsOn" : [ "fac:NonoperatingIncomeLoss", "fac:InterestAndDebtExpense", "fac:IncomeLossFromEquityMethodInvestments", "fac:IncomeLossFromContinuingOperationsBeforeTax", "fac:OperatingIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\", \"fac:NonoperatingIncomeLoss\", \"fac:InterestAndDebtExpense\", \"fac:IncomeLossFromEquityMethodInvestments\", \"fac:IncomeLossFromContinuingOperationsBeforeTax\", \"fac:OperatingIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments.\"\n                             else ())\nlet $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments as object? := $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments[1]\nlet $NonoperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NonoperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($NonoperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NonoperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NonoperatingIncomeLoss.\"\n                             else ())\nlet $NonoperatingIncomeLoss as object? := $NonoperatingIncomeLoss[1]\nlet $InterestAndDebtExpense as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:InterestAndDebtExpense\"]\nlet $warnings := ($warnings, if(count($InterestAndDebtExpense) gt 1)\n                             then if(count(distinct-values($InterestAndDebtExpense.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept InterestAndDebtExpense.\"\n                                  else \"Cell collision with consistent values for concept InterestAndDebtExpense.\"\n                             else ())\nlet $InterestAndDebtExpense as object? := $InterestAndDebtExpense[1]\nlet $IncomeLossFromEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossFromEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossFromEquityMethodInvestments as object? := $IncomeLossFromEquityMethodInvestments[1]\nlet $IncomeLossFromContinuingOperationsBeforeTax as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossFromContinuingOperationsBeforeTax\"]\nlet $warnings := ($warnings, if(count($IncomeLossFromContinuingOperationsBeforeTax) gt 1)\n                             then if(count(distinct-values($IncomeLossFromContinuingOperationsBeforeTax.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossFromContinuingOperationsBeforeTax.\"\n                             else ())\nlet $IncomeLossFromContinuingOperationsBeforeTax as object? := $IncomeLossFromContinuingOperationsBeforeTax[1]\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments) return $NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\n  case (exists($NonoperatingIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($NonoperatingIncomeLoss) - rules:decimal-value($InterestAndDebtExpense) + rules:decimal-value($IncomeLossFromEquityMethodInvestments)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NonoperatingIncomeLoss, \"NonoperatingIncomeLoss\") || \" - \" || rules:fact-trail($InterestAndDebtExpense, \"InterestAndDebtExpense\") || \" + \" || rules:fact-trail($IncomeLossFromEquityMethodInvestments, \"IncomeLossFromEquityMethodInvestments\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, $NonoperatingIncomeLoss, $InterestAndDebtExpense, $IncomeLossFromEquityMethodInvestments, $IncomeLossFromContinuingOperationsBeforeTax, $OperatingIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NonoperatingIncomeLoss,\n          \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($IncomeLossFromContinuingOperationsBeforeTax) and not((not(exists($IncomeLossFromContinuingOperationsBeforeTax)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossFromContinuingOperationsBeforeTax) - rules:decimal-value($OperatingIncomeLoss)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossFromContinuingOperationsBeforeTax, \"IncomeLossFromContinuingOperationsBeforeTax\") || \" - \" || rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments, $NonoperatingIncomeLoss, $InterestAndDebtExpense, $IncomeLossFromEquityMethodInvestments, $IncomeLossFromContinuingOperationsBeforeTax, $OperatingIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $IncomeLossFromContinuingOperationsBeforeTax,\n          \"fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "NonoperatingIncomeLoss" ],
            "BodySrc" : "NonoperatingIncomeLoss - InterestAndDebtExpense + IncomeLossFromEquityMethodInvestments"
        }, {
            "PrereqSrc" : "not(isblank(IncomeLossFromContinuingOperationsBeforeTax))",
            "SourceFact" : [ "IncomeLossFromContinuingOperationsBeforeTax" ],
            "BodySrc" : "IncomeLossFromContinuingOperationsBeforeTax-OperatingIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "fc6d4f5d-58db-41f3-8f40-fea21461be53",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:OperatingExpenses" ],
        "DependsOn" : [ "fac:CostOfRevenue", "fac:CostsAndExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OperatingExpenses\", \"fac:CostOfRevenue\", \"fac:CostsAndExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $OperatingExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $warnings := ($warnings, if(count($OperatingExpenses) gt 1)\n                             then if(count(distinct-values($OperatingExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingExpenses.\"\n                                  else \"Cell collision with consistent values for concept OperatingExpenses.\"\n                             else ())\nlet $OperatingExpenses as object? := $OperatingExpenses[1]\nlet $CostOfRevenue as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $warnings := ($warnings, if(count($CostOfRevenue) gt 1)\n                             then if(count(distinct-values($CostOfRevenue.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostOfRevenue.\"\n                                  else \"Cell collision with consistent values for concept CostOfRevenue.\"\n                             else ())\nlet $CostOfRevenue as object? := $CostOfRevenue[1]\nlet $CostsAndExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"]\nlet $warnings := ($warnings, if(count($CostsAndExpenses) gt 1)\n                             then if(count(distinct-values($CostsAndExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostsAndExpenses.\"\n                                  else \"Cell collision with consistent values for concept CostsAndExpenses.\"\n                             else ())\nlet $CostsAndExpenses as object? := $CostsAndExpenses[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OperatingExpenses) return $OperatingExpenses\n  case (exists($CostsAndExpenses) and not((not(exists($CostOfRevenue)))))\n  return\n    let $computed-value := rules:decimal-value($CostsAndExpenses) - rules:decimal-value($CostOfRevenue)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:OperatingExpenses\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($CostsAndExpenses, \"CostsAndExpenses\") || \" - \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($OperatingExpenses, $CostOfRevenue, $CostsAndExpenses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Operating Expenses\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $CostsAndExpenses,\n          \"fac:OperatingExpenses\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(CostOfRevenue))",
            "SourceFact" : [ "CostsAndExpenses" ],
            "BodySrc" : "CostsAndExpenses-CostOfRevenue"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "97cdc544-35ea-4d12-b3d4-128b4b1e593a",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:OperatingIncomeLoss" ],
        "DependsOn" : [ "fac:IncomeLossBeforeEquityMethodInvestments", "fac:NonoperatingIncomeLoss", "fac:InterestAndDebtExpense" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OperatingIncomeLoss\", \"fac:IncomeLossBeforeEquityMethodInvestments\", \"fac:NonoperatingIncomeLoss\", \"fac:InterestAndDebtExpense\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $IncomeLossBeforeEquityMethodInvestments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:IncomeLossBeforeEquityMethodInvestments\"]\nlet $warnings := ($warnings, if(count($IncomeLossBeforeEquityMethodInvestments) gt 1)\n                             then if(count(distinct-values($IncomeLossBeforeEquityMethodInvestments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                                  else \"Cell collision with consistent values for concept IncomeLossBeforeEquityMethodInvestments.\"\n                             else ())\nlet $IncomeLossBeforeEquityMethodInvestments as object? := $IncomeLossBeforeEquityMethodInvestments[1]\nlet $NonoperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NonoperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NonoperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($NonoperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NonoperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NonoperatingIncomeLoss.\"\n                             else ())\nlet $NonoperatingIncomeLoss as object? := $NonoperatingIncomeLoss[1]\nlet $InterestAndDebtExpense as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:InterestAndDebtExpense\"]\nlet $warnings := ($warnings, if(count($InterestAndDebtExpense) gt 1)\n                             then if(count(distinct-values($InterestAndDebtExpense.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept InterestAndDebtExpense.\"\n                                  else \"Cell collision with consistent values for concept InterestAndDebtExpense.\"\n                             else ())\nlet $InterestAndDebtExpense as object? := $InterestAndDebtExpense[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OperatingIncomeLoss) return $OperatingIncomeLoss\n  case (exists($IncomeLossBeforeEquityMethodInvestments) and not((not(exists($IncomeLossBeforeEquityMethodInvestments)))))\n  return\n    let $computed-value := rules:decimal-value($IncomeLossBeforeEquityMethodInvestments) + rules:decimal-value($NonoperatingIncomeLoss) - rules:decimal-value($InterestAndDebtExpense)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:OperatingIncomeLoss\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($IncomeLossBeforeEquityMethodInvestments, \"IncomeLossBeforeEquityMethodInvestments\") || \" + \" || rules:fact-trail($NonoperatingIncomeLoss, \"NonoperatingIncomeLoss\") || \" - \" || rules:fact-trail($InterestAndDebtExpense, \"InterestAndDebtExpense\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($OperatingIncomeLoss, $IncomeLossBeforeEquityMethodInvestments, $NonoperatingIncomeLoss, $InterestAndDebtExpense)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Operating Income (Loss)\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $IncomeLossBeforeEquityMethodInvestments,\n          \"fac:OperatingIncomeLoss\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(IncomeLossBeforeEquityMethodInvestments))",
            "SourceFact" : [ "IncomeLossBeforeEquityMethodInvestments" ],
            "BodySrc" : "IncomeLossBeforeEquityMethodInvestments+NonoperatingIncomeLoss-InterestAndDebtExpense"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS2",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:OperatingIncomeLossValidation" ],
        "DependsOn" : [ "fac:OperatingIncomeLoss", "fac:GrossProfit", "fac:OperatingExpenses", "fac:OtherOperatingIncomeExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OperatingIncomeLossValidation\", \"fac:OperatingIncomeLoss\", \"fac:GrossProfit\", \"fac:OperatingExpenses\", \"fac:OtherOperatingIncomeExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $OperatingIncomeLossValidation as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLossValidation\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLossValidation) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLossValidation.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLossValidation.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLossValidation.\"\n                             else ())\nlet $OperatingIncomeLossValidation as object? := $OperatingIncomeLossValidation[1]\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $GrossProfit as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $warnings := ($warnings, if(count($GrossProfit) gt 1)\n                             then if(count(distinct-values($GrossProfit.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept GrossProfit.\"\n                                  else \"Cell collision with consistent values for concept GrossProfit.\"\n                             else ())\nlet $GrossProfit as object? := $GrossProfit[1]\nlet $OperatingExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $warnings := ($warnings, if(count($OperatingExpenses) gt 1)\n                             then if(count(distinct-values($OperatingExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingExpenses.\"\n                                  else \"Cell collision with consistent values for concept OperatingExpenses.\"\n                             else ())\nlet $OperatingExpenses as object? := $OperatingExpenses[1]\nlet $OtherOperatingIncomeExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $warnings := ($warnings, if(count($OtherOperatingIncomeExpenses) gt 1)\n                             then if(count(distinct-values($OtherOperatingIncomeExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OtherOperatingIncomeExpenses.\"\n                                  else \"Cell collision with consistent values for concept OtherOperatingIncomeExpenses.\"\n                             else ())\nlet $OtherOperatingIncomeExpenses as object? := $OtherOperatingIncomeExpenses[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OperatingIncomeLossValidation) return $OperatingIncomeLossValidation\n  case (exists($OperatingIncomeLoss) and not((not(exists($OperatingIncomeLoss)))))\n  return\n    let $computed-value := rules:decimal-value($OperatingIncomeLoss) eq rules:decimal-value($GrossProfit) - rules:decimal-value($OperatingExpenses) + rules:decimal-value($OtherOperatingIncomeExpenses)\n    let $audit-trail-message as string* := \n         rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" = \" || rules:fact-trail($GrossProfit, \"GrossProfit\") || \" - \" || rules:fact-trail($OperatingExpenses, \"OperatingExpenses\") || \" + \" || rules:fact-trail($OtherOperatingIncomeExpenses, \"OtherOperatingIncomeExpenses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($OperatingIncomeLossValidation, $OperatingIncomeLoss, $GrossProfit, $OperatingExpenses, $OtherOperatingIncomeExpenses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS2] OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $OperatingIncomeLoss,\n          \"fac:OperatingIncomeLossValidation\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $OperatingIncomeLoss,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:OperatingIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(OperatingIncomeLoss))",
            "SourceFact" : [ "OperatingIncomeLoss" ],
            "BodySrc" : "OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "IS11",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:validation",
        "ComputableConcepts" : [ "fac:OperatingIncomeLossValidation2" ],
        "DependsOn" : [ "fac:OperatingIncomeLoss", "fac:Revenues", "fac:CostsAndExpenses", "fac:OtherOperatingIncomeExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OperatingIncomeLossValidation2\", \"fac:OperatingIncomeLoss\", \"fac:Revenues\", \"fac:CostsAndExpenses\", \"fac:OtherOperatingIncomeExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $OperatingIncomeLossValidation2 as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLossValidation2\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLossValidation2) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLossValidation2.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLossValidation2.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLossValidation2.\"\n                             else ())\nlet $OperatingIncomeLossValidation2 as object? := $OperatingIncomeLossValidation2[1]\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\n                             then if(count(distinct-values($Revenues.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Revenues.\"\n                                  else \"Cell collision with consistent values for concept Revenues.\"\n                             else ())\nlet $Revenues as object? := $Revenues[1]\nlet $CostsAndExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostsAndExpenses\"]\nlet $warnings := ($warnings, if(count($CostsAndExpenses) gt 1)\n                             then if(count(distinct-values($CostsAndExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostsAndExpenses.\"\n                                  else \"Cell collision with consistent values for concept CostsAndExpenses.\"\n                             else ())\nlet $CostsAndExpenses as object? := $CostsAndExpenses[1]\nlet $OtherOperatingIncomeExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $warnings := ($warnings, if(count($OtherOperatingIncomeExpenses) gt 1)\n                             then if(count(distinct-values($OtherOperatingIncomeExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OtherOperatingIncomeExpenses.\"\n                                  else \"Cell collision with consistent values for concept OtherOperatingIncomeExpenses.\"\n                             else ())\nlet $OtherOperatingIncomeExpenses as object? := $OtherOperatingIncomeExpenses[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OperatingIncomeLossValidation2) return $OperatingIncomeLossValidation2\n  case (exists($OperatingIncomeLoss) and true)\n  return\n    let $computed-value := rules:decimal-value($OperatingIncomeLoss) eq rules:decimal-value($Revenues) - rules:decimal-value($CostsAndExpenses) + rules:decimal-value($OtherOperatingIncomeExpenses)\n    let $audit-trail-message as string* := \n         rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" = \" || rules:fact-trail($Revenues, \"Revenues\") || \" - \" || rules:fact-trail($CostsAndExpenses, \"CostsAndExpenses\") || \" + \" || rules:fact-trail($OtherOperatingIncomeExpenses, \"OtherOperatingIncomeExpenses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($OperatingIncomeLossValidation2, $OperatingIncomeLoss, $Revenues, $CostsAndExpenses, $OtherOperatingIncomeExpenses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"[IS11] OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $OperatingIncomeLoss,\n          \"fac:OperatingIncomeLossValidation2\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options,\n            $OperatingIncomeLoss,\n            $computed-value)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:booleanItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:booleanItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "ValidatedConcepts" : [ "fac:OperatingIncomeLoss" ],
        "Formulae" : [ {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "OperatingIncomeLoss" ],
            "BodySrc" : "OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "cd07373d-1c26-4278-86e9-9b4715dff5ea",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:OtherComprehensiveIncomeLoss" ],
        "DependsOn" : [ "fac:ComprehensiveIncomeLoss", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OtherComprehensiveIncomeLoss\", \"fac:ComprehensiveIncomeLoss\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $OtherComprehensiveIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherComprehensiveIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OtherComprehensiveIncomeLoss) gt 1)\n                             then if(count(distinct-values($OtherComprehensiveIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OtherComprehensiveIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OtherComprehensiveIncomeLoss.\"\n                             else ())\nlet $OtherComprehensiveIncomeLoss as object? := $OtherComprehensiveIncomeLoss[1]\nlet $ComprehensiveIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ComprehensiveIncomeLoss\"]\nlet $warnings := ($warnings, if(count($ComprehensiveIncomeLoss) gt 1)\n                             then if(count(distinct-values($ComprehensiveIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ComprehensiveIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept ComprehensiveIncomeLoss.\"\n                             else ())\nlet $ComprehensiveIncomeLoss as object? := $ComprehensiveIncomeLoss[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OtherComprehensiveIncomeLoss) return $OtherComprehensiveIncomeLoss\n  case (exists($ComprehensiveIncomeLoss) and not((not(exists($ComprehensiveIncomeLoss)))))\n  return\n    let $computed-value := rules:decimal-value($ComprehensiveIncomeLoss) - rules:decimal-value($NetIncomeLoss)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:OtherComprehensiveIncomeLoss\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($ComprehensiveIncomeLoss, \"ComprehensiveIncomeLoss\") || \" - \" || rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($OtherComprehensiveIncomeLoss, $ComprehensiveIncomeLoss, $NetIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Other Comprehensive Income (Loss)\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $ComprehensiveIncomeLoss,\n          \"fac:OtherComprehensiveIncomeLoss\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(ComprehensiveIncomeLoss))",
            "SourceFact" : [ "ComprehensiveIncomeLoss" ],
            "BodySrc" : "ComprehensiveIncomeLoss-NetIncomeLoss"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "bf2d1587-491c-4492-b587-ddd00d762f2d",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:OtherOperatingIncomeExpenses" ],
        "DependsOn" : [ "fac:OperatingIncomeLoss", "fac:GrossProfit", "fac:OperatingExpenses" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:OtherOperatingIncomeExpenses\", \"fac:OperatingIncomeLoss\", \"fac:GrossProfit\", \"fac:OperatingExpenses\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $OtherOperatingIncomeExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OtherOperatingIncomeExpenses\"]\nlet $warnings := ($warnings, if(count($OtherOperatingIncomeExpenses) gt 1)\n                             then if(count(distinct-values($OtherOperatingIncomeExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OtherOperatingIncomeExpenses.\"\n                                  else \"Cell collision with consistent values for concept OtherOperatingIncomeExpenses.\"\n                             else ())\nlet $OtherOperatingIncomeExpenses as object? := $OtherOperatingIncomeExpenses[1]\nlet $OperatingIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingIncomeLoss\"]\nlet $warnings := ($warnings, if(count($OperatingIncomeLoss) gt 1)\n                             then if(count(distinct-values($OperatingIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept OperatingIncomeLoss.\"\n                             else ())\nlet $OperatingIncomeLoss as object? := $OperatingIncomeLoss[1]\nlet $GrossProfit as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $warnings := ($warnings, if(count($GrossProfit) gt 1)\n                             then if(count(distinct-values($GrossProfit.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept GrossProfit.\"\n                                  else \"Cell collision with consistent values for concept GrossProfit.\"\n                             else ())\nlet $GrossProfit as object? := $GrossProfit[1]\nlet $OperatingExpenses as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:OperatingExpenses\"]\nlet $warnings := ($warnings, if(count($OperatingExpenses) gt 1)\n                             then if(count(distinct-values($OperatingExpenses.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept OperatingExpenses.\"\n                                  else \"Cell collision with consistent values for concept OperatingExpenses.\"\n                             else ())\nlet $OperatingExpenses as object? := $OperatingExpenses[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($OtherOperatingIncomeExpenses) return $OtherOperatingIncomeExpenses\n  case (exists($OperatingIncomeLoss) and (not((not(exists($OperatingIncomeLoss)))) and not((not(exists($GrossProfit)))) and not((not(exists($OperatingExpenses))))))\n  return\n    let $computed-value := rules:decimal-value($OperatingIncomeLoss) - rules:decimal-value($GrossProfit) - rules:decimal-value($OperatingExpenses)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:OtherOperatingIncomeExpenses\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($OperatingIncomeLoss, \"OperatingIncomeLoss\") || \" - \" || rules:fact-trail($GrossProfit, \"GrossProfit\") || \" - \" || rules:fact-trail($OperatingExpenses, \"OperatingExpenses\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($OtherOperatingIncomeExpenses, $OperatingIncomeLoss, $GrossProfit, $OperatingExpenses)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Other Operating Income (Expenses)\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $OperatingIncomeLoss,\n          \"fac:OtherOperatingIncomeExpenses\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(OperatingIncomeLoss)), not(isblank(GrossProfit)), not(isblank(OperatingExpenses)))",
            "SourceFact" : [ "OperatingIncomeLoss" ],
            "BodySrc" : "OperatingIncomeLoss-GrossProfit-OperatingExpenses"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "4b138859-c05a-4715-86d2-5e75cc0ec110",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:PreferredStockDividendsAndOtherAdjustments" ],
        "DependsOn" : [ "fac:NetIncomeLossAttributableToParent", "fac:NetIncomeLossAvailableToCommonStockholdersBasic" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:PreferredStockDividendsAndOtherAdjustments\", \"fac:NetIncomeLossAttributableToParent\", \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $PreferredStockDividendsAndOtherAdjustments as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:PreferredStockDividendsAndOtherAdjustments\"]\nlet $warnings := ($warnings, if(count($PreferredStockDividendsAndOtherAdjustments) gt 1)\n                             then if(count(distinct-values($PreferredStockDividendsAndOtherAdjustments.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept PreferredStockDividendsAndOtherAdjustments.\"\n                                  else \"Cell collision with consistent values for concept PreferredStockDividendsAndOtherAdjustments.\"\n                             else ())\nlet $PreferredStockDividendsAndOtherAdjustments as object? := $PreferredStockDividendsAndOtherAdjustments[1]\nlet $NetIncomeLossAttributableToParent as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAttributableToParent\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAttributableToParent) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAttributableToParent.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAttributableToParent.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAttributableToParent.\"\n                             else ())\nlet $NetIncomeLossAttributableToParent as object? := $NetIncomeLossAttributableToParent[1]\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLossAvailableToCommonStockholdersBasic\"]\nlet $warnings := ($warnings, if(count($NetIncomeLossAvailableToCommonStockholdersBasic) gt 1)\n                             then if(count(distinct-values($NetIncomeLossAvailableToCommonStockholdersBasic.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLossAvailableToCommonStockholdersBasic.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLossAvailableToCommonStockholdersBasic.\"\n                             else ())\nlet $NetIncomeLossAvailableToCommonStockholdersBasic as object? := $NetIncomeLossAvailableToCommonStockholdersBasic[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($PreferredStockDividendsAndOtherAdjustments) return $PreferredStockDividendsAndOtherAdjustments\n  case (exists($NetIncomeLossAttributableToParent) and (not((not(exists($NetIncomeLossAttributableToParent)))) and not((not(exists($NetIncomeLossAvailableToCommonStockholdersBasic))))))\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLossAttributableToParent) - rules:decimal-value($NetIncomeLossAvailableToCommonStockholdersBasic)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:PreferredStockDividendsAndOtherAdjustments\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLossAttributableToParent, \"NetIncomeLossAttributableToParent\") || \" - \" || rules:fact-trail($NetIncomeLossAvailableToCommonStockholdersBasic, \"NetIncomeLossAvailableToCommonStockholdersBasic\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($PreferredStockDividendsAndOtherAdjustments, $NetIncomeLossAttributableToParent, $NetIncomeLossAvailableToCommonStockholdersBasic)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Preferred Stock Dividends and Other Adjustments\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLossAttributableToParent,\n          \"fac:PreferredStockDividendsAndOtherAdjustments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  case (exists($NetIncomeLossAttributableToParent) and true)\n  return\n    let $computed-value := 0\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:PreferredStockDividendsAndOtherAdjustments\" }, Value: $computed-value }) || \" = \" || \n         \"0\"\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($PreferredStockDividendsAndOtherAdjustments, $NetIncomeLossAttributableToParent, $NetIncomeLossAvailableToCommonStockholdersBasic)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Preferred Stock Dividends and Other Adjustments\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLossAttributableToParent,\n          \"fac:PreferredStockDividendsAndOtherAdjustments\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(not(isblank(NetIncomeLossAttributableToParent)), not(isblank(NetIncomeLossAvailableToCommonStockholdersBasic)))",
            "SourceFact" : [ "NetIncomeLossAttributableToParent" ],
            "BodySrc" : "NetIncomeLossAttributableToParent-NetIncomeLossAvailableToCommonStockholdersBasic"
        }, {
            "PrereqSrc" : "TRUE",
            "SourceFact" : [ "fac:NetIncomeLossAttributableToParent" ],
            "BodySrc" : "0"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "78e824dc-4b68-4a1b-9aa3-ec51d0f55335",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Decimals" : 3,
        "ComputableConcepts" : [ "fac:ReturnOnAssets" ],
        "DependsOn" : [ "fac:Assets", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ReturnOnAssets\", \"fac:Assets\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $ReturnOnAssets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ReturnOnAssets\"]\nlet $warnings := ($warnings, if(count($ReturnOnAssets) gt 1)\n                             then if(count(distinct-values($ReturnOnAssets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ReturnOnAssets.\"\n                                  else \"Cell collision with consistent values for concept ReturnOnAssets.\"\n                             else ())\nlet $ReturnOnAssets as object? := $ReturnOnAssets[1]\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $warnings := ($warnings, if(count($Assets) gt 1)\n                             then if(count(distinct-values($Assets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Assets.\"\n                                  else \"Cell collision with consistent values for concept Assets.\"\n                             else ())\nlet $Assets as object? := $Assets[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ReturnOnAssets) return $ReturnOnAssets\n  case (exists($NetIncomeLoss) and rules:decimal-value($Assets) ne 0)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Assets)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ReturnOnAssets\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Assets, \"Assets\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($ReturnOnAssets, $Assets, $NetIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Return on Assets (ROA)\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:ReturnOnAssets\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,if(exists($newFact(\"Decimals\"))) then replace value of json $newFact(\"Decimals\") with 3\n                                             else insert json { \"Decimals\": 3 } into $newFact\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:pureItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:pureItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "Assets<>0",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss/Assets"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "fe735813-326b-4f09-a38e-8f80c80e816b",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Decimals" : 3,
        "ComputableConcepts" : [ "fac:ReturnOnEquity" ],
        "DependsOn" : [ "fac:Equity", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ReturnOnEquity\", \"fac:Equity\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $ReturnOnEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ReturnOnEquity\"]\nlet $warnings := ($warnings, if(count($ReturnOnEquity) gt 1)\n                             then if(count(distinct-values($ReturnOnEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ReturnOnEquity.\"\n                                  else \"Cell collision with consistent values for concept ReturnOnEquity.\"\n                             else ())\nlet $ReturnOnEquity as object? := $ReturnOnEquity[1]\nlet $Equity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $warnings := ($warnings, if(count($Equity) gt 1)\n                             then if(count(distinct-values($Equity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Equity.\"\n                                  else \"Cell collision with consistent values for concept Equity.\"\n                             else ())\nlet $Equity as object? := $Equity[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ReturnOnEquity) return $ReturnOnEquity\n  case (exists($NetIncomeLoss) and rules:decimal-value($Equity) ne 0)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Equity)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ReturnOnEquity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Equity, \"Equity\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($ReturnOnEquity, $Equity, $NetIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Return on Equity (ROE)\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:ReturnOnEquity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,if(exists($newFact(\"Decimals\"))) then replace value of json $newFact(\"Decimals\") with 3\n                                             else insert json { \"Decimals\": 3 } into $newFact\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:pureItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:pureItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "Equity<>0",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "NetIncomeLoss/Equity"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "de1806dc-ff91-47a9-a10b-fb631b268ae3",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Decimals" : 3,
        "ComputableConcepts" : [ "fac:ReturnOnSales" ],
        "DependsOn" : [ "fac:Revenues", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:ReturnOnSales\", \"fac:Revenues\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $ReturnOnSales as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:ReturnOnSales\"]\nlet $warnings := ($warnings, if(count($ReturnOnSales) gt 1)\n                             then if(count(distinct-values($ReturnOnSales.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept ReturnOnSales.\"\n                                  else \"Cell collision with consistent values for concept ReturnOnSales.\"\n                             else ())\nlet $ReturnOnSales as object? := $ReturnOnSales[1]\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\n                             then if(count(distinct-values($Revenues.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Revenues.\"\n                                  else \"Cell collision with consistent values for concept Revenues.\"\n                             else ())\nlet $Revenues as object? := $Revenues[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($ReturnOnSales) return $ReturnOnSales\n  case (exists($Revenues) and rules:decimal-value($Revenues) ne 0)\n  return\n    let $computed-value := rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Revenues)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:ReturnOnSales\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Revenues, \"Revenues\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($ReturnOnSales, $Revenues, $NetIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Return on Sales (ROS)\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $Revenues,\n          \"fac:ReturnOnSales\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,if(exists($newFact(\"Decimals\"))) then replace value of json $newFact(\"Decimals\") with 3\n                                             else insert json { \"Decimals\": 3 } into $newFact\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:pureItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:pureItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "Revenues<>0",
            "SourceFact" : [ "Revenues" ],
            "BodySrc" : "NetIncomeLoss/Revenues"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "fd810901-ee86-46ad-8c55-ec933c27169a",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:Revenues" ],
        "DependsOn" : [ "fac:CostOfRevenue", "fac:GrossProfit" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:Revenues\", \"fac:CostOfRevenue\", \"fac:GrossProfit\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\n                             then if(count(distinct-values($Revenues.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Revenues.\"\n                                  else \"Cell collision with consistent values for concept Revenues.\"\n                             else ())\nlet $Revenues as object? := $Revenues[1]\nlet $CostOfRevenue as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:CostOfRevenue\"]\nlet $warnings := ($warnings, if(count($CostOfRevenue) gt 1)\n                             then if(count(distinct-values($CostOfRevenue.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept CostOfRevenue.\"\n                                  else \"Cell collision with consistent values for concept CostOfRevenue.\"\n                             else ())\nlet $CostOfRevenue as object? := $CostOfRevenue[1]\nlet $GrossProfit as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:GrossProfit\"]\nlet $warnings := ($warnings, if(count($GrossProfit) gt 1)\n                             then if(count(distinct-values($GrossProfit.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept GrossProfit.\"\n                                  else \"Cell collision with consistent values for concept GrossProfit.\"\n                             else ())\nlet $GrossProfit as object? := $GrossProfit[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($Revenues) return $Revenues\n  case (exists($GrossProfit) and not((not(exists($CostOfRevenue)))))\n  return\n    let $computed-value := rules:decimal-value($GrossProfit) + rules:decimal-value($CostOfRevenue)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:Revenues\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($GrossProfit, \"GrossProfit\") || \" + \" || rules:fact-trail($CostOfRevenue, \"CostOfRevenue\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($Revenues, $CostOfRevenue, $GrossProfit)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Revenues\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $GrossProfit,\n          \"fac:Revenues\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(CostOfRevenue))",
            "SourceFact" : [ "GrossProfit" ],
            "BodySrc" : "GrossProfit+CostOfRevenue"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [ "fac:OtherOperatingIncomeExpenses" ]
    }, {
        "Id" : "9f8da807-3830-485d-8f97-6f77c9b1ab05",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "Decimals" : 3,
        "ComputableConcepts" : [ "fac:SustainableGrowthRate" ],
        "DependsOn" : [ "fac:Equity", "fac:Assets", "fac:Revenues", "fac:NetIncomeLoss" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:SustainableGrowthRate\", \"fac:Equity\", \"fac:Assets\", \"fac:Revenues\", \"fac:NetIncomeLoss\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $SustainableGrowthRate as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:SustainableGrowthRate\"]\nlet $warnings := ($warnings, if(count($SustainableGrowthRate) gt 1)\n                             then if(count(distinct-values($SustainableGrowthRate.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept SustainableGrowthRate.\"\n                                  else \"Cell collision with consistent values for concept SustainableGrowthRate.\"\n                             else ())\nlet $SustainableGrowthRate as object? := $SustainableGrowthRate[1]\nlet $Equity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Equity\"]\nlet $warnings := ($warnings, if(count($Equity) gt 1)\n                             then if(count(distinct-values($Equity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Equity.\"\n                                  else \"Cell collision with consistent values for concept Equity.\"\n                             else ())\nlet $Equity as object? := $Equity[1]\nlet $Assets as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Assets\"]\nlet $warnings := ($warnings, if(count($Assets) gt 1)\n                             then if(count(distinct-values($Assets.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Assets.\"\n                                  else \"Cell collision with consistent values for concept Assets.\"\n                             else ())\nlet $Assets as object? := $Assets[1]\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\n                             then if(count(distinct-values($Revenues.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept Revenues.\"\n                                  else \"Cell collision with consistent values for concept Revenues.\"\n                             else ())\nlet $Revenues as object? := $Revenues[1]\nlet $NetIncomeLoss as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:NetIncomeLoss\"]\nlet $warnings := ($warnings, if(count($NetIncomeLoss) gt 1)\n                             then if(count(distinct-values($NetIncomeLoss.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept NetIncomeLoss.\"\n                                  else \"Cell collision with consistent values for concept NetIncomeLoss.\"\n                             else ())\nlet $NetIncomeLoss as object? := $NetIncomeLoss[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($SustainableGrowthRate) return $SustainableGrowthRate\n  case (exists($NetIncomeLoss) and (rules:decimal-value($Equity) ne 0 and rules:decimal-value($Assets) ne 0 and rules:decimal-value($Revenues) ne 0 and rules:decimal-value($NetIncomeLoss) ne 0))\n  return\n    let $computed-value := ((rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Revenues)) * (1 + (rules:decimal-value($Assets) - rules:decimal-value($Equity)) div rules:decimal-value($Equity))) div ((1 div (rules:decimal-value($Revenues) div rules:decimal-value($Assets))) - ((rules:decimal-value($NetIncomeLoss) div rules:decimal-value($Revenues)) * (1 + (rules:decimal-value($Assets) - rules:decimal-value($Equity)) div rules:decimal-value($Equity))))\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:SustainableGrowthRate\" }, Value: $computed-value }) || \" = \" || \n         \" ( \" || \" ( \" || rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Revenues, \"Revenues\") || \" )\" || \" * \" || \" ( \" || \"1\" || \" + \" || \" ( \" || rules:fact-trail($Assets, \"Assets\") || \" - \" || rules:fact-trail($Equity, \"Equity\") || \" )\" || \" div \" || rules:fact-trail($Equity, \"Equity\") || \" )\" || \" )\" || \" div \" || \" ( \" || \" ( \" || \"1\" || \" div \" || \" ( \" || rules:fact-trail($Revenues, \"Revenues\") || \" div \" || rules:fact-trail($Assets, \"Assets\") || \" )\" || \" )\" || \" - \" || \" ( \" || \" ( \" || rules:fact-trail($NetIncomeLoss, \"NetIncomeLoss\") || \" div \" || rules:fact-trail($Revenues, \"Revenues\") || \" )\" || \" * \" || \" ( \" || \"1\" || \" + \" || \" ( \" || rules:fact-trail($Assets, \"Assets\") || \" - \" || rules:fact-trail($Equity, \"Equity\") || \" )\" || \" div \" || rules:fact-trail($Equity, \"Equity\") || \" )\" || \" )\" || \" )\"\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($SustainableGrowthRate, $Equity, $Assets, $Revenues, $NetIncomeLoss)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Sustainable Growth Rate (SGR)\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $NetIncomeLoss,\n          \"fac:SustainableGrowthRate\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,if(exists($newFact(\"Decimals\"))) then replace value of json $newFact(\"Decimals\") with 3\n                                             else insert json { \"Decimals\": 3 } into $newFact\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:pureItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:pureItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"duration\"\n                                                         else insert json { \"PeriodType\": \"duration\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "and(Equity <> 0, Assets <>0, Revenues <>0, NetIncomeLoss <> 0)",
            "SourceFact" : [ "NetIncomeLoss" ],
            "BodySrc" : "(( NetIncomeLoss / Revenues ) * (1 + ( Assets - Equity ) / Equity ))\n  / (( 1 / ( Revenues / Assets )) - (( NetIncomeLoss / Revenues ) * (1 + ( Assets - Equity ) /Equity )))"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "c96061a8-4f97-4973-99e3-4050f69bfd84",
        "OriginalLanguage" : "SpreadsheetFormula",
        "Type" : "xbrl28:formula",
        "ComputableConcepts" : [ "fac:TemporaryEquity" ],
        "DependsOn" : [ "fac:RedeemableNoncontrollingInterest", "fac:TemporaryEquity" ],
        "Formula" : "\nfor $facts in facts:facts-for-internal((\n      \"fac:TemporaryEquity\", \"fac:RedeemableNoncontrollingInterest\"\n    ), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\ngroup by $canonical-filter-string :=\n  facts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\n  , $aligned-period\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\nlet $warnings as string* := ()\nlet $TemporaryEquity as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:TemporaryEquity\"]\nlet $warnings := ($warnings, if(count($TemporaryEquity) gt 1)\n                             then if(count(distinct-values($TemporaryEquity.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept TemporaryEquity.\"\n                                  else \"Cell collision with consistent values for concept TemporaryEquity.\"\n                             else ())\nlet $TemporaryEquity as object? := $TemporaryEquity[1]\nlet $RedeemableNoncontrollingInterest as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:RedeemableNoncontrollingInterest\"]\nlet $warnings := ($warnings, if(count($RedeemableNoncontrollingInterest) gt 1)\n                             then if(count(distinct-values($RedeemableNoncontrollingInterest.Value)) gt 1)\n                                  then \"Cell collision with conflicting values for concept RedeemableNoncontrollingInterest.\"\n                                  else \"Cell collision with consistent values for concept RedeemableNoncontrollingInterest.\"\n                             else ())\nlet $RedeemableNoncontrollingInterest as object? := $RedeemableNoncontrollingInterest[1]\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\nreturn\n  switch (true)\n  case exists($TemporaryEquity) return $TemporaryEquity\n  case (exists($RedeemableNoncontrollingInterest) and not((not(exists($RedeemableNoncontrollingInterest)))))\n  return\n    let $computed-value := rules:decimal-value($TemporaryEquity) + rules:decimal-value($RedeemableNoncontrollingInterest)\n    let $audit-trail-message as string* := \n      rules:fact-trail({\"Aspects\": { \"xbrl:Unit\" : $_unit, \"xbrl:Concept\" : \"fac:TemporaryEquity\" }, Value: $computed-value }) || \" = \" || \n         rules:fact-trail($TemporaryEquity, \"TemporaryEquity\") || \" + \" || rules:fact-trail($RedeemableNoncontrollingInterest, \"RedeemableNoncontrollingInterest\")\n    let $audit-trail-message as string* := ($audit-trail-message, $warnings)\n    let $source-facts as object* := ($TemporaryEquity, $RedeemableNoncontrollingInterest)\n    let $rule as object :=\n        copy $newRule := $rule\n        modify (\n            if(exists($newRule(\"Label\"))) then ()\n                                          else insert json { \"Label\": \"Temporary Equity\" } into $newRule\n          )\n        return $newRule\n    let $fact as object :=\n        rules:create-computed-fact(\n          $RedeemableNoncontrollingInterest,\n          \"fac:TemporaryEquity\",\n          $computed-value,\n          $rule,\n          $audit-trail-message,\n          $source-facts,\n            $options)\n    return\n        copy $newFact := $fact\n        modify (\n            if(exists($newFact(\"Aspects\")(\"xbrl:Unit\"))) then replace value of json $newFact(\"Aspects\")(\"xbrl:Unit\") with $_unit\n                                                         else insert json { \"xbrl:Unit\": $_unit } into $newFact(\"Aspects\")\n            ,\n              if(exists($newFact(\"Concept\")(\"DataType\"))) then replace value of json $newFact(\"Concept\")(\"DataType\") with \"xbrli:monetaryItemType\"\n                                                         else insert json { \"DataType\": \"xbrli:monetaryItemType\" } into $newFact(\"Concept\")\n            ,\n              if(exists($newFact(\"Concept\")(\"PeriodType\"))) then replace value of json $newFact(\"Concept\")(\"PeriodType\") with \"instant\"\n                                                         else insert json { \"PeriodType\": \"instant\" } into $newFact(\"Concept\")\n          )\n        return $newFact\n  default return ()",
        "Formulae" : [ {
            "PrereqSrc" : "not(isblank(RedeemableNoncontrollingInterest))",
            "SourceFact" : [ "RedeemableNoncontrollingInterest" ],
            "BodySrc" : "TemporaryEquity+RedeemableNoncontrollingInterest"
        } ],
        "AllowCrossPeriod" : true,
        "AllowCrossBalance" : true,
        "HideRulesForConcepts" : [  ]
    }, {
        "Id" : "gi_TradingSymbol",
        "Type" : "xbrl28:formula",
        "Label" : "TradingSymbol imputation",
        "Formula" : "import module namespace entities = \"http://xbrl.io/modules/bizql/entities\";\r\n\r\nfor $facts in facts:facts-for-internal((\r\n\"fac:TradingSymbol\", \"fac:BalanceSheetDate\", \"fac:Revenues\"\r\n), $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\r\nlet $duration-period as object? := facts:duration-for-fact($facts, {Typed: false })\r\nlet $instant-period as string?  := facts:instant-for-fact($facts, {Typed: false })\r\nlet $aligned-period as string  := ( $duration-period.End, $instant-period, \"forever\")[1]\r\ngroup by $canonical-filter-string :=\r\nfacts:canonical-grouping-key($facts, ($facts:CONCEPT, $facts:UNIT, $facts:PERIOD))\r\n, $aligned-period\r\nfor $duration-string as string? allowing empty in distinct-values($facts[$$.Concept.PeriodType eq \"duration\"].$facts:ASPECTS.$facts:PERIOD)\r\nlet $facts := $facts[$$.$facts:ASPECTS.$facts:PERIOD = ($duration-string, $aligned-period)]\r\nlet $warnings as string* := ()\r\n\r\nlet $TradingSymbol as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:TradingSymbol\"]\r\nlet $warnings := ($warnings, if(count($TradingSymbol) gt 1)\r\nthen if(count(distinct-values($TradingSymbol.Value)) gt 1)\r\nthen \"Cell collision with conflicting values for concept TradingSymbol.\"\r\nelse \"Cell collision with consistent values for concept TradingSymbol.\"\r\nelse ())\r\nlet $TradingSymbol as object? := $TradingSymbol[1]\r\n\r\nlet $BalanceSheetDate as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:BalanceSheetDate\"]\r\nlet $warnings := ($warnings, if(count($BalanceSheetDate) gt 1)\r\nthen if(count(distinct-values($BalanceSheetDate.Value)) gt 1)\r\nthen \"Cell collision with conflicting values for concept BalanceSheetDate.\"\r\nelse \"Cell collision with consistent values for concept BalanceSheetDate.\"\r\nelse ())\r\nlet $BalanceSheetDate as object? := $BalanceSheetDate[1]\r\n\r\nlet $Revenues as object* := $facts[$$.$facts:ASPECTS.$facts:CONCEPT eq \"fac:Revenues\"]\r\nlet $warnings := ($warnings, if(count($Revenues) gt 1)\r\nthen if(count(distinct-values($Revenues.Value)) gt 1)\r\nthen \"Cell collision with conflicting values for concept Revenues.\"\r\nelse \"Cell collision with consistent values for concept Revenues.\"\r\nelse ())\r\nlet $Revenues as object? := $Revenues[1]\r\n\r\nlet $_unit := ($facts.$facts:ASPECTS.$facts:UNIT)[1]\r\nreturn\r\nswitch (true)\r\ncase (exists($TradingSymbol)) return $TradingSymbol\r\ncase (exists(($BalanceSheetDate, $Revenues))) return\r\nlet $entityID as string? := (($BalanceSheetDate, $Revenues).Aspects.\"xbrl:Entity\")[1]\r\nlet $entity as object? := entities:entities($entityID)\r\nlet $computed-value := $entity.Profiles.SEC.Tickers[[1]]\r\nlet $audit-trail-message := \"fac:TradingSymbol['\" || $computed-value || \"'] = entity(\" || $entityID || \").Profiles.SEC.Tickers\"\r\nlet $audit-trail-message as string* := ($audit-trail-message, $warnings)\r\nlet $source-facts as object* := ($BalanceSheetDate, $Revenues, $entity)\r\nreturn\r\ncopy $newfact :=\r\nrules:create-computed-fact( ($BalanceSheetDate, $Revenues)[1],\r\n\"fac:TradingSymbol\",\r\nif (exists($computed-value)) then $computed-value else \"N/A\",\r\n$rule,\r\n$audit-trail-message,\r\n$source-facts,\r\n$options)\r\nmodify ( replace value of json $newfact(\"Type\") with \"NonNumericValue\" )\r\nreturn $newfact\r\ndefault return {}",
        "ComputableConcepts" : [ "fac:TradingSymbol" ],
        "DependsOn" : [ "fac:TradingSymbol", "fac:BalanceSheetDate", "fac:Revenues" ]
    }, {
        "Id" : "oag_ProvedReserves",
        "Type" : "xbrl28:formula",
        "Label" : "Proved reserves calculation",
        "Formula" : "declare function local:mapToMember($concept) { switch(true) case ($concept = \"oag:ReservesProvedNaturalGas\") return \"us-gaap:NaturalGasReservesMember\" case ($concept = \"oag:ReservesProvedNaturalGasLiquids\") return \"apa:NaturalGasLiquidsMember\" case ($concept = \"oag:ReservesProvedOilAndCondensateReserves\") return \"apa:CrudeOilAndCondensateMember\" case ($concept = \"oag:ReservesProvedTotal\") return \"us-gaap:TypeOfReserveDomain\" default return () }; let $target-concept := \"us-gaap:ProvedDevelopedReservesVolume\" let $concepts := flatten($aligned-filter.$facts:ASPECTS.$facts:CONCEPT)[$$ = (\"oag:ReservesProvedNaturalGas\", \"oag:ReservesProvedOilAndCondensateReserves\", \"oag:ReservesProvedNaturalGasLiquids\", \"oag:ReservesProvedTotal\")] for $concept in $concepts let $filter-mod := if($concept ne \"oag:ReservesProvedTotal\") then local:mapToMember($concept) else () let $hypercube-mod := { \"Name\" : \"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\", \"Default\" : \"us-gaap:TypeOfReserveDomain\" } let $aligned-filter := copy $f := $aligned-filter modify ( if(exists($filter-mod)) then if(exists($f.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\")) then replace value of json $f.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" with $filter-mod else insert json { \"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\": [ $filter-mod ] } into $f.Aspects else (), replace value of json $f.Aspects.$facts:CONCEPT with [ $target-concept ] ) return $f let $hypercube := copy $h := $hypercube modify ( if(exists($h.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\")) then replace value of json $h.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" with $hypercube-mod else insert json {\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" : $hypercube-mod } into $h.Aspects ) return $h return for $facts in facts:facts-for-internal( $target-concept, $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) group by $canonical-filter-string := facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\")) return let $member := local:mapToMember($concept) for $provedReserve in $facts[$$.$facts:ASPECTS.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" eq $member] return let $source-fact := $provedReserve let $value := rules:decimal-value($provedReserve) let $original-concept := $provedReserve.$facts:ASPECTS.$facts:CONCEPT let $audit-trail-message := \"concept to member mapping: '\" || $concept || \"' -> '\" || $original-concept || \"(us-gaap:ReserveQuantitiesByTypeOfReserveAxis::\" || $member || \")'\" return copy $f := rules:create-computed-fact( $source-fact, $concept, $value, $rule, $audit-trail-message, $source-fact, $options) modify if(exists($f.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\")) then delete json $f.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" else () return $f",
        "ComputableConcepts" : [ "oag:ReservesProvedNaturalGas", "oag:ReservesProvedOilAndCondensateReserves", "oag:ReservesProvedNaturalGasLiquids", "oag:ReservesProvedTotal" ]
    }, {
        "Id" : "oag_SalesVolumes",
        "Type" : "xbrl28:formula",
        "Label" : "Sales Volumes calculation",
        "Formula" : "declare function local:mapToMember($concept) { switch(true) case ($concept = (\"oag:SalesVolumesNaturalGas\", \"oag:SalesVolumesDailyNaturalGas\")) return \"us-gaap:NaturalGasReservesMember\" case ($concept = (\"oag:SalesVolumesNaturalGasLiquids\", \"oag:SalesVolumesDailyNaturalGasLiquids\")) return \"apa:NaturalGasLiquidsMember\" case ($concept = (\"oag:SalesVolumesOilAndCondensate\", \"oag:SalesVolumesDailyOilAndCondensate\")) return \"apa:CrudeOilAndCondensateMember\" case ($concept = (\"oag:SalesVolumesTotal\", \"oag:SalesVolumesDailyTotal\")) return \"us-gaap:TypeOfReserveDomain\" default return () }; declare function local:valueAdjusted($concept, $fact) { let $unit := $fact.Aspects.\"xbrl:Unit\" return switch(true) case ($concept eq \"oag:SalesVolumesNaturalGas\" and contains($unit, \":MMcf\")) return rules:decimal-value($fact) div 1000 case ($concept eq \"oag:SalesVolumesDailyNaturalGas\") return rules:decimal-value($fact) div 365 case ($concept = (\"oag:SalesVolumesNaturalGasLiquids\", \"oag:SalesVolumesOilAndCondensate\", \"oag:SalesVolumesTotal\") and contains($unit, \":MBbls\")) return rules:decimal-value($fact) div 1000 case ($concept = (\"oag:SalesVolumesDailyNaturalGasLiquids\", \"oag:SalesVolumesDailyOilAndCondensate\", \"oag:SalesVolumesDailyTotal\")) return rules:decimal-value($fact) div 365 default return rules:decimal-value($fact) }; declare function local:unitsAdjusted($concept, $fact) { let $unit := $fact.Aspects.\"xbrl:Unit\" return switch(true) case ($concept eq \"oag:SalesVolumesNaturalGas\" and contains($unit, \":MMcf\")) return \"utr:Bcf\" case ($concept eq \"oag:SalesVolumesDailyNaturalGas\" and contains($unit, \":MMcf\")) return \"utr:MMcf/d\" case ($concept = (\"oag:SalesVolumesNaturalGasLiquids\", \"oag:SalesVolumesOilAndCondensate\") and contains($unit, \":MBbls\")) return \"utr:MMBbls\" case ($concept = (\"oag:SalesVolumesDailyNaturalGasLiquids\", \"oag:SalesVolumesDailyOilAndCondensate\") and contains($unit, \":MBbls\")) return \"utr:MBbls/d\" case ($concept eq \"oag:SalesVolumesTotal\" and contains($unit, \":MBbls\")) return \"utr:MMBOE\" case ($concept eq \"oag:SalesVolumesDailyTotal\" and contains($unit, \":MBbls\")) return \"utr:MBOE/d\" default return $unit }; let $target-concept := \"us-gaap:ProvedDevelopedAndUndevelopedReservesSalesOfMineralsInPlace\" let $concepts := flatten($aligned-filter.$facts:ASPECTS.$facts:CONCEPT)[$$ = (\"oag:SalesVolumesNaturalGas\", \"oag:SalesVolumesOilAndCondensate\", \"oag:SalesVolumesNaturalGasLiquids\", \"oag:SalesVolumesTotal\", \"oag:SalesVolumesDailyNaturalGas\", \"oag:SalesVolumesDailyOilAndCondensate\", \"oag:SalesVolumesDailyNaturalGasLiquids\", \"oag:SalesVolumesDailyTotal\")] for $concept in $concepts let $filter-mod := if($concept = (\"oag:SalesVolumesTotal\", \"oag:SalesVolumesDailyTotal\")) then () else local:mapToMember($concept) let $hypercube-mod := { \"Name\" : \"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\", \"Default\" : \"us-gaap:TypeOfReserveDomain\" } let $aligned-filter := copy $f := $aligned-filter modify ( if(exists($filter-mod)) then if(exists($f.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\")) then replace value of json $f.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" with $filter-mod else insert json { \"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\": [ $filter-mod ] } into $f.Aspects else (), replace value of json $f.Aspects.$facts:CONCEPT with [ $target-concept ] ) return $f let $hypercube := copy $h := $hypercube modify ( if(exists($h.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\")) then replace value of json $h.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" with $hypercube-mod else insert json {\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" : $hypercube-mod } into $h.Aspects ) return $h return for $facts in facts:facts-for-internal( $target-concept, $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options) group by $canonical-filter-string := facts:canonically-serialize-object($facts, ($facts:CONCEPT, \"_id\", \"IsInDefaultHypercube\", \"Type\", \"Value\", \"Decimals\", \"AuditTrails\", \"xbrl28:Type\", \"Balance\")) return let $member := local:mapToMember($concept) for $salesVolume in $facts[$$.$facts:ASPECTS.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" eq $member] return let $source-fact := $salesVolume let $value := local:valueAdjusted($concept, $salesVolume) let $unit := local:unitsAdjusted($concept, $salesVolume) let $original-concept := $salesVolume.$facts:ASPECTS.$facts:CONCEPT let $audit-trail-message := \"concept to member mapping: '\" || $concept || \"' -> '\" || $original-concept || \"(us-gaap:ReserveQuantitiesByTypeOfReserveAxis::\" || $member || \")'\" return copy $f := rules:create-computed-fact( $source-fact, $concept, $value, $rule, $audit-trail-message, $source-fact, $options) modify ( if(exists($f.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\")) then delete json $f.Aspects.\"us-gaap:ReserveQuantitiesByTypeOfReserveAxis\" else (), replace value of json $f.Aspects.\"xbrl:Unit\" with $unit ) return $f",
        "ComputableConcepts" : [ "oag:SalesVolumesNaturalGas", "oag:SalesVolumesOilAndCondensate", "oag:SalesVolumesNaturalGasLiquids", "oag:SalesVolumesTotal", "oag:SalesVolumesDailyNaturalGas", "oag:SalesVolumesDailyOilAndCondensate", "oag:SalesVolumesDailyNaturalGasLiquids", "oag:SalesVolumesDailyTotal" ]
    }, {
        "Id" : "decimals_inf",
        "Type" : "xbrl28:formula",
        "Label" : "Align INF decimals",
        "Formula" : "for $fact in facts:facts-for-internal($concepts, $hypercube, $aligned-filter, $concept-maps, $rules, $cache, $options)\r\n                             return\r\n                               if(string($fact.Decimals) eq \"INF\")\r\n                               then\r\n                                 let $concept := $fact.Aspects.\"xbrl:Concept\"\r\n                                 let $audit-trail :=\r\n                                   {\r\n                                     \"Type\" : \"xbrl28:decimals-inf-alignment\",\r\n                                     \"Label\" : \"Aligning Decimals to 3 instead of INF\",\r\n                                     \"Message\" : $concept || \" = 0\",\r\n                                     \"Data\" : {\r\n                                       \"OutputConcept\" : $concept\r\n                                     }\r\n                                   }\r\n                                 return\r\n                                 copy $f := $fact\r\n                                 modify (\r\n                                     replace value of json $f.Decimals with 3,\r\n                                     if(exists($f.AuditTrails))\r\n                                     then append json $audit-trail into $f.AuditTrails\r\n                                     else insert json { AuditTrails: [ $audit-trail ] } into $f\r\n                                 )\r\n                                 return $f\r\n                               else $fact"
    } ],
    "Concepts" : [ {
        "Name" : "fac:GrossProfitValidation",
        "Label" : "[IS1] GrossProfit = Revenues - CostOfRevenue",
        "Id" : "25381047-4b61-4de8-a959-bba256b27397",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS1] GrossProfit = Revenues - CostOfRevenue"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:IncomeLossBeforeEquityMethodInvestmentsValidation",
        "Label" : "[IS3] IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense",
        "Id" : "2cc3feeb-d9d3-498f-afcf-d2f5f3e35910",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS3] IncomeLossBeforeEquityMethodInvestments = OperatingIncomeLoss + NonoperatingIncomeLossPlusInterestAndDebtExpense"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTaxValidation",
        "Label" : "[IS4] IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments",
        "Id" : "7493e91c-fe67-41b2-8c75-aab5429a46b0",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS4] IncomeLossFromContinuingOperationsBeforeTax = IncomeLossBeforeEquityMethodInvestments + IncomeLossFromEquityMethodInvestments"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:IncomeLossFromContinuingOperationsAfterTaxValidation",
        "Label" : "[IS5] IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit",
        "Id" : "44d83261-890a-4ed4-ada6-5b974eeff7b3",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS5] IncomeLossFromContinuingOperationsAfterTax = IncomeLossFromContinuingOperationsBeforeTax - IncomeTaxExpenseBenefit"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetIncomeLossValidation",
        "Label" : "[IS6] NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax",
        "Id" : "d67bcd86-caa4-44a1-a3e9-52ba5c7dca32",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS6] NetIncomeLoss = IncomeLossFromContinuingOperationsAfterTax + IncomeLossFromDiscontinuedOperationsNetOfTax + ExtraordinaryItemsOfIncomeExpenseNetOfTax"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetIncomeLossValidation2",
        "Label" : "[IS7] NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest",
        "Id" : "84338638-f6fa-40bb-8613-6d713993af94",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS7] NetIncomeLoss = NetIncomeLossAttributableToParent + NetIncomeLossAttributableToNoncontrollingInterest"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasicValidation",
        "Label" : "[IS8] NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments",
        "Id" : "4ae780c8-addb-47af-96e6-bef2c3b688ea",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS8] NetIncomeLossAvailableToCommonStockholdersBasic = NetIncomeLossAttributableToParent - PreferredStockDividendsAndOtherAdjustments"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:ComprehensiveIncomeLossValidation",
        "Label" : "[IS9] ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
        "Id" : "a0958798-134a-4048-8330-69f6c085501c",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS9] ComprehensiveIncomeLoss = ComprehensiveIncomeLossAttributableToParent + ComprehensiveIncomeLossAttributableToNoncontrollingInterest"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:ComprehensiveIncomeLossValidation2",
        "Label" : "[IS10] ComprehensiveIncomeLoss = NetIncomeLoss + OtherComprehensiveIncomeLoss",
        "Id" : "e7535d62-5717-4dec-af78-22e1c4381588",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS10] ComprehensiveIncomeLoss = NetIncomeLoss + OtherComprehensiveIncomeLoss"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:OperatingIncomeLossValidation",
        "Label" : "[IS2] OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses",
        "Id" : "057c8af1-d8ff-48f3-a9f7-d169731c4227",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS2] OperatingIncomeLoss = GrossProfit - OperatingExpenses + OtherOperatingIncomeExpenses"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:OperatingIncomeLossValidation2",
        "Label" : "[IS11] OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses",
        "Id" : "2e5ea4e9-5434-4d6d-aed8-e7980d09c530",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[IS11] OperatingIncomeLoss = Revenues - CostsAndExpenses + OtherOperatingIncomeExpenses"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:Validations",
        "Label" : "Fact Validation Rule Results [Hierarchy]",
        "IsAbstract" : true,
        "Id" : "f32c830a-6c31-485b-9ed8-1adfd4e49026"
    }, {
        "Name" : "fac:LiabilitiesAndEquityValidation",
        "Label" : "[BS5] LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity",
        "Id" : "eb1db7d4-f6ca-4d51-908d-8f9a59758f45",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[BS5] LiabilitiesAndEquity = Liabilities + CommitmentsAndContingencies + TemporaryEquity + Equity"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:LiabilitiesValidation",
        "Label" : "[BS4] Liabilities = CurrentLiabilities + NoncurrentLiabilities",
        "Id" : "9522be45-bfb7-4aac-9347-640d38f4dd3c",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[BS4] Liabilities = CurrentLiabilities + NoncurrentLiabilities"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:AssetsValidation2",
        "Label" : "[BS3] Assets = CurrentAssets + NoncurrentAssets",
        "Id" : "32e8bb87-716d-4e81-ab0b-5bfc014b6d04",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[BS3] Assets = CurrentAssets + NoncurrentAssets"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:AssetsValidation",
        "Label" : "[BS2] Assets = LiabilitiesAndEquity",
        "Id" : "065f7208-918d-4deb-a3ae-bc98ed0fceba",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[BS2] Assets = LiabilitiesAndEquity"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:EquityValidation",
        "Label" : "[BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest",
        "Id" : "7e27b022-e0bc-4a05-8b46-47c8eb1e9f06",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[BS1] Equity = EquityAttributableToParent + EquityAttributableToNoncontrollingInterest"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetCashFlowValidation",
        "Label" : "[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]",
        "Id" : "495ae35d-bede-4db0-8686-ef51d24ad507",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[CF1] NetCashFlow = NetCashFlowFromOperatingActivities + NetCashFlowFromInvestingActivities + NetCashFlowFromFinancingActivities [+ ExchangeGainsLosses]"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetCashFlowContinuingValidation",
        "Label" : "[CF2] NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing",
        "Id" : "5dc6698a-e423-4492-ac70-0168c427d906",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[CF2] NetCashFlowContinuing = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromFinancingActivitiesContinuing"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetCashFlowDiscontinuedValidation",
        "Label" : "[CF3] NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued",
        "Id" : "320c6134-5b0a-4726-92ba-e0a813e555d0",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[CF3] NetCashFlowDiscontinued = NetCashFlowFromOperatingActivitiesDiscontinued + NetCashFlowFromInvestingActivitiesDiscontinued + NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetCashFlowFromOperatingActivitiesValidation",
        "Label" : "[CF4] NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued",
        "Id" : "9e4a21ae-c98f-4d7b-8f50-f6076b5ebf03",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[CF4] NetCashFlowFromOperatingActivities = NetCashFlowFromOperatingActivitiesContinuing + NetCashFlowFromOperatingActivitiesDiscontinued"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetCashFlowFromInvestingActivitiesValidation",
        "Label" : "[CF5] NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued",
        "Id" : "342d2950-8ab2-4e74-96c4-abe1fb93cd36",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[CF5] NetCashFlowFromInvestingActivities = NetCashFlowFromInvestingActivitiesContinuing + NetCashFlowFromInvestingActivitiesDiscontinued"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:NetCashFlowFromFinancingActivitiesValidation",
        "Label" : "[CF6] NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued",
        "Id" : "6fcaed50-de0e-48d1-89d2-e83a6d4759cb",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "[CF6] NetCashFlowFromFinancingActivities = NetCashFlowFromFinancingActivitiesContinuing + NetCashFlowFromFinancingActivitiesDiscontinued"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:booleanItemType",
        "BaseType" : "xs:boolean",
        "ClosestSchemaBuiltinType" : "xs:boolean"
    }, {
        "Name" : "fac:FundamentalAccountingConceptsLineItems",
        "Label" : "Fundamental Accounting Concepts [Line Items]",
        "IsAbstract" : true,
        "Id" : "d40f10bb-f1e1-4d36-b8c6-f3d07b8301ba"
    }, {
        "Name" : "fac:FundamentalAccountingConceptsHierarchy",
        "Label" : "Fundamental Accounting Concepts [Hierarchy]",
        "IsAbstract" : true,
        "Id" : "85ef681f-0bec-4afe-874f-1bdca72acd38"
    }, {
        "Name" : "fac:GeneralInformationHierarchy",
        "Label" : "General Information [Hierarchy]",
        "IsAbstract" : true,
        "Id" : "d0238aa2-8f68-43ca-b3aa-9e94e58770c4"
    }, {
        "Name" : "fac:EntityRegistrantName",
        "Label" : "Entity Registrant Name",
        "Id" : "e117f053-1527-4db7-9060-31ad904d155d",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Entity Registrant Name"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string"
    }, {
        "Name" : "fac:EntityCentralIndexKey",
        "Label" : "Central Index Key (CIK)",
        "Id" : "43f943ee-a3b6-4b85-8b2e-3f76de83c4b6",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Central Index Key (CIK)"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:EntityFilerCategory",
        "Label" : "Entity Filer Category",
        "Id" : "c96519ec-8a1b-4a4e-9e00-084785dd0ac2",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Entity Filer Category"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:TradingSymbol",
        "Label" : "Trading Symbol",
        "Id" : "a39c3981-917a-4052-80a9-02794043248c",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Trading Symbol"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:FiscalYearEnd",
        "Label" : "Fiscal Year End",
        "Id" : "1996ea96-c793-4f1e-b8a5-67e912adabf6",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Fiscal Year End"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:FiscalYear",
        "Label" : "Fiscal Year",
        "Id" : "d1c11991-e53d-4367-b87e-9733c686b550",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Fiscal Year"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:FiscalPeriod",
        "Label" : "Fiscal Period",
        "Id" : "3c81fcf5-0c06-4b27-be86-5ec89b8aefe4",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Fiscal Period"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string"
    }, {
        "Name" : "fac:DocumentType",
        "Label" : "Document Type",
        "Id" : "9f2298eb-9938-43a9-8a2a-478b8dc3ca69",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Document Type"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:BalanceSheetDate",
        "Label" : "Balance Sheet Date",
        "Id" : "38081fa9-c6ad-4a5a-8c72-6b2b51709029",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Balance Sheet Date"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:IncomeStatementStartPeriodYearToDate",
        "Label" : "Income Statement Start of Period",
        "Id" : "3e7f5e38-69e4-4e6a-8d42-246f660e88dd",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Income Statement Start of Period"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:BalanceSheetFormat",
        "Label" : "Balance Sheet Format",
        "Id" : "985efb1b-aab1-4c74-811f-bd27939806cd",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Balance Sheet Format"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:IncomeStatementFormat",
        "Label" : "Income Statement Format",
        "Id" : "8b548c5d-ecb1-4eb8-bfb1-04034406a276",
        "DataType" : "xbrli:stringItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Income Statement Format"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:NatureOfOperations",
        "Label" : "Nature of Operations",
        "Id" : "7c504cd7-923c-48d2-bc7f-35d91d6311bc",
        "DataType" : "nonnum:textBlockItemType",
        "BaseType" : "xs:string",
        "ClosestSchemaBuiltinType" : "xs:string",
        "IsTextBlock" : true,
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Nature of Operations"
        } ],
        "IsAbstract" : false
    }, {
        "Name" : "fac:BalanceSheetHierarchy",
        "Label" : "Balance Sheet [Hierarchy]",
        "IsAbstract" : true,
        "Id" : "8418a153-9c8d-442f-8111-88c1ab1178d1"
    }, {
        "Name" : "fac:CurrentAssets",
        "Label" : "Current Assets",
        "Id" : "3aaf7b31-e38e-4b04-ac0e-2870e894fc60",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Current Assets"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NoncurrentAssets",
        "Label" : "Noncurrent Assets",
        "Id" : "e8a162bb-eb95-41a4-b49f-7364d5e9cd69",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Noncurrent Assets"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:Assets",
        "Label" : "Assets",
        "Id" : "42c24d5b-43fa-49e2-bc3b-e74520d7fa20",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Assets"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NoncurrentLiabilities",
        "Label" : "Noncurrent Liabilities",
        "Id" : "75bfd412-ce7f-4358-9294-1a79c7ad03c4",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Noncurrent Liabilities"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:CurrentLiabilities",
        "Label" : "Current Liabilities",
        "Id" : "be05e46e-459e-46df-a988-2501f9e08382",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Current Liabilities"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:Liabilities",
        "Label" : "Liabilities",
        "Id" : "90aa3705-b0de-4c8f-a615-2462dbd7fa5e",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Liabilities"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:CommitmentsAndContingencies",
        "Label" : "Commitments and Contingencies",
        "Id" : "d87ea269-587c-4eff-9a0f-4f2ddc9b121c",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Commitments and Contingencies"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:TemporaryEquity",
        "Label" : "Temporary Equity",
        "Id" : "6ea78026-187a-491c-9580-1f496e6fff5d",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Temporary Equity"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:EquityAttributableToParent",
        "Label" : "Equity Attributable to Parent",
        "Id" : "a81bd0e4-9598-48b3-b3a3-044132f91165",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Equity Attributable to Parent"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:EquityAttributableToNoncontrollingInterest",
        "Label" : "Equity Attributable to Noncontrolling Interest",
        "Id" : "3baae071-7ead-414d-b1c1-36659c2eae78",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Equity Attributable to Noncontrolling Interest"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:RedeemableNoncontrollingInterest",
        "Label" : "Redeemable Noncontrolling Interest",
        "Id" : "db5c3621-1e73-4751-af21-bbf1eefe581c",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Redeemable Noncontrolling Interest"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:Equity",
        "Label" : "Equity",
        "Id" : "78ff4a4d-321f-495c-87d5-4366f463d835",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Equity"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:LiabilitiesAndEquity",
        "Label" : "Liabilities and Equity",
        "Id" : "c2258d34-670b-4e55-ad2c-b20d98c20d92",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Liabilities and Equity"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:IncomeStatementHierarchy",
        "Label" : "Income Statement [Hierarchy]",
        "IsAbstract" : true,
        "Id" : "5026786f-88a9-41f5-8e7e-3155ba4d3422"
    }, {
        "Name" : "fac:Revenues",
        "Label" : "Revenues",
        "Id" : "8ec36da5-8475-499c-a7a5-04dcdc3bf9b5",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Revenues"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:CostOfRevenue",
        "Label" : "Cost of Revenues",
        "Id" : "b57ecab1-c95e-4ec1-a315-01a27acb26fa",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Cost of Revenues"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:GrossProfit",
        "Label" : "Gross Profit",
        "Id" : "ef83cd67-6698-4643-bd7a-f7a0a2176623",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Gross Profit"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:OperatingExpenses",
        "Label" : "Operating Expenses",
        "Id" : "fc36a6ac-4360-4052-bbcb-d48f61b48f2a",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Operating Expenses"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:CostsAndExpenses",
        "Label" : "Costs and Expenses",
        "Id" : "fef38db2-26e7-4ee8-bc9d-b21be0906c3e",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Costs and Expenses"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:OtherOperatingIncomeExpenses",
        "Label" : "Other Operating Income (Expenses)",
        "Id" : "e9d1a991-3a20-498e-bd0e-803dbd550368",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Other Operating Income (Expenses)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:ResearchAndDevelopment",
        "Label" : "Research and Development",
        "Id" : "1fe266aa-daf4-450f-bbf4-ee723e3810ca",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Research and Development"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:OperatingIncomeLoss",
        "Label" : "Operating Income (Loss)",
        "Id" : "ede3aa87-e3a0-4e8d-8314-ea5911b7cc49",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Operating Income (Loss)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NonoperatingIncomeLossPlusInterestAndDebtExpense",
        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense",
        "Id" : "6197b751-99b5-4b27-a64d-e3cc4b30f85b",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Nonoperating Income (Loss) + Interest and Debt Expense"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NonoperatingIncomeLoss",
        "Label" : "Nonoperating Income (Loss)",
        "Id" : "b9424f79-c484-4d8e-9747-b6a2eb9056f4",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Nonoperating Income (Loss)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NonoperatingIncomePlusInterestAndDebtExpensePlusIncomeFromEquityMethodInvestments",
        "Label" : "Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments",
        "Id" : "547f7cef-c4a3-424c-b181-f9ba14e79af9",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Nonoperating Income (Loss) + Interest and Debt Expense + Income (Loss) from Equity Method Investments"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:InterestAndDebtExpense",
        "Label" : "Interest and Debt Expense",
        "Id" : "bc38fba3-de61-4be5-b3c9-44889014ca69",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Interest and Debt Expense"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:IncomeLossBeforeEquityMethodInvestments",
        "Label" : "Income (Loss) Before Equity Method Investments",
        "Id" : "d5734fc4-2872-4e3b-a998-4af30b4f12d3",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Income (Loss) Before Equity Method Investments"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:IncomeLossFromEquityMethodInvestments",
        "Label" : "Income (Loss) from Equity Method Investments",
        "Id" : "28fcaad5-6da0-4ef0-baaa-64c82daf8934",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Income (Loss) from Equity Method Investments"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:IncomeLossFromContinuingOperationsBeforeTax",
        "Label" : "Income (Loss) from Continuing Operations Before Tax",
        "Id" : "a6608188-222e-4e23-8a3f-de52b4499eb9",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Income (Loss) from Continuing Operations Before Tax"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:IncomeTaxExpenseBenefit",
        "Label" : "Income Tax Expense (Benefit)",
        "Id" : "100106f7-a203-4c1e-bc98-20855d4fc62c",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Income Tax Expense (Benefit)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:IncomeLossFromContinuingOperationsAfterTax",
        "Label" : "Income (Loss) from Continuing Operations After Tax",
        "Id" : "c8132a66-4b84-4a52-bc8e-9777c750cb6e",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Income (Loss) from Continuing Operations After Tax"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:IncomeLossFromDiscontinuedOperationsNetOfTax",
        "Label" : "Income (Loss) from Discontinued Operations, Net of Tax",
        "Id" : "cda3d44c-f487-4dcd-ada3-14f735964043",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Income (Loss) from Discontinued Operations, Net of Tax"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:ExtraordinaryItemsOfIncomeExpenseNetOfTax",
        "Label" : "Extraordinary Items of Income (Expense), Net of Tax",
        "Id" : "e227b740-0e08-4182-a372-d9134b3828a5",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Extraordinary Items of Income (Expense), Net of Tax"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetIncomeLoss",
        "Label" : "Net Income (Loss)",
        "Id" : "b79061c5-3301-4b6d-ab6a-3196f2de1118",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Income (Loss)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetIncomeLossAttributableToParent",
        "Label" : "Net Income Attributable to Parent",
        "Id" : "74ee901e-1aab-4a49-b721-b8618d5812e6",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Income Attributable to Parent"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetIncomeLossAttributableToNoncontrollingInterest",
        "Label" : "Net Income Attributable to Noncontrolling Interest",
        "Id" : "19f3a765-1ef3-4418-95e6-d4676937c359",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Income Attributable to Noncontrolling Interest"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:PreferredStockDividendsAndOtherAdjustments",
        "Label" : "Preferred Stock Dividends and Other Adjustments",
        "Id" : "3913a57b-3ccf-4256-9eea-de7c3452e2b0",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Preferred Stock Dividends and Other Adjustments"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetIncomeLossAvailableToCommonStockholdersBasic",
        "Label" : "Net Income (Loss) Available to Common Stockholders, Basic",
        "Id" : "29e8999b-289f-4e5f-90eb-aba355dca2b7",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Income (Loss) Available to Common Stockholders, Basic"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:StatementComprehensiveIncomeHierarchy",
        "Label" : "Statement of Comprehensive Income [Hierarchy]",
        "IsAbstract" : true,
        "Id" : "bf56830c-e8f8-435f-9cd4-fe61c29cc9bf"
    }, {
        "Name" : "fac:OtherComprehensiveIncomeLoss",
        "Label" : "Other Comprehensive Income (Loss)",
        "Id" : "2f9ee402-6be4-43b8-9119-792aed3d07a7",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Other Comprehensive Income (Loss)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:ComprehensiveIncomeLoss",
        "Label" : "Comprehensive Income (Loss)",
        "Id" : "c994d072-f5cc-4ced-9591-fe7793d5671a",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Comprehensive Income (Loss)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:ComprehensiveIncomeLossAttributableToParent",
        "Label" : "Comprehensive Income (Loss) Attributable to Parent",
        "Id" : "9473f5f3-5622-4550-9b38-45e5f915f08e",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Comprehensive Income (Loss) Attributable to Parent"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:ComprehensiveIncomeLossAttributableToNoncontrollingInterest",
        "Label" : "Comprehensive Income (Loss) Attributable to Noncontrolling Interest",
        "Id" : "324a9949-6585-4f64-a110-4a99ef124ed9",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Comprehensive Income (Loss) Attributable to Noncontrolling Interest"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:CashFlowStatementHierarchy",
        "Label" : "Cash Flow Statement [Hierarchy]",
        "IsAbstract" : true,
        "Id" : "0742a561-d3c6-43ae-92e0-37e6771088aa"
    }, {
        "Name" : "fac:NetCashFlowFromOperatingActivitiesContinuing",
        "Label" : "Net Cash Flow from Operating Activities, Continuing",
        "Id" : "098a497b-5d15-4c6a-b510-08f20c03ea2f",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Operating Activities, Continuing"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowFromOperatingActivitiesDiscontinued",
        "Label" : "Net Cash Flow from Operating Activities, Discontinued",
        "Id" : "e228eba9-eda0-4034-93c1-f4592675c165",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Operating Activities, Discontinued"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowFromOperatingActivities",
        "Label" : "Net Cash Flow from Operating Activities",
        "Id" : "2560a0bb-1cfe-48e1-8259-829ac90f9d09",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Operating Activities"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowFromInvestingActivitiesContinuing",
        "Label" : "Net Cash Flow from Investing Activities, Continuing",
        "Id" : "339465fe-077f-4b22-b225-f84283494fa3",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Investing Activities, Continuing"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowFromInvestingActivitiesDiscontinued",
        "Label" : "Net Cash Flow from Investing Activities, Discontinued",
        "Id" : "ed0256a7-838b-4dc9-a0cb-d277c32b8142",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Investing Activities, Discontinued"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowFromInvestingActivities",
        "Label" : "Net Cash Flow from Investing Activities",
        "Id" : "457416ec-88bf-489c-bcd1-26859c141970",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Investing Activities"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowFromFinancingActivitiesContinuing",
        "Label" : "Net Cash Flow from Financing Activities, Continuing",
        "Id" : "58b8e674-bcb6-4536-bbe9-b8c0b820ea61",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Financing Activities, Continuing"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowFromFinancingActivitiesDiscontinued",
        "Label" : "Net Cash Flow from Financing Activities, Discontinued",
        "Id" : "8d992ef9-f9b2-43de-a689-cc62fb876095",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Financing Activities, Discontinued"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowFromFinancingActivities",
        "Label" : "Net Cash Flow from Financing Activities",
        "Id" : "fe3849e6-7ad4-4f08-8f4c-4c1426000769",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow from Financing Activities"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:ExchangeGainsLosses",
        "Label" : "Exchange Gains (Losses)",
        "Id" : "7706af08-7227-45f2-9687-093c1bc985ef",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Exchange Gains (Losses)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlow",
        "Label" : "Net Cash Flow",
        "Id" : "91d7c208-e306-4730-b491-342d83ac53d4",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowContinuing",
        "Label" : "Net Cash Flow, Continuing",
        "Id" : "1514f57b-888a-44b8-a63c-38cc1b1b6280",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow, Continuing"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:NetCashFlowDiscontinued",
        "Label" : "Net Cash Flow, Discontinued",
        "Id" : "e26611c8-fdc7-4099-ae71-35a71f67d226",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Net Cash Flow, Discontinued"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:monetaryItemType",
        "BaseType" : "xbrli:monetary",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:KeyRatiosHierarchy",
        "Label" : "Key Ratios [Hierarchy]",
        "IsAbstract" : true,
        "Id" : "d3f8f59f-41c1-43ac-be0e-3622f68fa03f"
    }, {
        "Name" : "fac:ReturnOnEquity",
        "Label" : "Return on Equity (ROE)",
        "Id" : "9cbe7856-5d61-464f-93ee-96a757f6bdfb",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Return on Equity (ROE)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:pureItemType",
        "BaseType" : "xbrli:pure",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:ReturnOnAssets",
        "Label" : "Return on Assets (ROA)",
        "Id" : "0b852162-8b6d-4aff-8f28-6138088c4861",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Return on Assets (ROA)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:pureItemType",
        "BaseType" : "xbrli:pure",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:ReturnOnSales",
        "Label" : "Return on Sales (ROS)",
        "Id" : "fab38c9f-130e-43fd-bfd3-09c049882737",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Return on Sales (ROS)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:pureItemType",
        "BaseType" : "xbrli:pure",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:SustainableGrowthRate",
        "Label" : "Sustainable Growth Rate (SGR)",
        "Id" : "7e90641a-0e3d-4f09-8334-5fb226769b2c",
        "PeriodType" : "duration",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Sustainable Growth Rate (SGR)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:pureItemType",
        "BaseType" : "xbrli:pure",
        "ClosestSchemaBuiltinType" : "xs:decimal"
    }, {
        "Name" : "fac:CommonStockSharesAuthorized",
        "Label" : "Common Stock Shares (authorized)",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Common Stock Shares (authorized)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:sharesItemType",
        "BaseType" : "xbrli:shares",
        "ClosestSchemaBuiltinType" : "xs:decimal",
        "Id" : "82c018d1-c771-495a-b723-c9bd5294a12d"
    }, {
        "Name" : "fac:CommonStockSharesIssued",
        "Label" : "Common Stock Shares (issued)",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Common Stock Shares (issued)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:sharesItemType",
        "BaseType" : "xbrli:shares",
        "ClosestSchemaBuiltinType" : "xs:decimal",
        "Id" : "6bd1ca55-2851-4942-b345-7b9937e3f211"
    }, {
        "Name" : "fac:CommonStockSharesOutstanding",
        "Label" : "Common Stock Shares (outstanding)",
        "PeriodType" : "instant",
        "Labels" : [ {
            "Role" : "http://www.xbrl.org/2003/role/label",
            "Language" : "en-us",
            "Value" : "Common Stock Shares (outstanding)"
        } ],
        "IsAbstract" : false,
        "DataType" : "xbrli:sharesItemType",
        "BaseType" : "xbrli:shares",
        "ClosestSchemaBuiltinType" : "xs:decimal",
        "Id" : "0e78fd50-12f8-4ead-8c10-8ff09f9b28c0"
    } ],
    "Filters" : {
        "cik" : [  ],
        "tag" : [ "DOW30" ],
        "fiscalYear" : [ 2013 ],
        "fiscalPeriod" : [ "FY" ],
        "sic" : [  ]
    }
}