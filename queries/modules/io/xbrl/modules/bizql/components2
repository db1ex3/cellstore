jsoniq version "1.0";
(:
 : Copyright 2014 28msec Inc.
 :)

module namespace components2 = "http://xbrl.io/modules/bizql/components2";

import module namespace networks = "http://xbrl.io/modules/bizql/networks";
import module namespace resolution = "http://xbrl.io/modules/bizql/resolution";
import module namespace layout = "http://xbrl.io/modules/bizql/layout";
import module namespace hypercubes = "http://xbrl.io/modules/bizql/hypercubes";
import module namespace sec-networks = "http://xbrl.io/modules/bizql/profiles/sec/networks";

(:~
 : <p>Builds a standard definition model out of the specified component.</p>
 : <p>The concepts will be put on the y axis according to the presentation network.</p>
 : <p>The other dimensions are put on the x axis, with one breakdown for each.</p>
 : <p>Explicit dimensions are organized according to the dimension hierarchy from the domain-member network.</p>
 : <p>Typed dimensions are organized according to the actual values.</p>
 :
 : <p>One of the non-default hypercubes will be arbitrarily chosen. If none is available, the default hypercube will be picked.</p>
 : <p>Auto slicing will be performed against the fact table
 : 
 : @param $component a component object.
 :
 : @return a definition model
 :)
declare function components2:definition-model-for-component($component as object) as object
{
    components2:definition-model-for-component($component, ())
};


(:~
 : <p>Builds a standard definition model out of the specified component.</p>
 : <p>The concepts will be put on the y axis according to the presentation network.</p>
 : <p>The other dimensions are put on the x axis, with one breakdown for each.</p>
 : <p>Explicit dimensions are organized according to the dimension hierarchy from the domain-member network.</p>
 : <p>Typed dimensions are organized according to the actual values.</p>
 :
 : @param $component a component object.
 : @param $options <p>some optional parameters, including:</p>
 : <ul>
 :  <li>HypercubeName: a string specifying which hypercube to use. By default, one of the non-default hypercubes will be arbitrarily chosen. If none
 :  is available, the default hypercube will be picked.</li>
 :  <li>AutoSlice: a boolean specifying whether or not slicing should be done automatically, looking at the fact table. Deactivating auto slicing will
 :  lead to better performance, but a more verbose table. If AutoSlice is active, dimensions with only one value in the fact pool will become
 : global filters rather than breakdowns on the x axis.</li>
 :  <li>Slicers: an object with forced slicers.</li>
 : </ul>
 :
 : @error components2:hypercube-does-not-exist if the specified hypercube is not found.
 : @return a definition model
 :)
declare function components2:definition-model-for-component($component as object, $options as object?) as object
{
    let $user-chosen-table as object? := hypercubes:hypercubes-for-components($component, $options.HypercubeName)
    let $non-implicit-table as object? := hypercubes:hypercubes-for-components($component)[$$.Name ne "xbrl:DefaultHypercube"][1]
    let $implicit-table as object := hypercubes:hypercubes-for-components($component, "xbrl:DefaultHypercube")
    let $table as object :=
        switch(true)
        case exists($options.HypercubeName) and empty($user-chosen-table)
            return error(QName("components2:hypercube-does-not-exist"), $options.HypercubeName || " : Hypercube does not exist.")
        case exists($user-chosen-table)
            return $user-chosen-table
        case exists($non-implicit-table)
            return $non-implicit-table
        default return $implicit-table
        
    let $auto-slice as boolean := empty($options.AutoSlice) or $options.AutoSlice
    let $facts as object*:=
        if($auto-slice)
        then hypercubes:facts($table)
        else ()
    let $dimensions as string*:= keys($table.Aspects)
    let $values-by-dimension as object := {|
        for $d in $dimensions
        return { $d : [ distinct-values($facts.Aspects.$d) ] }
    |}
    let $auto-slice-dimensions as string* :=
        keys($values-by-dimension)[size($values-by-dimension.$$) eq 1 and not ($$ = ("xbrl:Period", "sec:FiscalYear",  "sec:FiscalPeriod") ) ]
    let $user-slice-dimensions as string* :=
        keys($options.Slicers)

    let $column-dimensions as string* := keys($values-by-dimension)[not $$ =
        ("xbrl:Concept", "xbrl:Period", "xbrl:Unit", "xbrl:Entity", "sec:Archive", $auto-slice-dimensions, $user-slice-dimensions)]
    let $presentation-network as object? := networks:networks-for-components-and-short-names($component, "Presentation")
    
    let $x-breakdowns as object* := (
        if(not (($auto-slice-dimensions, $user-slice-dimensions) = "xbrl:Period"))
        then
        {
            BreakdownLabels: [ "Period breakdown" ],
            BreakdownTrees: [
                {
                    Kind: "Rule",
                    Abstract: true,
                    Labels: [ "Period [Axis]" ],
                    Children: [ {
                        Kind: "Aspect",
                        Aspect: "xbrl:Period"
                    } ]
                }
            ]
        }
        else (),
        for $d as string in $column-dimensions
        return if($d = ("sec:Accepted", "sec:FiscalYear", "sec:FiscalPeriod"))
        then {
            BreakdownLabels: [ $d || " breakdown" ],
            BreakdownTrees: [
                {
                    Kind: "Rule",
                    Labels: [ $d || " [Axis]" ],
                    Children: [
                        for $value in $values-by-dimension.$d[]
                        return {
                            Kind: "Rule",
                            Labels: [ $value ],
                            AspectRulesSet: { "" : { $d : $value } }
                        }
                    ]
                }
            ]
        }
        else
        let $metadata as object? := descendant-objects($implicit-table)[$$.Name eq $d]
        return {
            BreakdownLabels: [ "Dimension Breakdown" ],
            BreakdownTrees: [
                {
                    Kind: "Rule",
                    Abstract: true,
                    Labels: [ $metadata.Label ],
                    Children: [
                        for $domain as string in keys($table.Aspects.$d.Domains)
                        return {
                            Kind: "DimensionRelationship",
                            LinkRole: $component.Role,
                            Dimension: $d,
                            RelationshipSource: $domain,
                            FormulaAxis: "descendant",
                            Generations: 0
                        }
                    ]
                }
            ]
        },
        if(not (($auto-slice-dimensions, $user-slice-dimensions) = "xbrl:Entity"))
        then
        {
            BreakdownLabels: [ "Entity breakdown" ],
            BreakdownTrees: [
                {
                    Kind: "Rule",
                    Abstract: true,
                    Labels: [ "Reporting Entity [Axis]" ],
                    ConstraintSets: { "" : {} },
                    Children: [ {
                        Kind: "Aspect",
                        Aspect: "xbrl:Entity"
                    } ]
                }
            ]
        }
        else ()
    )
    let $y-breakdowns as object :=
    {
        BreakdownLabels: [ "Breakdown on concepts" ],
        BreakdownTrees: [
            let $lineitems as string* := sec-networks:line-items-report-elements($component).Name
            let $roots as string* := keys($presentation-network.Trees)
            for $lineitems as string in if(exists($lineitems)) then $lineitems else $roots
            return {
                Kind: "ConceptRelationship",
                LinkName: "link:presentationLink",
                LinkRole: $component.Role,
                ArcName: "link:presentationArc", 
                ArcRole: "http://www.xbrl.org/2003/arcrole/parent-child",
                RelationshipSource: $lineitems,
                FormulaAxis: "descendant",
                Generations: 0,
                RollUpAgainstCalculationNetwork: false
            }
        ]
    }
    return {
        ModelKind: "DefinitionModel",
        Labels: [$component.Label],
        Parameters: {},
        Breakdowns: {
            "x" : [
                $x-breakdowns
            ],
            "y": [
                $y-breakdowns
            ]
        },
        TableFilters: {|
            for $d as string in distinct-values(($auto-slice-dimensions, $user-slice-dimensions))
            return if($d = $user-slice-dimensions)
                   then { $d : $options.Slicers.$d }
                   else { $d : $values-by-dimension.$d[] },
            if (not $auto-slice)
            then { "sec:Archive" : $component.Archive }
            else ()
        |}
    }
};

(:~
 : <p>Builds a standard layout model out of the specified component.</p>
 : <p>The concepts will be put on the y axis according to the presentation network.</p>
 : <p>The other dimensions are put on the x axis, with one breakdown for each.</p>
 : <p>Explicit dimensions are organized according to the dimension hierarchy from the domain-member network.</p>
 : <p>Typed dimensions are organized according to the actual values.</p>
 :
 : 
 : @param $component a component object.
 :
 : @return a layout model
 :)
declare function components2:layout-model-for-component($component as item) as object
{
    components2:layout-model-for-component($component, ())
};


(:~
  <p>Builds a standard layout model out of the specified component.</p>
 : <p>The concepts will be put on the y axis according to the presentation network.</p>
 : <p>The other dimensions are put on the x axis, with one breakdown for each.</p>
 : <p>Explicit dimensions are organized according to the dimension hierarchy from the domain-member network.</p>
 : <p>Typed dimensions are organized according to the actual values.</p>
 :
 :  
 : @param $component a component object.
 : @param $options <p>some optional parameters, including:</p>
 : <ul>
 :  <li>HypercubeName: a string specifying which hypercube to use. By default, one of the non-default hypercubes will be arbitrarily chosen. If none
 :  is available, the default hypercube will be picked.</li>
 :  <li>AutoSlice: a boolean specifying whether or not slicing should be done automatically, looking at the fact table. Deactivating auto slicing will
 :  lead to better performance, but a more verbose table. If AutoSlice is active, dimensions with only one value in the fact pool will become
 : global filters rather than breakdowns on the x axis.</li>
 :  <li>Slicers: an object with forced slicers.</li>
 : </ul>
 :
 : @error components2:hypercube-does-not-exist if the specified hypercube is not found.
 : @return a layout model
 :)
declare function components2:layout-model-for-component($component as item, $options as object?) as object
{
    let $definition-model as object := components2:definition-model-for-component($component, $options)
    let $structural-model as object := resolution:resolve($definition-model, $component, $options)
    let $layout-model as object := layout:layout($structural-model, $options)
    return $layout-model
};

