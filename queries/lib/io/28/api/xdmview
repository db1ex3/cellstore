xquery version "3.0";
module namespace xdmview = "http://api.28.io/xdmview";

import module namespace ref = "http://zorba.io/modules/reference";
import module namespace model = "http://api.28.io/model"; 
import schema namespace xdm = "http://www.zorba-xquery.com/schemas/xdm";
   

declare %an:sequential function xdmview:show-node($node, $namespaces, $include-noderef as xs:boolean) {  
  if ($node/self::element())
  then  { 
    variable $nodename := model:node-name($node,$namespaces);
    variable $attributes :=
       for $attr in $node/attribute::attribute()        
       return 
         <xdm:attribute node-name="{fn:node-name($attr)}" node-type="{model:type($attr)}">{if ($include-noderef eq true()) then attribute reference-uri { ref:reference($attr) } else () ,fn:data($attr)}</xdm:attribute>;         
    variable $children := 
        for $c in $node/node() 
        return xdmview:show-node($c, $namespaces, $include-noderef); 
    <xdm:element node-name="{$nodename}" node-type="{model:type-save($node)}">      
      { if($include-noderef eq true()) then attribute reference-uri { ref:reference($node) } else () ,
        if (fn:empty($attributes)) 
        then ()
        else <xdm:attributes>{$attributes}</xdm:attributes>
        ,
        if (fn:empty($children))
        then ()
        else <xdm:children>{$children}</xdm:children>
      }                        
    </xdm:element>
  } else 
  if ($node/self::text())
  then <xdm:text>{if ($include-noderef eq true()) then attribute reference-uri { ref:reference($node) } else () ,fn:replace(fn:replace($node,"\n","&amp;#10;"),"\r","&amp;#13;")}</xdm:text>
  else if ($node/self::attribute())
  then <xdm:attribute node-name="{fn:node-name($node)}" node-type="{model:type($node)}">{if ($include-noderef eq true()) then attribute reference-uri { ref:reference($node) } else () ,fn:data($node)}</xdm:attribute>  
  else if ($node/self::comment())
  then <xdm:comment>{if ($include-noderef eq true()) then attribute reference-uri { ref:reference($node) } else () ,fn:replace(fn:replace($node,"\n","&amp;#10;"),"\r","&amp;#13;")}</xdm:comment>  
  else if ($node/self::processing-instruction())
  then <xdm:processing-instruction node-name="{fn:node-name($node)}">{if ($include-noderef eq true()) then attribute reference-uri { ref:reference($node) } else () ,fn:replace(fn:replace(fn:data($node),"\n","&amp;#10;"),"\r","&amp;#13;")}</xdm:processing-instruction>
  else fn:error("xdmview:1","Unknown node type")
  
};

declare function xdmview:show-namespaces($namespaces) { 
  for $namespace in $namespaces/namespace
  return <xdm:namespace node-name="{fn:data($namespace/@prefix)}">{fn:data($namespace/@uri)}</xdm:namespace>  
};


declare %an:sequential function xdmview:show-nodes($nodes, $include-noderef as xs:boolean) {
  variable $namespaces := <xdm:namespaces/>;  
  variable $content :=
   for $node in $nodes return xdmview:show-node($node, $namespaces, $include-noderef);  
  <xml>
   { for $namespace at $idx in $namespaces/namespace
     where not($namespace/@prefix="" or $namespace/@uri="")
     return attribute { fn:QName($namespace/@uri, fn:concat($namespace/@prefix,":x")) } { "bogus" }
   }
   <xdm:sequence-of-items>
    {       
     $content 
    }
    </xdm:sequence-of-items>
  </xml>/element()  
};
