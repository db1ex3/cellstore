xquery version "3.0";
module namespace functions = "http://api.28.io/functions";
 
import module namespace req = "http://www.28msec.com/modules/http/request";
import module namespace response = "http://www.28msec.com/modules/http/response";
import module namespace ref = "http://zorba.io/modules/reference";

import module namespace model = "http://api.28.io/model";
import module namespace sandbox = "http://api.28.io/sandbox";
 
import schema namespace pul = "http://www.zorba-xquery.com/schemas/pul";
import schema namespace xdm = "http://www.zorba-xquery.com/schemas/xdm";
  
declare %an:sequential function functions:startpage() { 
    
  response:set-content-type("text/html; charset=utf-8");  
  <html xmlns="http://www.w3.org/1999/xhtml">
   <head>
    <title>Collection Browser</title>
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="pragma" content="no-cache" />
    <meta http-equiv="cache-control" content="no-cache" />
    <link rel="stylesheet" type="text/css" href="/sausalito-api-files/cbrowser.css" />
    <link rel="stylesheet" type="text/css" href="http://ajax.googleapis.com/ajax/libs/dojo/1.5/dijit/themes/nihilo/nihilo.css" />
    <script src="http://ajax.googleapis.com/ajax/libs/dojo/1.5/dojo/dojo.xd.js" djConfig="parseOnLoad:true, isDebug:false, baseUrl: '/', dojoBlankHtmlUrl:'/blank.html'"></script>           
    <script language="JavaScript" src="/sausalito-api-files/frontend.js" />  
    <script language="JavaScript" src="/sausalito-api-files/model.js" />
    <script language="JavaScript" src="/sausalito-api-files/controller.js" />
    <script language="JavaScript" src="/sausalito-api-files/client.js" />
    <script language="JavaScript" src="/sausalito-api-files/server.js" />
    <script language="JavaScript" src="/sausalito-api-files/transactions.js" />
    <script language="JavaScript" src="/sausalito-api-files/view.js" />
    <script language="JavaScript" src="/sausalito-api-files/view_sheet.js" />
    <script language="JavaScript" src="/sausalito-api-files/view_xml.js" />
    <script language="JavaScript" src="/sausalito-api-files/constraints.js" />
    <script language="JavaScript" src="/sausalito-api-files/cbrowser.js" />
   </head>
   <body class="nihilo">     
     <div class="maincontainer">
     <div class="topheadline">
       <h1>Collection Browser</h1>
     </div>    
     <form method="get">      
       <table>
         <tr>
           <td>Collection:</td>
           <td>
             <select dojoType="dijit.form.FilteringSelect" name="collection" id="collection" onChange="cbrowser.frontend.collectionPicklistChange()">
               <option value="-- Select --"/>
               { for $collname in model:get-collection-names()
                 return 
                   <option value="{$collname}">                      
                      {$collname}
                   </option>
               }
               
             </select>
           </td>         
           <td>Index:</td>
           <td>
             <input dojoType="dijit.form.TextBox" style="width:100px" type="text" name="indexval" id="indexval" onChange="cbrowser.frontend.indexPicklistChange()"/> in 
             <select dojoType="dijit.form.FilteringSelect" name="index" id="index" onChange="cbrowser.frontend.indexPicklistChange()">
               <option value="-- Select --"/>
               { for $indexname in model:get-index-names() 
                 return 
                   <option value="{$indexname}">                           
                      {$indexname}
                   </option>
               }               
             </select>
             
           </td>                     
         </tr>   
         <tr>
           <td colspan="4">
             <div id="status" class="statusbar">Status: Idle</div> 
           </td>           
         </tr>             
       </table>              
       <div dojoType="dijit.Toolbar">
       <div dojoType="dijit.form.Button" onClick="cbrowser.controller.home();">Home</div>
       <div dojoType="dijit.form.Button" onClick="dijit.byId('help').show();">Help</div>
       <div dojoType="dijit.ToolbarSeparator"></div>
       <div id="xmlbutton" dojoType="dijit.form.ToggleButton" onClick="cbrowser.controller.showXML();">View as XML</div>
       <div id="tablebutton" dojoType="dijit.form.ToggleButton" onClick="cbrowser.controller.showSheet();">View as Sheet</div>       
       <div dojoType="dijit.ToolbarSeparator"></div>             
       <div dojoType="dijit.form.DropDownButton">
         <span>Options</span>
         <div dojoType="dijit.Menu">
           <div id="namespacebutton" dojoType="dijit.CheckedMenuItem" iconClass="dijitCheckBoxIcon" onClick="cbrowser.controller.checkNamespaces();">Show namespaces</div>
           <div id="pkbutton" dojoType="dijit.CheckedMenuItem" iconClass="dijitCheckBoxIcon" onClick="cbrowser.controller.checkPKButton();">Show key candidates</div>
           <div id="valuebutton" dojoType="dijit.CheckedMenuItem" iconClass="dijitCheckBoxIcon" onClick="cbrowser.controller.checkValueButton();">Autocompletion picklists</div>
           <div id="quickeditbutton" dojoType="dijit.CheckedMenuItem" iconClass="dijitCheckBoxIcon" onClick="cbrowser.controller.checkQuickEditButton();">Single click edit</div>
         </div>         
       </div>
       <div dojoType="dijit.form.DropDownButton">
         <span>Actions</span>
         <div dojoType="dijit.Menu">                   
           <div id="constraintButton" dojoType="dijit.MenuItem" onClick="cbrowser.constraints.show();">Apply constraint</div>
           <div id="deletemarked" dojoType="dijit.MenuItem" onClick="cbrowser.controller.deleteMarked();" disabled="true">Delete nodes failing current constraint</div>
           <div dojoType="dijit.MenuSeparator" />
           <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.refreshFromServer();">Refresh data from server</div>
           <div dojoType="dijit.MenuSeparator" />
           <div id="csvButton" dojoType="dijit.MenuItem" onClick="cbrowser.controller.csvDownload();">CSV download</div>                                 
         </div>
       </div>
       <div dojoType="dijit.ToolbarSeparator"></div>
       <div dojoType="dijit.form.Button" onClick="cbrowser.controller.showTransactions();">Uncommited changes: <span id="uncomitted">0</span></div>
       <button dojoType="dijit.form.Button" type="button" onClick="cbrowser.controller.commit()">Commit</button>
       <button dojoType="dijit.form.Button" type="button" onClick="cbrowser.controller.rollback();">Rollback</button>
       <div id="autocommitbutton" dojoType="dijit.form.ToggleButton" iconClass="dijitCheckBoxIcon">Autocommit</div>
       </div>     
       <div id="Content">
         
       </div>
                             
     </form>  
     <div id="changeDialog" style="display:none" title="Uncomitted Changes" dojoType="dijit.Dialog">
     </div>
     <div id="failedDialog" style="display:none; width:800px;" title="Failed Transactions" dojoType="dijit.Dialog">
       <p>The following transactions failed:</p>
       <div id="failedInsertPoint" style="overflow:auto;max-height:500px;width:790px;"></div>
       <div dojoType="dijit.form.Button" onClick="dijit.byId('failedDialog').hide();">Close</div>
     </div>
     <div id="contextMenu" style="display:none" dojoType="dijit.Menu" leftClickToOpen="true">       
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextDeleteNode();">Delete node</div>
       <div id="renameNode" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextRenameNode();">Rename node</div>
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextReplaceValue();">Replace value</div>     
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextUndo();">Undo changes</div>
       <div id="showAsTable" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextShowSheet();">Show as table</div>       
       <div id="showAsXML" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextShowXML();">Show as XML</div>
       <div dojoType="dijit.MenuSeparator"/>
       <div id="insertAttribute" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertAttribute();">Insert attribute</div>            
       <div id="insertQuickLast" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertNode('as last');">Insert element as last child</div>
       <div id="insertQuickAfter" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertNode('after');">Insert element afterwards</div>       
       <div id="insertSnippet" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertSnippet();">Insert XML snippet</div>
       <div dojoType="dijit.MenuSeparator"/>
       <div id="insertBefore" dojoType="dijit.PopupMenuItem"><span>Insert before</span>
         <div dojoType="dijit.Menu">
           <div id="insertBeforeElement" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertNode('before');">Element node</div>
           <div id="insertBeforeText" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertTextNode('before');">Text node</div>
           <div id="insertBeforeComment" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertCommentNode('before');">Comment node</div>
           <div id="insertBeforeInstruction" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertInstructionNode('before');">Processing instruction</div>
         </div>
       </div>
       <div id="insertAfter" dojoType="dijit.PopupMenuItem"><span>Insert after</span>
         <div dojoType="dijit.Menu">
           <div id="insertAfterElement" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertNode('after');">Element node</div>
           <div id="insertAfterText" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertTextNode('after');">Text node</div>
           <div id="insertAfterComment" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertCommentNode('after');">Comment node</div>
           <div id="insertAfterInstruction" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertInstructionNode('after');">Processing instruction</div>
         </div>
       </div>
       <div id="insertFirst" dojoType="dijit.PopupMenuItem"><span>Insert as first child</span>
         <div dojoType="dijit.Menu">
           <div id="insertFirstElement" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertNode('as first');">Element node</div>
           <div id="insertFirstText" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertTextNode('as first');">Text node</div>
           <div id="insertFirstComment" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertCommentNode('as first');">Comment node</div>
           <div id="insertFirstInstruction" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertInstructionNode('as first');">Processing instruction</div>
         </div>
       </div>
       <div id="insertLast" dojoType="dijit.PopupMenuItem"><span>Insert as last child</span>
         <div dojoType="dijit.Menu">
           <div id="insertLastElement" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertNode('as last');">Element node</div>
           <div id="insertLastText" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertTextNode('as last');">Text node</div>
           <div id="insertLastComment" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertCommentNode('as last');">Comment node</div>
           <div id="insertLastInstruction" dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextInsertInstructionNode('as last');">Processing instruction</div>
         </div>
       </div>
                      
     </div> 
     <div id="columnMenu" style="display:none" dojoType="dijit.Menu" leftClickToOpen="true">
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextAscending();">Order ascending</div>
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.contextDescending();">Order descending</div>
       <div dojoType="dijit.MenuSeparator"/>       
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.insertColumnAfter();">Add Column afterwards</div>
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.insertColumnBefore();">Add Column before</div>
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.removeUnusedColumn();">Remove unused Column</div>
       <div dojoType="dijit.MenuSeparator"/>
       <div dojoType="dijit.MenuItem" onClick="cbrowser.controller.setupColumn();">Setup column</div>
     </div>
     </div>
     <div id="help" dojoType="dijit.Dialog" style="display:none" title="Collection Browser Help">
       <h3>Editing instructions</h3>
       <p>Click on a node or attribute value to change content. Enter enter to end editing.</p>
       <p>To rename a node or attribute click on the name and choose 'Rename node'. Press enter to end editing.</p>
       <p>After adding a new element you may use the following keyboard shortcuts:<br/>
       a - add attribute to last created element<br/>
       e - edit text value of last created element<br/>
       c - add child element to last created element<br/>
       n - add element after last created element<br/>
       r - rename node<br/>
       del - delete node<br/>
       cursor keys - move around<br/> 
       </p>             
       <div dojoType="dijit.form.Button" onClick="dijit.byId('help').hide();">Close</div>
     </div>
     <div id="constraintDialog" style="display:none" title="Constraints" dojoType="dijit.Dialog">
     
       <p>
          <input type="radio" dojoType="dijit.form.RadioButton" id="constraintTypeDisable" name="constrainttype" value="off" checked="checked"/>
          Disable constraint
        </p>
     
       <p>
          <input type="radio" dojoType="dijit.form.RadioButton" id="constraintTypeTuple" name="constrainttype" value="eachnode"/>
          <span style="display:inline-">
            On collection <span id="constraintCollection">x</span> foreach node $x check       
            <input id="constraintCondition" dojoType="dijit.form.TextBox" type="text" size="40" />
         </span>
       </p>
       <p>
          <input type="radio" dojoType="dijit.form.RadioButton" id="constraintTypeKey" name="constrainttype" value="uniquekey"/>
          <span style="display:inline-">
            On collection <span id="constraintCollection2">x</span> node $x check unique key
            <input id="constraintCondition2" dojoType="dijit.form.TextBox" type="text" size="40" />
          </span>
        </p>
                     
       <div dojoType="dijit.form.Button" onClick="cbrowser.constraints.activate();">update</div>       
     </div>  
     <div id="snippetDialog" style="display:none" title="Insert XML Snippet" dojoType="dijit.Dialog">
       <select dojoType="dijit.form.FilteringSelect" id="snippetpos">
         <option value="after">Insert afterwards</option>
         <option value="as last">Insert as last child</option>
       </select><br/>
       <div id="snippeterror" style="display:none;background-color: red;border:1px solid black;padding:5px;margin-top:5px;margin-bottom:5px"/>
       <textarea id="snippet" cols="50" rows="10" dojoType="dijit.form.SimpleTextarea" style="height:300px">
       </textarea>
       <br/>      
       <div id="snippetInsertButton" dojoType="dijit.form.Button" onClick="cbrowser.controller.insertSnippetDone()">Insert</div>
       <div dojoType="dijit.form.Button" onClick="dijit.byId('snippetDialog').hide();">Cancel</div>
     </div> 
     <div id="columnDialog" style="display:none" title="Column Setup" dojoType="dijit.Dialog">
       Node name:<br/>
       <input type="text" id="columnName" onKeyUp="cbrowser.controller.columnNameChange()" dojoType="dijit.form.TextBox" size="40"/>
       <br/><br/>              
       Node placement (XML):<br/>       
       <select dojoType="dijit.form.FilteringSelect" id="pathpos">
         <option value="after">Place after</option>
         <option value="as first">Place as first child</option>
         <option value="attribute">Place as attribute</option>
       </select>
       <p>To replace node select a position (first child/after/as attribute) and click on an existing element in the template.</p>
       <div id="elementSetup" class="elementSetup">
       </div>                     
       <div dojoType="dijit.form.Button" onClick="cbrowser.controller.columnSetupDone();">done</div>
     </div>  
   </body>
  </html>
};


declare function functions:encode-for-js($str as xs:string) as xs:string {
  fn:replace(fn:replace(fn:replace($str,"'","\\'"),"\n",""),"\r","")
};

declare function functions:decodeURI($str as xs:string) as xs:anyURI {
  fn:replace(fn:replace($str, "%3D", "?"),"%26","&amp;") cast as xs:anyURI
};

declare function functions:node-to-js($node) as xs:string* {
  if ($node/self::text()) 
  then ("t('",functions:encode-for-js($node),"');")
  else if ($node/self::comment())
  then ("c('",functions:encode-for-js($node),"');")
  else if ($node/self::processing-instruction())
  then ("i('",functions:encode-for-js(xs:string(fn:node-name($node))),"','",functions:encode-for-js($node),"');")
  else (
    "e('",xs:string(fn:node-name($node)),"',","null",
    ",'",fn:namespace-uri($node),"');",
  
    for $attr in $node/attribute::attribute()
    return ("a('",xs:string(fn:local-name($attr)),"','",functions:encode-for-js($attr),"');"),
  
    for $n in $node/node()
    return functions:node-to-js($n),
  
    "f();"
  )
};

declare function functions:tuple($collection as xs:string, $condition as xs:string, $namespaces) { 
  <node-refs> 
  {  
    for $node in sandbox:tuple-constraint(model:get-collection($collection),$condition, $namespaces)
    return <node-ref>{ref:reference($node)}</node-ref>
  }
  </node-refs>    
};

declare function functions:key($collection as xs:string, $condition as xs:string, $namespaces) {
  <node-refs>
  {       
    for $node in sandbox:key-constraint(model:get-collection($collection) , $condition, $namespaces)
    return <node-ref>{ref:reference($node)}</node-ref>
  }
  </node-refs>    
};

declare function functions:pksearch($collection as xs:string) {            
  <keys>{
    for $key in model:find-keys($collection) return <key>{$key}</key>
  }</keys>    
};

declare function functions:valuesearch($collection as xs:string, $path as xs:string, $namespaces) {       
  <values>{
    for $v in sandbox:get-values(model:get-collection($collection,(),1,7000), $path, $namespaces) let $v2:=xs:string($v) order by $v2 ascending return <value>{$v2}</value>
  }</values>
};

declare function functions:namesearch($collection as xs:string, $path as xs:string, $namespaces) {
  <node-names>{           
    for $v in sandbox:get-names(model:get-collection($collection,(),1,7000), $path, $namespaces) let $v2:=model:resolve-qname($v, $namespaces) order by $v2 ascending return <node-name>{$v2}</node-name>
  }</node-names>  
};

declare function functions:collections() { 
  <collections>{    
    for $collection in model:get-collection-names()
    return <collection name="{$collection}" isempty="{fn:empty(model:get-collection($collection,(),1,1))}" />
  }</collections>    
};

declare function functions:indexes() {
  <indexes>{    
    for $index in model:get-index-names()
    return <index name="{$index}"/>
  }</indexes>    
};


declare %an:sequential function functions:entries($collection as xs:string?, $node as xs:anyURI?, $index as xs:string?, $value as xs:string?, $format as xs:string) {  
  variable $offset := req:parameter-values("offset") cast as xs:int?;
  variable $limit := req:parameter-values("limit") cast as xs:int?;
  variable $from := req:parameter-values("from") cast as xs:anyURI?;
   
  variable $xpath := req:parameter-values("query");
  variable $namespaces-str := req:parameter-values("namespaces");
  variable $namespaces := if ($namespaces-str) then functions:parse-namespaces($namespaces-str) else ();
  variable $xpathref := req:parameter-values("ref");
     
  variable $orderbycolumn := req:parameter-values("orderby");
  variable $descending := req:parameter-values("descending") cast as xs:boolean?;
      
  variable $nodesUnordered := 
    if ($node) 
    then model:get-node-group($node)
    else if ($xpath)
    then
       if ($xpathref)
       then sandbox:filter(model:get-node($xpathref cast as xs:anyURI), $xpath, $namespaces) 
       else if ($collection) 
       then sandbox:filter(model:get-collection($collection), $xpath, $namespaces)
       else sandbox:filter(model:get-index-point($index, $value),$xpath, $namespaces)
    else if ($index)
    then model:get-index-point($index, $value)
    else  
       if ($orderbycolumn or not($limit))
       then model:get-collection($collection)
       else model:get-collection($collection, $from, $offset, if ($limit) then $limit + 1 else ());
  
  variable $nodes :=
    if ($orderbycolumn)
    then sandbox:order($nodesUnordered, $orderbycolumn, $descending, $namespaces)
    else $nodesUnordered;
  
  if ($limit)
  then  {  
    variable $size := model:get-collection-size($collection);
    variable $truncated := fn:count($nodes) gt $limit;
    
    if ($truncated) 
    then $nodes := fn:subsequence($nodes, 1, $limit);
    else ();
    
    response:set-header("x-28msec-node-count", model:get-collection-size($collection) cast as xs:string);
    response:set-header("x-28msec-truncated", if ($truncated) then "true" else "false");
    if ($truncated)
    then response:set-header("x-28msec-last", ref:reference($nodes[last()]) cast as xs:string);
    else ();
  } else ();  
        
  $nodes     
};

(:~
 : Internal function. Converts the XML contents of a POST BODY to JavaScript calls that rebuild the given XML for the collection browser frontend  
 : 
 : @return JavaScript calls for collection browser frontend 
 :)
declare %an:sequential function functions:xmltojs($content) {
    
  response:set-content-type("text/javascript; charset=utf-8");
  
  try {
    "script:",
    fn:string-join(
      for $node in $content/xml/node() return functions:node-to-js($node)
      ,"")
  } catch *  {
    $err:description
  }
};

declare function functions:strip-whitespaces($xml) {
  copy $result := $xml
  modify (
    for $text in $result/descendant::text()
    where fn:normalize-space($text) = (""," ")
    return delete node $text
  )
  return $result
};

declare %an:sequential function functions:apply-pul($pul) {
 try { 
    model:applyPUL(validate strict { $pul })   
 } catch * {
    <error-message>{$err:description}</error-message>
 }
};


declare function functions:parse-namespaces($namespaces as xs:string) {
    for $def in fn:tokenize($namespaces,";")
    let $prefix := fn:substring-before($def, "=")
    let $uri := fn:substring-after($def, "=")
    where $prefix and $uri
    return <namespace prefix="{$prefix}" uri="{$uri}" />
};
