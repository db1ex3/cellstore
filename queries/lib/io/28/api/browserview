xquery version "3.0";
module namespace browserview = "http://api.28.io/browserview";

import module namespace ref = "http://zorba.io/modules/reference";
import module namespace model = "http://api.28.io/model"; 
   
declare function browserview:serialize($json)  {  
    if ($json/@type="object")
    then fn:concat("{",browserview:serializeMulti($json/element()),"}")
    else if ($json/@type="array")
    then fn:concat("[",browserview:serializeMulti($json/element()),"]")
    else if ($json/@type="string")
    then fn:concat('"',fn:replace(fn:replace($json/text(),'\\','\\\\'),'"','\\"'),'"')
    else fn:error()
}; 

declare function browserview:serializeMulti($json)  {
  fn:string-join(
    for $j in $json
    return
      if ($j/self::item)
      then browserview:serialize($j)
      else if ($j/self::pair) 
      then fn:concat('"',fn:data($j/@name),'" : ',browserview:serialize($j))
      else fn:error()
  ,",")
};

declare function browserview:node-reference($node, $short as xs:boolean) {
  (: if ($node/self::text()) then fn:concat(browserview:node-reference($node/parent::element(), $short),"t1") 
  else :) ref:reference($node)
};

declare %an:sequential function browserview:show-node($node, $namespaces, $short as xs:boolean) {
  if ($node/self::element())
  then  { 
    variable $nodename := model:node-name($node,$namespaces);
    variable $children := 
        for $c in $node/node() 
        return browserview:show-node($c, $namespaces, true()); 
    <item type="object">
      <pair name="nodeType" type="string">element</pair>
      <pair name="ref" type="string">{browserview:node-reference($node, $short)}</pair>
      <pair name="name" type="string">{$nodename}</pair>      
      <pair name="attributes" type="array">{      
        for $attr in $node/attribute::attribute() 
        return 
          <item type="object">
            <pair name="nodeType" type="string">attribute</pair>
            <pair name="ref" type="string">{browserview:node-reference($attr, true())}</pair>
            <pair name="name" type="string">{fn:node-name($attr)}</pair>
            <pair name="type" type="string">{model:type($attr)}</pair>
            <pair name="value" type="string">{fn:data($attr)}</pair>
          </item>        
      }</pair>
      <pair name="children" type="array">{      
        $children
      }</pair>      
    </item>
  } else if ($node/self::text())
  then <item type="object">
         <pair name="nodeType" type="string">text</pair>
         <pair name="ref" type="string">{browserview:node-reference($node, $short)}</pair>
         <pair name="type" type="string">{model:type-save($node/parent::element())}</pair>
         <pair name="value" type="string">{fn:replace(fn:replace($node,"\n","&amp;#10;"),"\r","&amp;#13;")}</pair>
       </item>
  else if ($node/self::comment())
  then <item type="object">
         <pair name="nodeType" type="string">comment</pair>
         <pair name="ref" type="string">{browserview:node-reference($node, $short)}</pair>         
         <pair name="value" type="string">{fn:replace(fn:replace($node,"\n","&amp;#10;"),"\r","&amp;#13;")}</pair>
       </item>
   else if ($node/self::processing-instruction())
  then <item type="object">
         <pair name="nodeType" type="string">instruction</pair>
         <pair name="ref" type="string">{browserview:node-reference($node, $short)}</pair>
         <pair name="name" type="string">{fn:node-name($node)}</pair>         
         <pair name="value" type="string">{fn:replace(fn:replace(fn:data($node),"\n","&amp;#10;"),"\r","&amp;#13;")}</pair>
       </item>
  else <item type="object">
        <pair name="nodeType" type="string">unknown</pair>
       </item>
};

declare function browserview:show-namespaces($namespaces) { 
  for $namespace in $namespaces/namespace
  return <item type="object">
           <pair name="prefix" type="string">{fn:data($namespace/@prefix)}</pair>
           <pair name="uri" type="string">{fn:data($namespace/@uri)}</pair>
         </item>
};


declare %an:sequential function browserview:show-nodes($nodes) {
  variable $namespaces := <namespaces/>;
  variable $content :=
    for $node in $nodes return browserview:show-node($node, $namespaces, false());
  <json type="object">
    <pair name="namespaces" type="array">{ browserview:show-namespaces($namespaces) }</pair>
    <pair name="path" type="array">{ if (fn:empty($nodes)) then () else browserview:node-path($nodes[1]) }</pair>
    <pair name="data" type="array">{ $content }</pair>
  </json>  
};

declare function browserview:node-path($node) {
  let $path := model:get-node-path($node)   
  for $pathelem at $idx in $path        
  return
      <item type="object">
        <pair name="name" type="string">{fn:data($pathelem/@name)}</pair>
        <pair name="index" type="string">{fn:data($pathelem/@index)}</pair>
        <pair name="ref" type="string">{fn:data($pathelem/@ref)}</pair>
      </item>               
};
