xquery version "3.0";
module namespace sandbox = "http://api.28.io/sandbox";

import module namespace ref = "http://zorba.io/modules/reference";
import module namespace reflection = "http://www.zorba-xquery.com/modules/reflection";
 
declare function sandbox:ns-declarations($namespaces) as xs:string {
  fn:string-join(
    for $namespace in $namespaces
    return fn:concat("declare namespace ",$namespace/@prefix,' = "',$namespace/@uri,'";')
  ,"")
};

declare function sandbox:filter($nodes, $xpath as xs:string, $namespaces) {
  let $namespaceDecl := sandbox:ns-declarations($namespaces)
  let $condition := fn:concat($namespaceDecl,"$nodes", $xpath)
  return reflection:eval($condition)  
};


declare function sandbox:tuple-constraint($nodes, $condition as xs:string, $namespaces) {
  let $eval-string := fn:concat(sandbox:ns-declarations($namespaces),$condition)
  for $x in $nodes
  where not(reflection:eval($eval-string))
  return $x
};

declare function sandbox:key-constraint($nodes, $condition as xs:string, $namespaces) {
  let $eval-string := fn:concat(sandbox:ns-declarations($namespaces), $condition)
  for $x in $nodes 
  let $c := reflection:eval($eval-string) 
  group by $c  
  where fn:count($x)>1
  return $x      
};

declare function sandbox:get-values($nodes, $path as xs:string, $namespaces) {
  let $eval-string := fn:concat(sandbox:ns-declarations($namespaces),"$nodes/self::", $path)
  let $data := reflection:eval($eval-string)
  return fn:distinct-values($data)
};

declare function sandbox:order($nodes, $path as xs:string, $descending as xs:boolean, $namespaces) {
  if ($descending eq true())
  then
    let $expr := fn:concat(sandbox:ns-declarations($namespaces),"$node/",$path)
    for $node in $nodes
    let $crit := (reflection:eval($expr))[1]
    order by $crit descending empty greatest
    return $node
  else
    let $expr := fn:concat(sandbox:ns-declarations($namespaces),"$node/",$path)
    for $node in $nodes
    let $crit := (reflection:eval($expr))[1]
    order by $crit ascending empty greatest
    return $node
};

declare function sandbox:get-names($nodes, $path as xs:string, $namespaces) {
  if ($path eq "parent::node()/node()")
  then
    fn:distinct-values(for $node in $nodes return fn:node-name($node)) 
  else
    let $data := reflection:eval(fn:concat(sandbox:ns-declarations($namespaces),"$nodes/self::", $path))
    return fn:distinct-values(for $node in $data return fn:node-name($node))
};